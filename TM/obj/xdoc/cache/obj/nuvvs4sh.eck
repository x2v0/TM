id: TM
language: CSharp
name:
  Default: TM
qualifiedName:
  Default: TM
type: Assembly
modifiers: {}
items:
- id: TMSrv
  commentId: N:TMSrv
  language: CSharp
  name:
    CSharp: TMSrv
    VB: TMSrv
  nameWithType:
    CSharp: TMSrv
    VB: TMSrv
  qualifiedName:
    CSharp: TMSrv
    VB: TMSrv
  type: Namespace
  assemblies:
  - TM
  modifiers: {}
  items:
  - id: TMSrv.EDataCommand
    commentId: T:TMSrv.EDataCommand
    language: CSharp
    name:
      CSharp: EDataCommand
      VB: EDataCommand
    nameWithType:
      CSharp: EDataCommand
      VB: EDataCommand
    qualifiedName:
      CSharp: TMSrv.EDataCommand
      VB: TMSrv.EDataCommand
    type: Enum
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EDataCommand
      path: ../TM/MainCServer.cs
      startLine: 20
    summary: "\nподтипы данных CMD в пакете пересылки клиент->сервер и сервер->клиент\n"
    example: []
    syntax:
      content:
        CSharp: public enum EDataCommand
        VB: Public Enum EDataCommand
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TMSrv.EDataCommand.SHOTSBLOCK
      commentId: F:TMSrv.EDataCommand.SHOTSBLOCK
      language: CSharp
      name:
        CSharp: SHOTSBLOCK
        VB: SHOTSBLOCK
      nameWithType:
        CSharp: EDataCommand.SHOTSBLOCK
        VB: EDataCommand.SHOTSBLOCK
      qualifiedName:
        CSharp: TMSrv.EDataCommand.SHOTSBLOCK
        VB: TMSrv.EDataCommand.SHOTSBLOCK
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SHOTSBLOCK
        path: ../TM/MainCServer.cs
        startLine: 25
      summary: "\nблок выстрелов (часть плана) клиент->сервер\n"
      example: []
      syntax:
        content:
          CSharp: SHOTSBLOCK = 1
          VB: SHOTSBLOCK = 1
        return:
          type: TMSrv.EDataCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EDataCommand.STATE
      commentId: F:TMSrv.EDataCommand.STATE
      language: CSharp
      name:
        CSharp: STATE
        VB: STATE
      nameWithType:
        CSharp: EDataCommand.STATE
        VB: EDataCommand.STATE
      qualifiedName:
        CSharp: TMSrv.EDataCommand.STATE
        VB: TMSrv.EDataCommand.STATE
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: STATE
        path: ../TM/MainCServer.cs
        startLine: 31
      summary: "\nтекущее состояние сервера  клиент-сервер <see cref=\"!:TM.MCS_State_topass\"></see>\n"
      example: []
      syntax:
        content:
          CSharp: STATE = 2
          VB: STATE = 2
        return:
          type: TMSrv.EDataCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EDataCommand.SHOTSRESULTS
      commentId: F:TMSrv.EDataCommand.SHOTSRESULTS
      language: CSharp
      name:
        CSharp: SHOTSRESULTS
        VB: SHOTSRESULTS
      nameWithType:
        CSharp: EDataCommand.SHOTSRESULTS
        VB: EDataCommand.SHOTSRESULTS
      qualifiedName:
        CSharp: TMSrv.EDataCommand.SHOTSRESULTS
        VB: TMSrv.EDataCommand.SHOTSRESULTS
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SHOTSRESULTS
        path: ../TM/MainCServer.cs
        startLine: 37
      summary: "\nрезультат выполнения серии выстрелов клиент-сервер MCS_shot_results_topass\n"
      example: []
      syntax:
        content:
          CSharp: SHOTSRESULTS = 3
          VB: SHOTSRESULTS = 3
        return:
          type: TMSrv.EDataCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TMSrv.ECommandState
    commentId: T:TMSrv.ECommandState
    language: CSharp
    name:
      CSharp: ECommandState
      VB: ECommandState
    nameWithType:
      CSharp: ECommandState
      VB: ECommandState
    qualifiedName:
      CSharp: TMSrv.ECommandState
      VB: TMSrv.ECommandState
    type: Enum
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ECommandState
      path: ../TM/MainCServer.cs
      startLine: 44
    summary: "\nсостояния сервера MainControl (транслятор, симулятор) по протоколу TM\n"
    example: []
    syntax:
      content:
        CSharp: public enum ECommandState
        VB: Public Enum ECommandState
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TMSrv.ECommandState.UNKNOWN
      commentId: F:TMSrv.ECommandState.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: ECommandState.UNKNOWN
        VB: ECommandState.UNKNOWN
      qualifiedName:
        CSharp: TMSrv.ECommandState.UNKNOWN
        VB: TMSrv.ECommandState.UNKNOWN
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWN
        path: ../TM/MainCServer.cs
        startLine: 49
      summary: "\nне определенный\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWN = 111
          VB: UNKNOWN = 111
        return:
          type: TMSrv.ECommandState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandState.NOTREADY
      commentId: F:TMSrv.ECommandState.NOTREADY
      language: CSharp
      name:
        CSharp: NOTREADY
        VB: NOTREADY
      nameWithType:
        CSharp: ECommandState.NOTREADY
        VB: ECommandState.NOTREADY
      qualifiedName:
        CSharp: TMSrv.ECommandState.NOTREADY
        VB: TMSrv.ECommandState.NOTREADY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NOTREADY
        path: ../TM/MainCServer.cs
        startLine: 55
      summary: "\n&quot;не готов\n"
      example: []
      syntax:
        content:
          CSharp: NOTREADY = 0
          VB: NOTREADY = 0
        return:
          type: TMSrv.ECommandState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandState.READY
      commentId: F:TMSrv.ECommandState.READY
      language: CSharp
      name:
        CSharp: READY
        VB: READY
      nameWithType:
        CSharp: ECommandState.READY
        VB: ECommandState.READY
      qualifiedName:
        CSharp: TMSrv.ECommandState.READY
        VB: TMSrv.ECommandState.READY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: READY
        path: ../TM/MainCServer.cs
        startLine: 61
      summary: "\nготовность\n"
      example: []
      syntax:
        content:
          CSharp: READY = 1
          VB: READY = 1
        return:
          type: TMSrv.ECommandState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandState.INPROCESS
      commentId: F:TMSrv.ECommandState.INPROCESS
      language: CSharp
      name:
        CSharp: INPROCESS
        VB: INPROCESS
      nameWithType:
        CSharp: ECommandState.INPROCESS
        VB: ECommandState.INPROCESS
      qualifiedName:
        CSharp: TMSrv.ECommandState.INPROCESS
        VB: TMSrv.ECommandState.INPROCESS
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: INPROCESS
        path: ../TM/MainCServer.cs
        startLine: 67
      summary: "\nпроцесс исполнения плана\n"
      example: []
      syntax:
        content:
          CSharp: INPROCESS = 2
          VB: INPROCESS = 2
        return:
          type: TMSrv.ECommandState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandState.PAUSED
      commentId: F:TMSrv.ECommandState.PAUSED
      language: CSharp
      name:
        CSharp: PAUSED
        VB: PAUSED
      nameWithType:
        CSharp: ECommandState.PAUSED
        VB: ECommandState.PAUSED
      qualifiedName:
        CSharp: TMSrv.ECommandState.PAUSED
        VB: TMSrv.ECommandState.PAUSED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PAUSED
        path: ../TM/MainCServer.cs
        startLine: 73
      summary: "\nпроцесс исполнения плана приостановлен\n"
      example: []
      syntax:
        content:
          CSharp: PAUSED = 4
          VB: PAUSED = 4
        return:
          type: TMSrv.ECommandState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandState.FINISHED
      commentId: F:TMSrv.ECommandState.FINISHED
      language: CSharp
      name:
        CSharp: FINISHED
        VB: FINISHED
      nameWithType:
        CSharp: ECommandState.FINISHED
        VB: ECommandState.FINISHED
      qualifiedName:
        CSharp: TMSrv.ECommandState.FINISHED
        VB: TMSrv.ECommandState.FINISHED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FINISHED
        path: ../TM/MainCServer.cs
        startLine: 79
      summary: "\nпроцесс исполнения плана завершен\n"
      example: []
      syntax:
        content:
          CSharp: FINISHED = 5
          VB: FINISHED = 5
        return:
          type: TMSrv.ECommandState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TMSrv.EServerState
    commentId: T:TMSrv.EServerState
    language: CSharp
    name:
      CSharp: EServerState
      VB: EServerState
    nameWithType:
      CSharp: EServerState
      VB: EServerState
    qualifiedName:
      CSharp: TMSrv.EServerState
      VB: TMSrv.EServerState
    type: Enum
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EServerState
      path: ../TM/MainCServer.cs
      startLine: 86
    summary: "\nсостояния сервера MainControl как возвращаемое значение MainControl\n"
    example: []
    syntax:
      content:
        CSharp: public enum EServerState
        VB: Public Enum EServerState
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TMSrv.EServerState.UNKNOWN
      commentId: F:TMSrv.EServerState.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: EServerState.UNKNOWN
        VB: EServerState.UNKNOWN
      qualifiedName:
        CSharp: TMSrv.EServerState.UNKNOWN
        VB: TMSrv.EServerState.UNKNOWN
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWN
        path: ../TM/MainCServer.cs
        startLine: 91
      summary: "\nне определён\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWN = -2
          VB: UNKNOWN = -2
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.NOTREADY
      commentId: F:TMSrv.EServerState.NOTREADY
      language: CSharp
      name:
        CSharp: NOTREADY
        VB: NOTREADY
      nameWithType:
        CSharp: EServerState.NOTREADY
        VB: EServerState.NOTREADY
      qualifiedName:
        CSharp: TMSrv.EServerState.NOTREADY
        VB: TMSrv.EServerState.NOTREADY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NOTREADY
        path: ../TM/MainCServer.cs
        startLine: 97
      summary: "\nсеанс лечения не готов\n"
      example: []
      syntax:
        content:
          CSharp: NOTREADY = -1
          VB: NOTREADY = -1
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.READY
      commentId: F:TMSrv.EServerState.READY
      language: CSharp
      name:
        CSharp: READY
        VB: READY
      nameWithType:
        CSharp: EServerState.READY
        VB: EServerState.READY
      qualifiedName:
        CSharp: TMSrv.EServerState.READY
        VB: TMSrv.EServerState.READY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: READY
        path: ../TM/MainCServer.cs
        startLine: 103
      summary: "\nсеанс лечения готов\n"
      example: []
      syntax:
        content:
          CSharp: READY = 0
          VB: READY = 0
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.FILEACCEPTED
      commentId: F:TMSrv.EServerState.FILEACCEPTED
      language: CSharp
      name:
        CSharp: FILEACCEPTED
        VB: FILEACCEPTED
      nameWithType:
        CSharp: EServerState.FILEACCEPTED
        VB: EServerState.FILEACCEPTED
      qualifiedName:
        CSharp: TMSrv.EServerState.FILEACCEPTED
        VB: TMSrv.EServerState.FILEACCEPTED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FILEACCEPTED
        path: ../TM/MainCServer.cs
        startLine: 109
      summary: "\nполучен фай\n"
      example: []
      syntax:
        content:
          CSharp: FILEACCEPTED = 1
          VB: FILEACCEPTED = 1
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.INPROCESS
      commentId: F:TMSrv.EServerState.INPROCESS
      language: CSharp
      name:
        CSharp: INPROCESS
        VB: INPROCESS
      nameWithType:
        CSharp: EServerState.INPROCESS
        VB: EServerState.INPROCESS
      qualifiedName:
        CSharp: TMSrv.EServerState.INPROCESS
        VB: TMSrv.EServerState.INPROCESS
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: INPROCESS
        path: ../TM/MainCServer.cs
        startLine: 115
      summary: "\nсеанс лечения в процессе\n"
      example: []
      syntax:
        content:
          CSharp: INPROCESS = 2
          VB: INPROCESS = 2
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.FINISHED
      commentId: F:TMSrv.EServerState.FINISHED
      language: CSharp
      name:
        CSharp: FINISHED
        VB: FINISHED
      nameWithType:
        CSharp: EServerState.FINISHED
        VB: EServerState.FINISHED
      qualifiedName:
        CSharp: TMSrv.EServerState.FINISHED
        VB: TMSrv.EServerState.FINISHED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FINISHED
        path: ../TM/MainCServer.cs
        startLine: 121
      summary: "\nсеанс лечения закончен\n"
      example: []
      syntax:
        content:
          CSharp: FINISHED = 3
          VB: FINISHED = 3
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.BREAK
      commentId: F:TMSrv.EServerState.BREAK
      language: CSharp
      name:
        CSharp: BREAK
        VB: BREAK
      nameWithType:
        CSharp: EServerState.BREAK
        VB: EServerState.BREAK
      qualifiedName:
        CSharp: TMSrv.EServerState.BREAK
        VB: TMSrv.EServerState.BREAK
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: BREAK
        path: ../TM/MainCServer.cs
        startLine: 127
      summary: "\nсеанс лечения прерван\n"
      example: []
      syntax:
        content:
          CSharp: BREAK = 4
          VB: BREAK = 4
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.PAUSED_EXT
      commentId: F:TMSrv.EServerState.PAUSED_EXT
      language: CSharp
      name:
        CSharp: PAUSED_EXT
        VB: PAUSED_EXT
      nameWithType:
        CSharp: EServerState.PAUSED_EXT
        VB: EServerState.PAUSED_EXT
      qualifiedName:
        CSharp: TMSrv.EServerState.PAUSED_EXT
        VB: TMSrv.EServerState.PAUSED_EXT
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PAUSED_EXT
        path: ../TM/MainCServer.cs
        startLine: 133
      summary: "\nсеанс лечения временно приостановлен по внешнему запросу\n"
      example: []
      syntax:
        content:
          CSharp: PAUSED_EXT = 5
          VB: PAUSED_EXT = 5
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.PAUSED_OPT
      commentId: F:TMSrv.EServerState.PAUSED_OPT
      language: CSharp
      name:
        CSharp: PAUSED_OPT
        VB: PAUSED_OPT
      nameWithType:
        CSharp: EServerState.PAUSED_OPT
        VB: EServerState.PAUSED_OPT
      qualifiedName:
        CSharp: TMSrv.EServerState.PAUSED_OPT
        VB: TMSrv.EServerState.PAUSED_OPT
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PAUSED_OPT
        path: ../TM/MainCServer.cs
        startLine: 139
      summary: "\nсеанс лечения временно приостановлен по команде оператора ускорителя\n"
      example: []
      syntax:
        content:
          CSharp: PAUSED_OPT = 6
          VB: PAUSED_OPT = 6
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.WAIT_D
      commentId: F:TMSrv.EServerState.WAIT_D
      language: CSharp
      name:
        CSharp: WAIT_D
        VB: WAIT_D
      nameWithType:
        CSharp: EServerState.WAIT_D
        VB: EServerState.WAIT_D
      qualifiedName:
        CSharp: TMSrv.EServerState.WAIT_D
        VB: TMSrv.EServerState.WAIT_D
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WAIT_D
        path: ../TM/MainCServer.cs
        startLine: 145
      summary: "\nсеанс лечения временно приостановлен. Требуется верификация перед сменой направления.\n"
      example: []
      syntax:
        content:
          CSharp: WAIT_D = 7
          VB: WAIT_D = 7
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.WAIT_H
      commentId: F:TMSrv.EServerState.WAIT_H
      language: CSharp
      name:
        CSharp: WAIT_H
        VB: WAIT_H
      nameWithType:
        CSharp: EServerState.WAIT_H
        VB: EServerState.WAIT_H
      qualifiedName:
        CSharp: TMSrv.EServerState.WAIT_H
        VB: TMSrv.EServerState.WAIT_H
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WAIT_H
        path: ../TM/MainCServer.cs
        startLine: 151
      summary: "\nсеанс лечения временно приостановлен. Требуется верификация перед сменой высоты\n"
      example: []
      syntax:
        content:
          CSharp: WAIT_H = 8
          VB: WAIT_H = 8
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.WAIT_HD
      commentId: F:TMSrv.EServerState.WAIT_HD
      language: CSharp
      name:
        CSharp: WAIT_HD
        VB: WAIT_HD
      nameWithType:
        CSharp: EServerState.WAIT_HD
        VB: EServerState.WAIT_HD
      qualifiedName:
        CSharp: TMSrv.EServerState.WAIT_HD
        VB: TMSrv.EServerState.WAIT_HD
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WAIT_HD
        path: ../TM/MainCServer.cs
        startLine: 157
      summary: "\nсеанс лечения временно приостановлен. Требуется верификация перед сменой высоты и ракурса\n"
      example: []
      syntax:
        content:
          CSharp: WAIT_HD = 15
          VB: WAIT_HD = 15
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.EServerState.BREAK_PFS_ERR
      commentId: F:TMSrv.EServerState.BREAK_PFS_ERR
      language: CSharp
      name:
        CSharp: BREAK_PFS_ERR
        VB: BREAK_PFS_ERR
      nameWithType:
        CSharp: EServerState.BREAK_PFS_ERR
        VB: EServerState.BREAK_PFS_ERR
      qualifiedName:
        CSharp: TMSrv.EServerState.BREAK_PFS_ERR
        VB: TMSrv.EServerState.BREAK_PFS_ERR
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: BREAK_PFS_ERR
        path: ../TM/MainCServer.cs
        startLine: 163
      summary: "\nсеанс лечения временно приостановлен. &quot;Кресло&quot; не встало в требуемую позицию\n"
      example: []
      syntax:
        content:
          CSharp: BREAK_PFS_ERR = 9
          VB: BREAK_PFS_ERR = 9
        return:
          type: TMSrv.EServerState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TMSrv.ESpotResult
    commentId: T:TMSrv.ESpotResult
    language: CSharp
    name:
      CSharp: ESpotResult
      VB: ESpotResult
    nameWithType:
      CSharp: ESpotResult
      VB: ESpotResult
    qualifiedName:
      CSharp: TMSrv.ESpotResult
      VB: TMSrv.ESpotResult
    type: Enum
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ESpotResult
      path: ../TM/MainCServer.cs
      startLine: 170
    summary: "\nрезультат выполнения выстрела\n"
    example: []
    syntax:
      content:
        CSharp: public enum ESpotResult
        VB: Public Enum ESpotResult
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TMSrv.ESpotResult.NONE
      commentId: F:TMSrv.ESpotResult.NONE
      language: CSharp
      name:
        CSharp: NONE
        VB: NONE
      nameWithType:
        CSharp: ESpotResult.NONE
        VB: ESpotResult.NONE
      qualifiedName:
        CSharp: TMSrv.ESpotResult.NONE
        VB: TMSrv.ESpotResult.NONE
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NONE
        path: ../TM/MainCServer.cs
        startLine: 175
      summary: "\nвыстрел еще не производился\n"
      example: []
      syntax:
        content:
          CSharp: NONE = 0
          VB: NONE = 0
        return:
          type: TMSrv.ESpotResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ESpotResult.DONE
      commentId: F:TMSrv.ESpotResult.DONE
      language: CSharp
      name:
        CSharp: DONE
        VB: DONE
      nameWithType:
        CSharp: ESpotResult.DONE
        VB: ESpotResult.DONE
      qualifiedName:
        CSharp: TMSrv.ESpotResult.DONE
        VB: TMSrv.ESpotResult.DONE
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DONE
        path: ../TM/MainCServer.cs
        startLine: 181
      summary: "\nвыстрел произведен успешно\n"
      example: []
      syntax:
        content:
          CSharp: DONE = 1
          VB: DONE = 1
        return:
          type: TMSrv.ESpotResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ESpotResult.PARTIALLY
      commentId: F:TMSrv.ESpotResult.PARTIALLY
      language: CSharp
      name:
        CSharp: PARTIALLY
        VB: PARTIALLY
      nameWithType:
        CSharp: ESpotResult.PARTIALLY
        VB: ESpotResult.PARTIALLY
      qualifiedName:
        CSharp: TMSrv.ESpotResult.PARTIALLY
        VB: TMSrv.ESpotResult.PARTIALLY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PARTIALLY
        path: ../TM/MainCServer.cs
        startLine: 187
      summary: "\nвыстрел произведен частично\n"
      example: []
      syntax:
        content:
          CSharp: PARTIALLY = 2
          VB: PARTIALLY = 2
        return:
          type: TMSrv.ESpotResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ESpotResult.INCORRECT
      commentId: F:TMSrv.ESpotResult.INCORRECT
      language: CSharp
      name:
        CSharp: INCORRECT
        VB: INCORRECT
      nameWithType:
        CSharp: ESpotResult.INCORRECT
        VB: ESpotResult.INCORRECT
      qualifiedName:
        CSharp: TMSrv.ESpotResult.INCORRECT
        VB: TMSrv.ESpotResult.INCORRECT
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: INCORRECT
        path: ../TM/MainCServer.cs
        startLine: 193
      summary: "\nвыстрел признан некорректным, отсеян\n"
      example: []
      syntax:
        content:
          CSharp: INCORRECT = 3
          VB: INCORRECT = 3
        return:
          type: TMSrv.ESpotResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ESpotResult.TIMEOUT
      commentId: F:TMSrv.ESpotResult.TIMEOUT
      language: CSharp
      name:
        CSharp: TIMEOUT
        VB: TIMEOUT
      nameWithType:
        CSharp: ESpotResult.TIMEOUT
        VB: ESpotResult.TIMEOUT
      qualifiedName:
        CSharp: TMSrv.ESpotResult.TIMEOUT
        VB: TMSrv.ESpotResult.TIMEOUT
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TIMEOUT
        path: ../TM/MainCServer.cs
        startLine: 199
      summary: "\nрезультат не получен системой контроля выпуска\n"
      example: []
      syntax:
        content:
          CSharp: TIMEOUT = 4
          VB: TIMEOUT = 4
        return:
          type: TMSrv.ESpotResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ESpotResult.PASSED
      commentId: F:TMSrv.ESpotResult.PASSED
      language: CSharp
      name:
        CSharp: PASSED
        VB: PASSED
      nameWithType:
        CSharp: ESpotResult.PASSED
        VB: ESpotResult.PASSED
      qualifiedName:
        CSharp: TMSrv.ESpotResult.PASSED
        VB: TMSrv.ESpotResult.PASSED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PASSED
        path: ../TM/MainCServer.cs
        startLine: 205
      summary: "\nотправлен на отстрел, результата еще нет\n"
      example: []
      syntax:
        content:
          CSharp: PASSED = 5
          VB: PASSED = 5
        return:
          type: TMSrv.ESpotResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TMSrv.ECommandError
    commentId: T:TMSrv.ECommandError
    language: CSharp
    name:
      CSharp: ECommandError
      VB: ECommandError
    nameWithType:
      CSharp: ECommandError
      VB: ECommandError
    qualifiedName:
      CSharp: TMSrv.ECommandError
      VB: TMSrv.ECommandError
    type: Enum
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ECommandError
      path: ../TM/MainCServer.cs
      startLine: 213
    summary: "\nошибка, приведшая к не выполнению команды <br />\nпри пополнении править: GetLastErrorDescription, список расшифровок\n"
    example: []
    syntax:
      content:
        CSharp: public enum ECommandError
        VB: Public Enum ECommandError
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TMSrv.ECommandError.EXT_INERRUPT
      commentId: F:TMSrv.ECommandError.EXT_INERRUPT
      language: CSharp
      name:
        CSharp: EXT_INERRUPT
        VB: EXT_INERRUPT
      nameWithType:
        CSharp: ECommandError.EXT_INERRUPT
        VB: ECommandError.EXT_INERRUPT
      qualifiedName:
        CSharp: TMSrv.ECommandError.EXT_INERRUPT
        VB: TMSrv.ECommandError.EXT_INERRUPT
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: EXT_INERRUPT
        path: ../TM/MainCServer.cs
        startLine: 218
      summary: "\nпроцесс прерван по внешнему запросу\n"
      example: []
      syntax:
        content:
          CSharp: EXT_INERRUPT = 2
          VB: EXT_INERRUPT = 2
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.PLANACCEPTED
      commentId: F:TMSrv.ECommandError.PLANACCEPTED
      language: CSharp
      name:
        CSharp: PLANACCEPTED
        VB: PLANACCEPTED
      nameWithType:
        CSharp: ECommandError.PLANACCEPTED
        VB: ECommandError.PLANACCEPTED
      qualifiedName:
        CSharp: TMSrv.ECommandError.PLANACCEPTED
        VB: TMSrv.ECommandError.PLANACCEPTED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PLANACCEPTED
        path: ../TM/MainCServer.cs
        startLine: 224
      summary: "\nплан успешно принят ускорителем\n"
      example: []
      syntax:
        content:
          CSharp: PLANACCEPTED = 1
          VB: PLANACCEPTED = 1
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.NOERROR
      commentId: F:TMSrv.ECommandError.NOERROR
      language: CSharp
      name:
        CSharp: NOERROR
        VB: NOERROR
      nameWithType:
        CSharp: ECommandError.NOERROR
        VB: ECommandError.NOERROR
      qualifiedName:
        CSharp: TMSrv.ECommandError.NOERROR
        VB: TMSrv.ECommandError.NOERROR
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NOERROR
        path: ../TM/MainCServer.cs
        startLine: 230
      summary: "\nвыполнение команды успешно\n"
      example: []
      syntax:
        content:
          CSharp: NOERROR = 0
          VB: NOERROR = 0
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.NOTCONNECTED
      commentId: F:TMSrv.ECommandError.NOTCONNECTED
      language: CSharp
      name:
        CSharp: NOTCONNECTED
        VB: NOTCONNECTED
      nameWithType:
        CSharp: ECommandError.NOTCONNECTED
        VB: ECommandError.NOTCONNECTED
      qualifiedName:
        CSharp: TMSrv.ECommandError.NOTCONNECTED
        VB: TMSrv.ECommandError.NOTCONNECTED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NOTCONNECTED
        path: ../TM/MainCServer.cs
        startLine: 236
      summary: "\nошибка подключения к ретранслятору\n"
      example: []
      syntax:
        content:
          CSharp: NOTCONNECTED = -1
          VB: NOTCONNECTED = -1
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.STATENOTREADY
      commentId: F:TMSrv.ECommandError.STATENOTREADY
      language: CSharp
      name:
        CSharp: STATENOTREADY
        VB: STATENOTREADY
      nameWithType:
        CSharp: ECommandError.STATENOTREADY
        VB: ECommandError.STATENOTREADY
      qualifiedName:
        CSharp: TMSrv.ECommandError.STATENOTREADY
        VB: TMSrv.ECommandError.STATENOTREADY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: STATENOTREADY
        path: ../TM/MainCServer.cs
        startLine: 242
      summary: "\nпопытка выполнить команду при неготовности сервера\n"
      example: []
      syntax:
        content:
          CSharp: STATENOTREADY = -2
          VB: STATENOTREADY = -2
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.FILEIOERROR
      commentId: F:TMSrv.ECommandError.FILEIOERROR
      language: CSharp
      name:
        CSharp: FILEIOERROR
        VB: FILEIOERROR
      nameWithType:
        CSharp: ECommandError.FILEIOERROR
        VB: ECommandError.FILEIOERROR
      qualifiedName:
        CSharp: TMSrv.ECommandError.FILEIOERROR
        VB: TMSrv.ECommandError.FILEIOERROR
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FILEIOERROR
        path: ../TM/MainCServer.cs
        startLine: 248
      summary: "\nошибка доступа к файловой систем\n"
      example: []
      syntax:
        content:
          CSharp: FILEIOERROR = -3
          VB: FILEIOERROR = -3
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.INCORRECTDATA
      commentId: F:TMSrv.ECommandError.INCORRECTDATA
      language: CSharp
      name:
        CSharp: INCORRECTDATA
        VB: INCORRECTDATA
      nameWithType:
        CSharp: ECommandError.INCORRECTDATA
        VB: ECommandError.INCORRECTDATA
      qualifiedName:
        CSharp: TMSrv.ECommandError.INCORRECTDATA
        VB: TMSrv.ECommandError.INCORRECTDATA
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: INCORRECTDATA
        path: ../TM/MainCServer.cs
        startLine: 254
      summary: "\nнекорректные данные в плане\n"
      example: []
      syntax:
        content:
          CSharp: INCORRECTDATA = -4
          VB: INCORRECTDATA = -4
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.ACCNOTCONNECTED
      commentId: F:TMSrv.ECommandError.ACCNOTCONNECTED
      language: CSharp
      name:
        CSharp: ACCNOTCONNECTED
        VB: ACCNOTCONNECTED
      nameWithType:
        CSharp: ECommandError.ACCNOTCONNECTED
        VB: ECommandError.ACCNOTCONNECTED
      qualifiedName:
        CSharp: TMSrv.ECommandError.ACCNOTCONNECTED
        VB: TMSrv.ECommandError.ACCNOTCONNECTED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ACCNOTCONNECTED
        path: ../TM/MainCServer.cs
        startLine: 260
      summary: "\nошибка подключения ретранслятора к MainControl\n"
      example: []
      syntax:
        content:
          CSharp: ACCNOTCONNECTED = -5
          VB: ACCNOTCONNECTED = -5
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.ACCNOTREADY
      commentId: F:TMSrv.ECommandError.ACCNOTREADY
      language: CSharp
      name:
        CSharp: ACCNOTREADY
        VB: ACCNOTREADY
      nameWithType:
        CSharp: ECommandError.ACCNOTREADY
        VB: ECommandError.ACCNOTREADY
      qualifiedName:
        CSharp: TMSrv.ECommandError.ACCNOTREADY
        VB: TMSrv.ECommandError.ACCNOTREADY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ACCNOTREADY
        path: ../TM/MainCServer.cs
        startLine: 266
      summary: "\nне готовность ускорителя к приему плана\n"
      example: []
      syntax:
        content:
          CSharp: ACCNOTREADY = -6
          VB: ACCNOTREADY = -6
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.OP_INERRUPT
      commentId: F:TMSrv.ECommandError.OP_INERRUPT
      language: CSharp
      name:
        CSharp: OP_INERRUPT
        VB: OP_INERRUPT
      nameWithType:
        CSharp: ECommandError.OP_INERRUPT
        VB: ECommandError.OP_INERRUPT
      qualifiedName:
        CSharp: TMSrv.ECommandError.OP_INERRUPT
        VB: TMSrv.ECommandError.OP_INERRUPT
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OP_INERRUPT
        path: ../TM/MainCServer.cs
        startLine: 272
      summary: "\nпроцесс прерван оператором MainControl\n"
      example: []
      syntax:
        content:
          CSharp: OP_INERRUPT = -7
          VB: OP_INERRUPT = -7
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.OP_PAUSE
      commentId: F:TMSrv.ECommandError.OP_PAUSE
      language: CSharp
      name:
        CSharp: OP_PAUSE
        VB: OP_PAUSE
      nameWithType:
        CSharp: ECommandError.OP_PAUSE
        VB: ECommandError.OP_PAUSE
      qualifiedName:
        CSharp: TMSrv.ECommandError.OP_PAUSE
        VB: TMSrv.ECommandError.OP_PAUSE
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OP_PAUSE
        path: ../TM/MainCServer.cs
        startLine: 278
      summary: "\nпроцесс приостановлен оператором\n"
      example: []
      syntax:
        content:
          CSharp: OP_PAUSE = -8
          VB: OP_PAUSE = -8
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.WAIT_D
      commentId: F:TMSrv.ECommandError.WAIT_D
      language: CSharp
      name:
        CSharp: WAIT_D
        VB: WAIT_D
      nameWithType:
        CSharp: ECommandError.WAIT_D
        VB: ECommandError.WAIT_D
      qualifiedName:
        CSharp: TMSrv.ECommandError.WAIT_D
        VB: TMSrv.ECommandError.WAIT_D
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WAIT_D
        path: ../TM/MainCServer.cs
        startLine: 284
      summary: "\nожидание смены направления\n"
      example: []
      syntax:
        content:
          CSharp: WAIT_D = -9
          VB: WAIT_D = -9
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.WAIT_H
      commentId: F:TMSrv.ECommandError.WAIT_H
      language: CSharp
      name:
        CSharp: WAIT_H
        VB: WAIT_H
      nameWithType:
        CSharp: ECommandError.WAIT_H
        VB: ECommandError.WAIT_H
      qualifiedName:
        CSharp: TMSrv.ECommandError.WAIT_H
        VB: TMSrv.ECommandError.WAIT_H
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WAIT_H
        path: ../TM/MainCServer.cs
        startLine: 290
      summary: "\nожидание смены высоты\n"
      example: []
      syntax:
        content:
          CSharp: WAIT_H = -10
          VB: WAIT_H = -10
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.WAIT_HD
      commentId: F:TMSrv.ECommandError.WAIT_HD
      language: CSharp
      name:
        CSharp: WAIT_HD
        VB: WAIT_HD
      nameWithType:
        CSharp: ECommandError.WAIT_HD
        VB: ECommandError.WAIT_HD
      qualifiedName:
        CSharp: TMSrv.ECommandError.WAIT_HD
        VB: TMSrv.ECommandError.WAIT_HD
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WAIT_HD
        path: ../TM/MainCServer.cs
        startLine: 296
      summary: "\nожидание смены высоты и направления\n"
      example: []
      syntax:
        content:
          CSharp: WAIT_HD = -11
          VB: WAIT_HD = -11
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.PFSPOSITION
      commentId: F:TMSrv.ECommandError.PFSPOSITION
      language: CSharp
      name:
        CSharp: PFSPOSITION
        VB: PFSPOSITION
      nameWithType:
        CSharp: ECommandError.PFSPOSITION
        VB: ECommandError.PFSPOSITION
      qualifiedName:
        CSharp: TMSrv.ECommandError.PFSPOSITION
        VB: TMSrv.ECommandError.PFSPOSITION
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFSPOSITION
        path: ../TM/MainCServer.cs
        startLine: 302
      summary: "\nошибка положения системы фиксации\n"
      example: []
      syntax:
        content:
          CSharp: PFSPOSITION = -12
          VB: PFSPOSITION = -12
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.RESTART_PROHIBITED
      commentId: F:TMSrv.ECommandError.RESTART_PROHIBITED
      language: CSharp
      name:
        CSharp: RESTART_PROHIBITED
        VB: RESTART_PROHIBITED
      nameWithType:
        CSharp: ECommandError.RESTART_PROHIBITED
        VB: ECommandError.RESTART_PROHIBITED
      qualifiedName:
        CSharp: TMSrv.ECommandError.RESTART_PROHIBITED
        VB: TMSrv.ECommandError.RESTART_PROHIBITED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RESTART_PROHIBITED
        path: ../TM/MainCServer.cs
        startLine: 308
      summary: "\nповторный запуск плана запрещен\n"
      example: []
      syntax:
        content:
          CSharp: RESTART_PROHIBITED = -13
          VB: RESTART_PROHIBITED = -13
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.NO_PLAN_UPLOADED
      commentId: F:TMSrv.ECommandError.NO_PLAN_UPLOADED
      language: CSharp
      name:
        CSharp: NO_PLAN_UPLOADED
        VB: NO_PLAN_UPLOADED
      nameWithType:
        CSharp: ECommandError.NO_PLAN_UPLOADED
        VB: ECommandError.NO_PLAN_UPLOADED
      qualifiedName:
        CSharp: TMSrv.ECommandError.NO_PLAN_UPLOADED
        VB: TMSrv.ECommandError.NO_PLAN_UPLOADED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NO_PLAN_UPLOADED
        path: ../TM/MainCServer.cs
        startLine: 314
      summary: "\nплан еще не загружен в интерфейс\n"
      example: []
      syntax:
        content:
          CSharp: NO_PLAN_UPLOADED = -14
          VB: NO_PLAN_UPLOADED = -14
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.PLAN_EMPTY
      commentId: F:TMSrv.ECommandError.PLAN_EMPTY
      language: CSharp
      name:
        CSharp: PLAN_EMPTY
        VB: PLAN_EMPTY
      nameWithType:
        CSharp: ECommandError.PLAN_EMPTY
        VB: ECommandError.PLAN_EMPTY
      qualifiedName:
        CSharp: TMSrv.ECommandError.PLAN_EMPTY
        VB: TMSrv.ECommandError.PLAN_EMPTY
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PLAN_EMPTY
        path: ../TM/MainCServer.cs
        startLine: 320
      summary: "\nплан не содержит корректных выстрелов\n"
      example: []
      syntax:
        content:
          CSharp: PLAN_EMPTY = -15
          VB: PLAN_EMPTY = -15
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.UNKNOWNCMD
      commentId: F:TMSrv.ECommandError.UNKNOWNCMD
      language: CSharp
      name:
        CSharp: UNKNOWNCMD
        VB: UNKNOWNCMD
      nameWithType:
        CSharp: ECommandError.UNKNOWNCMD
        VB: ECommandError.UNKNOWNCMD
      qualifiedName:
        CSharp: TMSrv.ECommandError.UNKNOWNCMD
        VB: TMSrv.ECommandError.UNKNOWNCMD
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWNCMD
        path: ../TM/MainCServer.cs
        startLine: 326
      summary: "\nнеизвестная команда|данные\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWNCMD = -16
          VB: UNKNOWNCMD = -16
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.CHECKSUMMERR
      commentId: F:TMSrv.ECommandError.CHECKSUMMERR
      language: CSharp
      name:
        CSharp: CHECKSUMMERR
        VB: CHECKSUMMERR
      nameWithType:
        CSharp: ECommandError.CHECKSUMMERR
        VB: ECommandError.CHECKSUMMERR
      qualifiedName:
        CSharp: TMSrv.ECommandError.CHECKSUMMERR
        VB: TMSrv.ECommandError.CHECKSUMMERR
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CHECKSUMMERR
        path: ../TM/MainCServer.cs
        startLine: 332
      summary: "\nошибка контрольной суммы в присланном пакете\n"
      example: []
      syntax:
        content:
          CSharp: CHECKSUMMERR = -17
          VB: CHECKSUMMERR = -17
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.CROPPEDDATA
      commentId: F:TMSrv.ECommandError.CROPPEDDATA
      language: CSharp
      name:
        CSharp: CROPPEDDATA
        VB: CROPPEDDATA
      nameWithType:
        CSharp: ECommandError.CROPPEDDATA
        VB: ECommandError.CROPPEDDATA
      qualifiedName:
        CSharp: TMSrv.ECommandError.CROPPEDDATA
        VB: TMSrv.ECommandError.CROPPEDDATA
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CROPPEDDATA
        path: ../TM/MainCServer.cs
        startLine: 338
      summary: "\nполучено данных меньше, чем указано в заголовке пакета\n"
      example: []
      syntax:
        content:
          CSharp: CROPPEDDATA = -18
          VB: CROPPEDDATA = -18
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TMSrv.ECommandError.ECSNOTCONNECTED
      commentId: F:TMSrv.ECommandError.ECSNOTCONNECTED
      language: CSharp
      name:
        CSharp: ECSNOTCONNECTED
        VB: ECSNOTCONNECTED
      nameWithType:
        CSharp: ECommandError.ECSNOTCONNECTED
        VB: ECommandError.ECSNOTCONNECTED
      qualifiedName:
        CSharp: TMSrv.ECommandError.ECSNOTCONNECTED
        VB: TMSrv.ECommandError.ECSNOTCONNECTED
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ECSNOTCONNECTED
        path: ../TM/MainCServer.cs
        startLine: 344
      summary: "\nошибка подключения сервера к серверу контроля пучка\n"
      example: []
      syntax:
        content:
          CSharp: ECSNOTCONNECTED = -19
          VB: ECSNOTCONNECTED = -19
        return:
          type: TMSrv.ECommandError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TMSrv.MCS_State
    commentId: T:TMSrv.MCS_State
    language: CSharp
    name:
      CSharp: MCS_State
      VB: MCS_State
    nameWithType:
      CSharp: MCS_State
      VB: MCS_State
    qualifiedName:
      CSharp: TMSrv.MCS_State
      VB: TMSrv.MCS_State
    type: Struct
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MCS_State
      path: ../TM/MainCServer.cs
      startLine: 351
    summary: "\nсостояние сервера MainCServer - структура ServerData в DataServer\n"
    example: []
    syntax:
      content:
        CSharp: public struct MCS_State
        VB: Public Structure MCS_State
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TMSrv.MCS_State.Length
      commentId: F:TMSrv.MCS_State.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: MCS_State.Length
        VB: MCS_State.Length
      qualifiedName:
        CSharp: TMSrv.MCS_State.Length
        VB: TMSrv.MCS_State.Length
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/MainCServer.cs
        startLine: 357
      summary: "\nThe length of MCS_State structure\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.MCS_State.state
      commentId: F:TMSrv.MCS_State.state
      language: CSharp
      name:
        CSharp: state
        VB: state
      nameWithType:
        CSharp: MCS_State.state
        VB: MCS_State.state
      qualifiedName:
        CSharp: TMSrv.MCS_State.state
        VB: TMSrv.MCS_State.state
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: state
        path: ../TM/MainCServer.cs
        startLine: 366
      summary: "\nThe state\n"
      example: []
      syntax:
        content:
          CSharp: public uint state
          VB: Public state As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.lasterror
      commentId: F:TMSrv.MCS_State.lasterror
      language: CSharp
      name:
        CSharp: lasterror
        VB: lasterror
      nameWithType:
        CSharp: MCS_State.lasterror
        VB: MCS_State.lasterror
      qualifiedName:
        CSharp: TMSrv.MCS_State.lasterror
        VB: TMSrv.MCS_State.lasterror
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: lasterror
        path: ../TM/MainCServer.cs
        startLine: 372
      summary: "\nThe lasterror\n"
      example: []
      syntax:
        content:
          CSharp: public uint lasterror
          VB: Public lasterror As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.spots_passed
      commentId: F:TMSrv.MCS_State.spots_passed
      language: CSharp
      name:
        CSharp: spots_passed
        VB: spots_passed
      nameWithType:
        CSharp: MCS_State.spots_passed
        VB: MCS_State.spots_passed
      qualifiedName:
        CSharp: TMSrv.MCS_State.spots_passed
        VB: TMSrv.MCS_State.spots_passed
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: spots_passed
        path: ../TM/MainCServer.cs
        startLine: 378
      summary: "\nколичество уже произведенных выстрелов в плане\n"
      example: []
      syntax:
        content:
          CSharp: public uint spots_passed
          VB: Public spots_passed As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.pcount_passed
      commentId: F:TMSrv.MCS_State.pcount_passed
      language: CSharp
      name:
        CSharp: pcount_passed
        VB: pcount_passed
      nameWithType:
        CSharp: MCS_State.pcount_passed
        VB: MCS_State.pcount_passed
      qualifiedName:
        CSharp: TMSrv.MCS_State.pcount_passed
        VB: TMSrv.MCS_State.pcount_passed
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: pcount_passed
        path: ../TM/MainCServer.cs
        startLine: 384
      summary: "\nThe pcount passed\n"
      example: []
      syntax:
        content:
          CSharp: public float pcount_passed
          VB: Public pcount_passed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.spots_on_remote
      commentId: F:TMSrv.MCS_State.spots_on_remote
      language: CSharp
      name:
        CSharp: spots_on_remote
        VB: spots_on_remote
      nameWithType:
        CSharp: MCS_State.spots_on_remote
        VB: MCS_State.spots_on_remote
      qualifiedName:
        CSharp: TMSrv.MCS_State.spots_on_remote
        VB: TMSrv.MCS_State.spots_on_remote
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: spots_on_remote
        path: ../TM/MainCServer.cs
        startLine: 390
      summary: "\nThe spots on remote\n"
      example: []
      syntax:
        content:
          CSharp: public uint spots_on_remote
          VB: Public spots_on_remote As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.elsize
      commentId: F:TMSrv.MCS_State.elsize
      language: CSharp
      name:
        CSharp: elsize
        VB: elsize
      nameWithType:
        CSharp: MCS_State.elsize
        VB: MCS_State.elsize
      qualifiedName:
        CSharp: TMSrv.MCS_State.elsize
        VB: TMSrv.MCS_State.elsize
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: elsize
        path: ../TM/MainCServer.cs
        startLine: 403
      summary: "\nThe elsize\n"
      example: []
      syntax:
        content:
          CSharp: public int elsize
          VB: Public elsize As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.size
      commentId: F:TMSrv.MCS_State.size
      language: CSharp
      name:
        CSharp: size
        VB: size
      nameWithType:
        CSharp: MCS_State.size
        VB: MCS_State.size
      qualifiedName:
        CSharp: TMSrv.MCS_State.size
        VB: TMSrv.MCS_State.size
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: size
        path: ../TM/MainCServer.cs
        startLine: 409
      summary: "\nThe size\n"
      example: []
      syntax:
        content:
          CSharp: public int size
          VB: Public size As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.count
      commentId: F:TMSrv.MCS_State.count
      language: CSharp
      name:
        CSharp: count
        VB: count
      nameWithType:
        CSharp: MCS_State.count
        VB: MCS_State.count
      qualifiedName:
        CSharp: TMSrv.MCS_State.count
        VB: TMSrv.MCS_State.count
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: count
        path: ../TM/MainCServer.cs
        startLine: 415
      summary: "\nThe count\n"
      example: []
      syntax:
        content:
          CSharp: public int count
          VB: Public count As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.incsize
      commentId: F:TMSrv.MCS_State.incsize
      language: CSharp
      name:
        CSharp: incsize
        VB: incsize
      nameWithType:
        CSharp: MCS_State.incsize
        VB: MCS_State.incsize
      qualifiedName:
        CSharp: TMSrv.MCS_State.incsize
        VB: TMSrv.MCS_State.incsize
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: incsize
        path: ../TM/MainCServer.cs
        startLine: 421
      summary: "\nThe incsize\n"
      example: []
      syntax:
        content:
          CSharp: public int incsize
          VB: Public incsize As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.plan_finished
      commentId: F:TMSrv.MCS_State.plan_finished
      language: CSharp
      name:
        CSharp: plan_finished
        VB: plan_finished
      nameWithType:
        CSharp: MCS_State.plan_finished
        VB: MCS_State.plan_finished
      qualifiedName:
        CSharp: TMSrv.MCS_State.plan_finished
        VB: TMSrv.MCS_State.plan_finished
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: plan_finished
        path: ../TM/MainCServer.cs
        startLine: 427
      summary: "\nThe plan finished\n"
      example: []
      syntax:
        content:
          CSharp: public uint plan_finished
          VB: Public plan_finished As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.waitshots_count
      commentId: F:TMSrv.MCS_State.waitshots_count
      language: CSharp
      name:
        CSharp: waitshots_count
        VB: waitshots_count
      nameWithType:
        CSharp: MCS_State.waitshots_count
        VB: MCS_State.waitshots_count
      qualifiedName:
        CSharp: TMSrv.MCS_State.waitshots_count
        VB: TMSrv.MCS_State.waitshots_count
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: waitshots_count
        path: ../TM/MainCServer.cs
        startLine: 432
      summary: "\nThe waitshots count\n"
      example: []
      syntax:
        content:
          CSharp: public uint waitshots_count
          VB: Public waitshots_count As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.stateMC
      commentId: F:TMSrv.MCS_State.stateMC
      language: CSharp
      name:
        CSharp: stateMC
        VB: stateMC
      nameWithType:
        CSharp: MCS_State.stateMC
        VB: MCS_State.stateMC
      qualifiedName:
        CSharp: TMSrv.MCS_State.stateMC
        VB: TMSrv.MCS_State.stateMC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: stateMC
        path: ../TM/MainCServer.cs
        startLine: 438
      summary: "\nThe state mc\n"
      example: []
      syntax:
        content:
          CSharp: public int stateMC
          VB: Public stateMC As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.progress
      commentId: F:TMSrv.MCS_State.progress
      language: CSharp
      name:
        CSharp: progress
        VB: progress
      nameWithType:
        CSharp: MCS_State.progress
        VB: MCS_State.progress
      qualifiedName:
        CSharp: TMSrv.MCS_State.progress
        VB: TMSrv.MCS_State.progress
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: progress
        path: ../TM/MainCServer.cs
        startLine: 444
      summary: "\nThe progress\n"
      example: []
      syntax:
        content:
          CSharp: public double progress
          VB: Public progress As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.time
      commentId: F:TMSrv.MCS_State.time
      language: CSharp
      name:
        CSharp: time
        VB: time
      nameWithType:
        CSharp: MCS_State.time
        VB: MCS_State.time
      qualifiedName:
        CSharp: TMSrv.MCS_State.time
        VB: TMSrv.MCS_State.time
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: time
        path: ../TM/MainCServer.cs
        startLine: 450
      summary: "\nThe time\n"
      example: []
      syntax:
        content:
          CSharp: public float time
          VB: Public time As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.startTime
      commentId: F:TMSrv.MCS_State.startTime
      language: CSharp
      name:
        CSharp: startTime
        VB: startTime
      nameWithType:
        CSharp: MCS_State.startTime
        VB: MCS_State.startTime
      qualifiedName:
        CSharp: TMSrv.MCS_State.startTime
        VB: TMSrv.MCS_State.startTime
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: startTime
        path: ../TM/MainCServer.cs
        startLine: 456
      summary: "\nThe start time\n"
      example: []
      syntax:
        content:
          CSharp: public float startTime
          VB: Public startTime As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.spots_pcount
      commentId: F:TMSrv.MCS_State.spots_pcount
      language: CSharp
      name:
        CSharp: spots_pcount
        VB: spots_pcount
      nameWithType:
        CSharp: MCS_State.spots_pcount
        VB: MCS_State.spots_pcount
      qualifiedName:
        CSharp: TMSrv.MCS_State.spots_pcount
        VB: TMSrv.MCS_State.spots_pcount
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: spots_pcount
        path: ../TM/MainCServer.cs
        startLine: 462
      summary: "\nThe spots pcount\n"
      example: []
      syntax:
        content:
          CSharp: public double spots_pcount
          VB: Public spots_pcount As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.stateMC_changed
      commentId: F:TMSrv.MCS_State.stateMC_changed
      language: CSharp
      name:
        CSharp: stateMC_changed
        VB: stateMC_changed
      nameWithType:
        CSharp: MCS_State.stateMC_changed
        VB: MCS_State.stateMC_changed
      qualifiedName:
        CSharp: TMSrv.MCS_State.stateMC_changed
        VB: TMSrv.MCS_State.stateMC_changed
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: stateMC_changed
        path: ../TM/MainCServer.cs
        startLine: 468
      summary: "\nThe state mc changed\n"
      example: []
      syntax:
        content:
          CSharp: public int stateMC_changed
          VB: Public stateMC_changed As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State.progress_new
      commentId: F:TMSrv.MCS_State.progress_new
      language: CSharp
      name:
        CSharp: progress_new
        VB: progress_new
      nameWithType:
        CSharp: MCS_State.progress_new
        VB: MCS_State.progress_new
      qualifiedName:
        CSharp: TMSrv.MCS_State.progress_new
        VB: TMSrv.MCS_State.progress_new
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: progress_new
        path: ../TM/MainCServer.cs
        startLine: 474
      summary: "\nThe progress new\n"
      example: []
      syntax:
        content:
          CSharp: public double progress_new
          VB: Public progress_new As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: TMSrv.MCS_State_topass
    commentId: T:TMSrv.MCS_State_topass
    language: CSharp
    name:
      CSharp: MCS_State_topass
      VB: MCS_State_topass
    nameWithType:
      CSharp: MCS_State_topass
      VB: MCS_State_topass
    qualifiedName:
      CSharp: TMSrv.MCS_State_topass
      VB: TMSrv.MCS_State_topass
    type: Struct
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MCS_State_topass
      path: ../TM/MainCServer.cs
      startLine: 484
    summary: "\nсостояние сервера MainCServer - структура для пересылки\n"
    example: []
    syntax:
      content:
        CSharp: public struct MCS_State_topass
        VB: Public Structure MCS_State_topass
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TMSrv.MCS_State_topass.Length
      commentId: F:TMSrv.MCS_State_topass.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: MCS_State_topass.Length
        VB: MCS_State_topass.Length
      qualifiedName:
        CSharp: TMSrv.MCS_State_topass.Length
        VB: TMSrv.MCS_State_topass.Length
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/MainCServer.cs
        startLine: 492
      summary: "\nThe length of MCS_State_topass structure\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.MCS_State_topass.state
      commentId: F:TMSrv.MCS_State_topass.state
      language: CSharp
      name:
        CSharp: state
        VB: state
      nameWithType:
        CSharp: MCS_State_topass.state
        VB: MCS_State_topass.state
      qualifiedName:
        CSharp: TMSrv.MCS_State_topass.state
        VB: TMSrv.MCS_State_topass.state
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: state
        path: ../TM/MainCServer.cs
        startLine: 498
      summary: "\nтекущее состояние сервера из списка состояний - MCS_STATE_READY\n"
      example: []
      syntax:
        content:
          CSharp: public int state
          VB: Public state As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State_topass.lasterror
      commentId: F:TMSrv.MCS_State_topass.lasterror
      language: CSharp
      name:
        CSharp: lasterror
        VB: lasterror
      nameWithType:
        CSharp: MCS_State_topass.lasterror
        VB: MCS_State_topass.lasterror
      qualifiedName:
        CSharp: TMSrv.MCS_State_topass.lasterror
        VB: TMSrv.MCS_State_topass.lasterror
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: lasterror
        path: ../TM/MainCServer.cs
        startLine: 504
      summary: "\nошибка выполнения крайней команды из списка ошибок - MCS_ERR_NOERROR\n"
      example: []
      syntax:
        content:
          CSharp: public uint lasterror
          VB: Public lasterror As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State_topass.spots_passed
      commentId: F:TMSrv.MCS_State_topass.spots_passed
      language: CSharp
      name:
        CSharp: spots_passed
        VB: spots_passed
      nameWithType:
        CSharp: MCS_State_topass.spots_passed
        VB: MCS_State_topass.spots_passed
      qualifiedName:
        CSharp: TMSrv.MCS_State_topass.spots_passed
        VB: TMSrv.MCS_State_topass.spots_passed
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: spots_passed
        path: ../TM/MainCServer.cs
        startLine: 510
      summary: "\nколичество уже произведенных выстрелов в плане\n"
      example: []
      syntax:
        content:
          CSharp: public uint spots_passed
          VB: Public spots_passed As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State_topass.spots_count
      commentId: F:TMSrv.MCS_State_topass.spots_count
      language: CSharp
      name:
        CSharp: spots_count
        VB: spots_count
      nameWithType:
        CSharp: MCS_State_topass.spots_count
        VB: MCS_State_topass.spots_count
      qualifiedName:
        CSharp: TMSrv.MCS_State_topass.spots_count
        VB: TMSrv.MCS_State_topass.spots_count
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: spots_count
        path: ../TM/MainCServer.cs
        startLine: 516
      summary: "\nколичество загруженных выстрелов в плане\n"
      example: []
      syntax:
        content:
          CSharp: public uint spots_count
          VB: Public spots_count As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MCS_State_topass.ToString
      commentId: M:TMSrv.MCS_State_topass.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: MCS_State_topass.ToString()
        VB: MCS_State_topass.ToString()
      qualifiedName:
        CSharp: TMSrv.MCS_State_topass.ToString()
        VB: TMSrv.MCS_State_topass.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/MainCServer.cs
        startLine: 523
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TMSrv.MCS_State_topass.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
  - id: TMSrv.MCS_spot_results_topass
    commentId: T:TMSrv.MCS_spot_results_topass
    language: CSharp
    name:
      CSharp: MCS_spot_results_topass
      VB: MCS_spot_results_topass
    nameWithType:
      CSharp: MCS_spot_results_topass
      VB: MCS_spot_results_topass
    qualifiedName:
      CSharp: TMSrv.MCS_spot_results_topass
      VB: TMSrv.MCS_spot_results_topass
    type: Struct
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MCS_spot_results_topass
      path: ../TM/MainCServer.cs
      startLine: 535
    summary: "\nсостояние сервера MainCServer - структура для пересылки <br />\nиспользуется в обоих протоколах\n"
    example: []
    syntax:
      content:
        CSharp: public struct MCS_spot_results_topass
        VB: Public Structure MCS_spot_results_topass
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TMSrv.MCS_spot_results_topass.Length
      commentId: F:TMSrv.MCS_spot_results_topass.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: MCS_spot_results_topass.Length
        VB: MCS_spot_results_topass.Length
      qualifiedName:
        CSharp: TMSrv.MCS_spot_results_topass.Length
        VB: TMSrv.MCS_spot_results_topass.Length
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/MainCServer.cs
        startLine: 542
      summary: "\nThe length of MCS_spot_results_topass structure\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: TMSrv.MC_PT
    commentId: T:TMSrv.MC_PT
    language: CSharp
    name:
      CSharp: MC_PT
      VB: MC_PT
    nameWithType:
      CSharp: MC_PT
      VB: MC_PT
    qualifiedName:
      CSharp: TMSrv.MC_PT
      VB: TMSrv.MC_PT
    type: Struct
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MC_PT
      path: ../TM/MainCServer.cs
      startLine: 608
    summary: "\n<pre><code>формат структуры обмена с программой MainContol как сервером (версия Протвино, Обнинск)\n\nclient to server:\n0–запрос о состоянии ускорителя,\n1–начать лечение,\n2–прервать лечение,\n3–временно приостановить лечение,\n4–возобновить лечение\n\nserver to client:\n-1 – ускоритель не готов;\n0 – ускоритель готов;\n1 – файл-задание на терапию успешно принят сервером\n2 – сеанс лечения начался в pt.t_procent передается процент выполнения задания в pt.file_name\nпередается имя файла истории облучения\n3 – сеанс лечения закончился\n4 – сеанс лечения прерван\n5 – сеанс лечения временно приостановлен по внешнему запросу\n6 – сеанс лечения временно приостановлен по команде оператора ускорителя\n7 – сеанс лечения временно приостановлен. Требуется верификация перед сменой направления.\n8 – сеанс лечения временно приостановлен. Требуется верификация перед сменой высоты.\n15 – сеанс лечения временно приостановлен. Требуется верификация перед сменой высоты и ракурса.\n9 – сеанс лечения временно приостановлен. &quot;Кресло&quot; не встало в требуемую позицию.</code></pre>\n"
    example: []
    syntax:
      content:
        CSharp: public struct MC_PT
        VB: Public Structure MC_PT
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TMSrv.MC_PT.Length
      commentId: F:TMSrv.MC_PT.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: MC_PT.Length
        VB: MC_PT.Length
      qualifiedName:
        CSharp: TMSrv.MC_PT.Length
        VB: TMSrv.MC_PT.Length
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/MainCServer.cs
        startLine: 614
      summary: "\nThe length of MC_PT structure\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.MC_PT.s_info
      commentId: F:TMSrv.MC_PT.s_info
      language: CSharp
      name:
        CSharp: s_info
        VB: s_info
      nameWithType:
        CSharp: MC_PT.s_info
        VB: MC_PT.s_info
      qualifiedName:
        CSharp: TMSrv.MC_PT.s_info
        VB: TMSrv.MC_PT.s_info
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: s_info
        path: ../TM/MainCServer.cs
        startLine: 622
      summary: "\nстатус/признак передаваемой информации\n"
      example: []
      syntax:
        content:
          CSharp: public int s_info
          VB: Public s_info As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.filePlan_name
      commentId: F:TMSrv.MC_PT.filePlan_name
      language: CSharp
      name:
        CSharp: filePlan_name
        VB: filePlan_name
      nameWithType:
        CSharp: MC_PT.filePlan_name
        VB: MC_PT.filePlan_name
      qualifiedName:
        CSharp: TMSrv.MC_PT.filePlan_name
        VB: TMSrv.MC_PT.filePlan_name
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: filePlan_name
        path: ../TM/MainCServer.cs
        startLine: 629
      summary: "\nполное имя файла-задания на терапию\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] filePlan_name
          VB: Public filePlan_name As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.t_procent
      commentId: F:TMSrv.MC_PT.t_procent
      language: CSharp
      name:
        CSharp: t_procent
        VB: t_procent
      nameWithType:
        CSharp: MC_PT.t_procent
        VB: MC_PT.t_procent
      qualifiedName:
        CSharp: TMSrv.MC_PT.t_procent
        VB: TMSrv.MC_PT.t_procent
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: t_procent
        path: ../TM/MainCServer.cs
        startLine: 635
      summary: "\nпередается процент, с которого надо начать выполнение задания\n"
      example: []
      syntax:
        content:
          CSharp: public double t_procent
          VB: Public t_procent As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.ir_tm
      commentId: F:TMSrv.MC_PT.ir_tm
      language: CSharp
      name:
        CSharp: ir_tm
        VB: ir_tm
      nameWithType:
        CSharp: MC_PT.ir_tm
        VB: MC_PT.ir_tm
      qualifiedName:
        CSharp: TMSrv.MC_PT.ir_tm
        VB: TMSrv.MC_PT.ir_tm
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ir_tm
        path: ../TM/MainCServer.cs
        startLine: 641
      summary: "\nвремя выполнения плана от начала до останова\n"
      example: []
      syntax:
        content:
          CSharp: public float ir_tm
          VB: Public ir_tm As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.fileProection_name
      commentId: F:TMSrv.MC_PT.fileProection_name
      language: CSharp
      name:
        CSharp: fileProection_name
        VB: fileProection_name
      nameWithType:
        CSharp: MC_PT.fileProection_name
        VB: MC_PT.fileProection_name
      qualifiedName:
        CSharp: TMSrv.MC_PT.fileProection_name
        VB: TMSrv.MC_PT.fileProection_name
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: fileProection_name
        path: ../TM/MainCServer.cs
        startLine: 648
      summary: "\nполное имя файла проекций\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] fileProection_name
          VB: Public fileProection_name As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.fileContours_name
      commentId: F:TMSrv.MC_PT.fileContours_name
      language: CSharp
      name:
        CSharp: fileContours_name
        VB: fileContours_name
      nameWithType:
        CSharp: MC_PT.fileContours_name
        VB: MC_PT.fileContours_name
      qualifiedName:
        CSharp: TMSrv.MC_PT.fileContours_name
        VB: TMSrv.MC_PT.fileContours_name
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: fileContours_name
        path: ../TM/MainCServer.cs
        startLine: 655
      summary: "\nполное имя файла контуров\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] fileContours_name
          VB: Public fileContours_name As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.PFSMode
      commentId: F:TMSrv.MC_PT.PFSMode
      language: CSharp
      name:
        CSharp: PFSMode
        VB: PFSMode
      nameWithType:
        CSharp: MC_PT.PFSMode
        VB: MC_PT.PFSMode
      qualifiedName:
        CSharp: TMSrv.MC_PT.PFSMode
        VB: TMSrv.MC_PT.PFSMode
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFSMode
        path: ../TM/MainCServer.cs
        startLine: 661
      summary: "\nрежим облучения (1 – сидя, 3 - лежа)\n"
      example: []
      syntax:
        content:
          CSharp: public int PFSMode
          VB: Public PFSMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.Fl_ChAngle
      commentId: F:TMSrv.MC_PT.Fl_ChAngle
      language: CSharp
      name:
        CSharp: Fl_ChAngle
        VB: Fl_ChAngle
      nameWithType:
        CSharp: MC_PT.Fl_ChAngle
        VB: MC_PT.Fl_ChAngle
      qualifiedName:
        CSharp: TMSrv.MC_PT.Fl_ChAngle
        VB: TMSrv.MC_PT.Fl_ChAngle
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Fl_ChAngle
        path: ../TM/MainCServer.cs
        startLine: 667
      summary: "\nделать остановку при смене угла (0 - не делать, 1 - делать)\n"
      example: []
      syntax:
        content:
          CSharp: public int Fl_ChAngle
          VB: Public Fl_ChAngle As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT.Fl_ChHeight
      commentId: F:TMSrv.MC_PT.Fl_ChHeight
      language: CSharp
      name:
        CSharp: Fl_ChHeight
        VB: Fl_ChHeight
      nameWithType:
        CSharp: MC_PT.Fl_ChHeight
        VB: MC_PT.Fl_ChHeight
      qualifiedName:
        CSharp: TMSrv.MC_PT.Fl_ChHeight
        VB: TMSrv.MC_PT.Fl_ChHeight
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Fl_ChHeight
        path: ../TM/MainCServer.cs
        startLine: 673
      summary: "\nделать остановку при смене высоты (0 - не делать, 1 - делать)\n"
      example: []
      syntax:
        content:
          CSharp: public int Fl_ChHeight
          VB: Public Fl_ChHeight As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: TMSrv.MC_PT_ILH
    commentId: T:TMSrv.MC_PT_ILH
    language: CSharp
    name:
      CSharp: MC_PT_ILH
      VB: MC_PT_ILH
    nameWithType:
      CSharp: MC_PT_ILH
      VB: MC_PT_ILH
    qualifiedName:
      CSharp: TMSrv.MC_PT_ILH
      VB: TMSrv.MC_PT_ILH
    type: Struct
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MC_PT_ILH
      path: ../TM/MainCServer.cs
      startLine: 681
    summary: "\nформат структуры обмена с программой MainContol как сервером (версия Израиль), заголовок\n"
    example: []
    syntax:
      content:
        CSharp: public struct MC_PT_ILH
        VB: Public Structure MC_PT_ILH
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TMSrv.MC_PT_ILH.Length
      commentId: F:TMSrv.MC_PT_ILH.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: MC_PT_ILH.Length
        VB: MC_PT_ILH.Length
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.Length
        VB: TMSrv.MC_PT_ILH.Length
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/MainCServer.cs
        startLine: 687
      summary: "\nThe length of MC_PT_ILH structure\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.MC_PT_ILH.sign
      commentId: F:TMSrv.MC_PT_ILH.sign
      language: CSharp
      name:
        CSharp: sign
        VB: sign
      nameWithType:
        CSharp: MC_PT_ILH.sign
        VB: MC_PT_ILH.sign
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.sign
        VB: TMSrv.MC_PT_ILH.sign
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: sign
        path: ../TM/MainCServer.cs
        startLine: 696
      summary: "\nsignature: &quot;TMCL&quot;\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] sign
          VB: Public sign As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT_ILH.type
      commentId: F:TMSrv.MC_PT_ILH.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: MC_PT_ILH.type
        VB: MC_PT_ILH.type
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.type
        VB: TMSrv.MC_PT_ILH.type
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: type
        path: ../TM/MainCServer.cs
        startLine: 702
      summary: "\ntype: 1 - shot results\n"
      example: []
      syntax:
        content:
          CSharp: public int type
          VB: Public type As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT_ILH.s_info
      commentId: F:TMSrv.MC_PT_ILH.s_info
      language: CSharp
      name:
        CSharp: s_info
        VB: s_info
      nameWithType:
        CSharp: MC_PT_ILH.s_info
        VB: MC_PT_ILH.s_info
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.s_info
        VB: TMSrv.MC_PT_ILH.s_info
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: s_info
        path: ../TM/MainCServer.cs
        startLine: 730
      summary: "\nстатус/признак передаваемой информации\n<pre><code>client to server:\n   0 – запрос о состоянии ускорителя, \n1 – начать лечение, \n2 – прервать лечение, \n3 – временно приостановить лечение, \n4 – возобновить лечение\n\nserver to clent:\n  -1 – ускоритель не готов; \n0 – ускоритель готов; \n1 – файл-задание на терапию успешно принят сервером \n2 – сеанс лечения начался в pt.t_procent передается процент выполнения задания в pt.file_name передается имя файла истории облучения \n3 – сеанс лечения закончился \n4 – сеанс лечения прерван \n5 – сеанс лечения временно приостановлен по внешнему запросу \n6 – сеанс лечения временно приостановлен по команде оператора ускорителя\n7 – сеанс лечения временно приостановлен. Требуется верификация перед сменой направления. \n8 – сеанс лечения временно приостановлен. Требуется верификация перед сменой высоты. \n15 – сеанс лечения временно приостановлен. Требуется верификация перед сменой высоты и ракурса. \n9 – сеанс лечения временно приостановлен. &quot;Кресло&quot; не встало в требуемую позицию. </code></pre>\n"
      example: []
      syntax:
        content:
          CSharp: public int s_info
          VB: Public s_info As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT_ILH.t_procent
      commentId: F:TMSrv.MC_PT_ILH.t_procent
      language: CSharp
      name:
        CSharp: t_procent
        VB: t_procent
      nameWithType:
        CSharp: MC_PT_ILH.t_procent
        VB: MC_PT_ILH.t_procent
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.t_procent
        VB: TMSrv.MC_PT_ILH.t_procent
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: t_procent
        path: ../TM/MainCServer.cs
        startLine: 735
      summary: "\nprocent\n"
      example: []
      syntax:
        content:
          CSharp: public double t_procent
          VB: Public t_procent As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT_ILH.ir_tm
      commentId: F:TMSrv.MC_PT_ILH.ir_tm
      language: CSharp
      name:
        CSharp: ir_tm
        VB: ir_tm
      nameWithType:
        CSharp: MC_PT_ILH.ir_tm
        VB: MC_PT_ILH.ir_tm
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.ir_tm
        VB: TMSrv.MC_PT_ILH.ir_tm
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ir_tm
        path: ../TM/MainCServer.cs
        startLine: 740
      summary: "\nThe ir tm\n"
      example: []
      syntax:
        content:
          CSharp: public int ir_tm
          VB: Public ir_tm As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.MC_PT_ILH.spots_count
      commentId: F:TMSrv.MC_PT_ILH.spots_count
      language: CSharp
      name:
        CSharp: spots_count
        VB: spots_count
      nameWithType:
        CSharp: MC_PT_ILH.spots_count
        VB: MC_PT_ILH.spots_count
      qualifiedName:
        CSharp: TMSrv.MC_PT_ILH.spots_count
        VB: TMSrv.MC_PT_ILH.spots_count
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/MainCServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: spots_count
        path: ../TM/MainCServer.cs
        startLine: 746
      summary: "\nколичество выстрелов в отчете\n"
      example: []
      syntax:
        content:
          CSharp: public int spots_count
          VB: Public spots_count As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: TMSrv.MainCServer
    commentId: T:TMSrv.MainCServer
    language: CSharp
    name:
      CSharp: MainCServer
      VB: MainCServer
    nameWithType:
      CSharp: MainCServer
      VB: MainCServer
    qualifiedName:
      CSharp: TMSrv.MainCServer
      VB: TMSrv.MainCServer
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/MainCServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MainCServer
      path: ../TM/MainCServer.cs
      startLine: 751
    syntax:
      content:
        CSharp: 'public class MainCServer : TMDataServer, IDisposable'
        VB: >-
          Public Class MainCServer

              Inherits TMDataServer

              Implements IDisposable
    inheritance:
    - System.Object
    - TMSrv.TMDataServer
    implements:
    - System.IDisposable
    inheritedMembers:
    - TMSrv.TMDataServer.DataServers
    - TMSrv.TMDataServer.DACADC_MAX_DAC
    - TMSrv.TMDataServer.DACADC_MAX_ADC
    - TMSrv.TMDataServer.handle
    - TMSrv.TMDataServer.ip
    - TMSrv.TMDataServer.port
    - TMSrv.TMDataServer.ConnectType
    - TMSrv.TMDataServer.ConnectAvailable
    - TMSrv.TMDataServer.type
    - TMSrv.TMDataServer.name
    - TMSrv.TMDataServer.OnProcessing
    - TMSrv.TMDataServer.COM
    - TMSrv.TMDataServer.lnk
    - TMSrv.TMDataServer.ControlID
    - TMSrv.TMDataServer.ControlRight
    - TMSrv.TMDataServer.Controls
    - TMSrv.TMDataServer.ControlsCount
    - TMSrv.TMDataServer.DevStatus
    - TMSrv.TMDataServer.InWait
    - TMSrv.TMDataServer.LogPath
    - TMSrv.TMDataServer.NeedAutoReconnect
    - TMSrv.TMDataServer.NeedForReconnect
    - TMSrv.TMDataServer.buf
    - TMSrv.TMDataServer.timeout
    - TMSrv.TMDataServer.TimerTicks
    - TMSrv.TMDataServer.TMSettings
    - TMSrv.TMDataServer.traceToLog
    - TMSrv.TMDataServer.update
    - TMSrv.TMDataServer.UpdatePeriod
    - TMSrv.TMDataServer.UpdateTimerID
    - TMSrv.TMDataServer.configChanged
    - TMSrv.TMDataServer.DS_LangText
    - TMSrv.TMDataServer.AfterTryConnect
    - TMSrv.TMDataServer.AfterDisconnect
    - TMSrv.TMDataServer.Disconnect
    - TMSrv.TMDataServer.Connect
    - TMSrv.TMDataServer.ChangeDevicesStatus
    - TMSrv.TMDataServer.FreeServerData
    - TMSrv.TMDataServer.ParseIncomingPacket
    - TMSrv.TMDataServer.PostParseData
    - TMSrv.TMDataServer.MakeCommand
    - TMSrv.TMDataServer.Client
    - TMSrv.TMDataServer.ServerData
    - TMSrv.TMDataServer.Dispose
    - TMSrv.TMDataServer.Dispose(System.Boolean)
    - TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: TMSrv.VCControl
    commentId: T:TMSrv.VCControl
    language: CSharp
    name:
      CSharp: VCControl
      VB: VCControl
    nameWithType:
      CSharp: VCControl
      VB: VCControl
    qualifiedName:
      CSharp: TMSrv.VCControl
      VB: TMSrv.VCControl
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: VCControl
      path: ../TM/TMDataServer.cs
      startLine: 54
    summary: "\nвизуализация датчика. Добавляется серверу посредством AddVCControl\n"
    example: []
    syntax:
      content:
        CSharp: public class VCControl
        VB: Public Class VCControl
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: TMSrv.DACADC_data
    commentId: T:TMSrv.DACADC_data
    language: CSharp
    name:
      CSharp: DACADC_data
      VB: DACADC_data
    nameWithType:
      CSharp: DACADC_data
      VB: DACADC_data
    qualifiedName:
      CSharp: TMSrv.DACADC_data
      VB: TMSrv.DACADC_data
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: DACADC_data
      path: ../TM/TMDataServer.cs
      startLine: 151
    summary: "\nсерверные данные <br />\nтолько для сервера вакуума\n"
    example: []
    syntax:
      content:
        CSharp: public class DACADC_data
        VB: Public Class DACADC_data
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMSrv.DACADC_data.DACADC_MAX_ADC
      commentId: F:TMSrv.DACADC_data.DACADC_MAX_ADC
      language: CSharp
      name:
        CSharp: DACADC_MAX_ADC
        VB: DACADC_MAX_ADC
      nameWithType:
        CSharp: DACADC_data.DACADC_MAX_ADC
        VB: DACADC_data.DACADC_MAX_ADC
      qualifiedName:
        CSharp: TMSrv.DACADC_data.DACADC_MAX_ADC
        VB: TMSrv.DACADC_data.DACADC_MAX_ADC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DACADC_MAX_ADC
        path: ../TM/TMDataServer.cs
        startLine: 159
      summary: "\nмаксимальное количество каналов в сервере\n"
      example: []
      syntax:
        content:
          CSharp: public static int DACADC_MAX_ADC
          VB: Public Shared DACADC_MAX_ADC As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.DACADC_data.DACADC_MAX_DAC
      commentId: F:TMSrv.DACADC_data.DACADC_MAX_DAC
      language: CSharp
      name:
        CSharp: DACADC_MAX_DAC
        VB: DACADC_MAX_DAC
      nameWithType:
        CSharp: DACADC_data.DACADC_MAX_DAC
        VB: DACADC_data.DACADC_MAX_DAC
      qualifiedName:
        CSharp: TMSrv.DACADC_data.DACADC_MAX_DAC
        VB: TMSrv.DACADC_data.DACADC_MAX_DAC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DACADC_MAX_DAC
        path: ../TM/TMDataServer.cs
        startLine: 165
      summary: "\n&quot;максимальное количество каналов в сервере\n"
      example: []
      syntax:
        content:
          CSharp: public static int DACADC_MAX_DAC
          VB: Public Shared DACADC_MAX_DAC As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.DACADC_data.adc
      commentId: F:TMSrv.DACADC_data.adc
      language: CSharp
      name:
        CSharp: adc
        VB: adc
      nameWithType:
        CSharp: DACADC_data.adc
        VB: DACADC_data.adc
      qualifiedName:
        CSharp: TMSrv.DACADC_data.adc
        VB: TMSrv.DACADC_data.adc
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: adc
        path: ../TM/TMDataServer.cs
        startLine: 174
      summary: "\nThe adc\n"
      example: []
      syntax:
        content:
          CSharp: public double[] adc
          VB: Public adc As Double()
        return:
          type: System.Double[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DACADC_data.addr
      commentId: F:TMSrv.DACADC_data.addr
      language: CSharp
      name:
        CSharp: addr
        VB: addr
      nameWithType:
        CSharp: DACADC_data.addr
        VB: DACADC_data.addr
      qualifiedName:
        CSharp: TMSrv.DACADC_data.addr
        VB: TMSrv.DACADC_data.addr
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: addr
        path: ../TM/TMDataServer.cs
        startLine: 179
      summary: "\nThe addr\n"
      example: []
      syntax:
        content:
          CSharp: public byte addr
          VB: Public addr As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DACADC_data.dac
      commentId: F:TMSrv.DACADC_data.dac
      language: CSharp
      name:
        CSharp: dac
        VB: dac
      nameWithType:
        CSharp: DACADC_data.dac
        VB: DACADC_data.dac
      qualifiedName:
        CSharp: TMSrv.DACADC_data.dac
        VB: TMSrv.DACADC_data.dac
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: dac
        path: ../TM/TMDataServer.cs
        startLine: 184
      summary: "\nThe dac\n"
      example: []
      syntax:
        content:
          CSharp: public ushort[] dac
          VB: Public dac As UShort()
        return:
          type: System.UInt16[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DACADC_data.MAX_ADC
      commentId: F:TMSrv.DACADC_data.MAX_ADC
      language: CSharp
      name:
        CSharp: MAX_ADC
        VB: MAX_ADC
      nameWithType:
        CSharp: DACADC_data.MAX_ADC
        VB: DACADC_data.MAX_ADC
      qualifiedName:
        CSharp: TMSrv.DACADC_data.MAX_ADC
        VB: TMSrv.DACADC_data.MAX_ADC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MAX_ADC
        path: ../TM/TMDataServer.cs
        startLine: 190
      summary: "\nмаксимальное количество входных каналов на этом устройстве\n"
      example: []
      syntax:
        content:
          CSharp: public byte MAX_ADC
          VB: Public MAX_ADC As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DACADC_data.MAX_DAC
      commentId: F:TMSrv.DACADC_data.MAX_DAC
      language: CSharp
      name:
        CSharp: MAX_DAC
        VB: MAX_DAC
      nameWithType:
        CSharp: DACADC_data.MAX_DAC
        VB: DACADC_data.MAX_DAC
      qualifiedName:
        CSharp: TMSrv.DACADC_data.MAX_DAC
        VB: TMSrv.DACADC_data.MAX_DAC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MAX_DAC
        path: ../TM/TMDataServer.cs
        startLine: 196
      summary: "\nмаксимальное количество выходных каналов на этом устройстве\n"
      example: []
      syntax:
        content:
          CSharp: public byte MAX_DAC
          VB: Public MAX_DAC As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: TMSrv.DevDescr
    commentId: T:TMSrv.DevDescr
    language: CSharp
    name:
      CSharp: DevDescr
      VB: DevDescr
    nameWithType:
      CSharp: DevDescr
      VB: DevDescr
    qualifiedName:
      CSharp: TMSrv.DevDescr
      VB: TMSrv.DevDescr
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: DevDescr
      path: ../TM/TMDataServer.cs
      startLine: 227
    summary: "\nClass DevDescr.\n"
    example: []
    syntax:
      content:
        CSharp: public class DevDescr
        VB: Public Class DevDescr
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMSrv.DevDescr.configured
      commentId: F:TMSrv.DevDescr.configured
      language: CSharp
      name:
        CSharp: configured
        VB: configured
      nameWithType:
        CSharp: DevDescr.configured
        VB: DevDescr.configured
      qualifiedName:
        CSharp: TMSrv.DevDescr.configured
        VB: TMSrv.DevDescr.configured
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: configured
        path: ../TM/TMDataServer.cs
        startLine: 235
      summary: "\nустройство отконфигурировано, можно делать запросы\n"
      example: []
      syntax:
        content:
          CSharp: public int configured
          VB: Public configured As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DevDescr.dev_type
      commentId: F:TMSrv.DevDescr.dev_type
      language: CSharp
      name:
        CSharp: dev_type
        VB: dev_type
      nameWithType:
        CSharp: DevDescr.dev_type
        VB: DevDescr.dev_type
      qualifiedName:
        CSharp: TMSrv.DevDescr.dev_type
        VB: TMSrv.DevDescr.dev_type
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: dev_type
        path: ../TM/TMDataServer.cs
        startLine: 244
      summary: "\nтип устройства  (DEVICE_TYPE_DIMS etc)\n"
      example: []
      syntax:
        content:
          CSharp: public int dev_type
          VB: Public dev_type As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DevDescr.DN
      commentId: F:TMSrv.DevDescr.DN
      language: CSharp
      name:
        CSharp: DN
        VB: DN
      nameWithType:
        CSharp: DevDescr.DN
        VB: DevDescr.DN
      qualifiedName:
        CSharp: TMSrv.DevDescr.DN
        VB: TMSrv.DevDescr.DN
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DN
        path: ../TM/TMDataServer.cs
        startLine: 250
      summary: "\nиндивидуальный адрес устройства\n"
      example: []
      syntax:
        content:
          CSharp: public uint DN
          VB: Public DN As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DevDescr.err_InWait
      commentId: F:TMSrv.DevDescr.err_InWait
      language: CSharp
      name:
        CSharp: err_InWait
        VB: err_InWait
      nameWithType:
        CSharp: DevDescr.err_InWait
        VB: DevDescr.err_InWait
      qualifiedName:
        CSharp: TMSrv.DevDescr.err_InWait
        VB: TMSrv.DevDescr.err_InWait
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: err_InWait
        path: ../TM/TMDataServer.cs
        startLine: 256
      summary: "\nThe error in wait\n"
      example: []
      syntax:
        content:
          CSharp: public byte err_InWait
          VB: Public err_InWait As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DevDescr.status
      commentId: F:TMSrv.DevDescr.status
      language: CSharp
      name:
        CSharp: status
        VB: status
      nameWithType:
        CSharp: DevDescr.status
        VB: DevDescr.status
      qualifiedName:
        CSharp: TMSrv.DevDescr.status
        VB: TMSrv.DevDescr.status
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: status
        path: ../TM/TMDataServer.cs
        startLine: 268
      summary: "\nстатус устройства (согласно TM протоколу) ( DEVICE_STATUS_OK	etc )\n"
      example: []
      syntax:
        content:
          CSharp: public int status
          VB: Public status As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DevDescr.StatusControl
      commentId: F:TMSrv.DevDescr.StatusControl
      language: CSharp
      name:
        CSharp: StatusControl
        VB: StatusControl
      nameWithType:
        CSharp: DevDescr.StatusControl
        VB: DevDescr.StatusControl
      qualifiedName:
        CSharp: TMSrv.DevDescr.StatusControl
        VB: TMSrv.DevDescr.StatusControl
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StatusControl
        path: ../TM/TMDataServer.cs
        startLine: 274
      summary: "\nконтрол статуса; черный-неотконф., красный-поломка, зеленый-ОК\n"
      example: []
      syntax:
        content:
          CSharp: public int StatusControl
          VB: Public StatusControl As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.DevDescr.name
      commentId: F:TMSrv.DevDescr.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: DevDescr.name
        VB: DevDescr.name
      qualifiedName:
        CSharp: TMSrv.DevDescr.name
        VB: TMSrv.DevDescr.name
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: name
        path: ../TM/TMDataServer.cs
        startLine: 280
      summary: "\nназвание устройства для вывода сообщений в консоль\n"
      example: []
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: TMSrv.TmLnk
    commentId: T:TMSrv.TmLnk
    language: CSharp
    name:
      CSharp: TmLnk
      VB: TmLnk
    nameWithType:
      CSharp: TmLnk
      VB: TmLnk
    qualifiedName:
      CSharp: TMSrv.TmLnk
      VB: TMSrv.TmLnk
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: TmLnk
      path: ../TM/TMDataServer.cs
      startLine: 286
    syntax:
      content:
        CSharp: public class TmLnk
        VB: Public Class TmLnk
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMSrv.TmLnk.sid
      commentId: P:TMSrv.TmLnk.sid
      language: CSharp
      name:
        CSharp: sid
        VB: sid
      nameWithType:
        CSharp: TmLnk.sid
        VB: TmLnk.sid
      qualifiedName:
        CSharp: TMSrv.TmLnk.sid
        VB: TMSrv.TmLnk.sid
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: sid
        path: ../TM/TMDataServer.cs
        startLine: 289
      syntax:
        content:
          CSharp: public int sid { get; set; }
          VB: Public Property sid As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TmLnk.sid*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TmLnk.RQ
      commentId: P:TMSrv.TmLnk.RQ
      language: CSharp
      name:
        CSharp: RQ
        VB: RQ
      nameWithType:
        CSharp: TmLnk.RQ
        VB: TmLnk.RQ
      qualifiedName:
        CSharp: TMSrv.TmLnk.RQ
        VB: TMSrv.TmLnk.RQ
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RQ
        path: ../TM/TMDataServer.cs
        startLine: 296
      syntax:
        content:
          CSharp: public ushort RQ { get; set; }
          VB: Public Property RQ As UShort
        parameters: []
        return:
          type: System.UInt16
      overload: TMSrv.TmLnk.RQ*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TmLnk.asknum
      commentId: P:TMSrv.TmLnk.asknum
      language: CSharp
      name:
        CSharp: asknum
        VB: asknum
      nameWithType:
        CSharp: TmLnk.asknum
        VB: TmLnk.asknum
      qualifiedName:
        CSharp: TMSrv.TmLnk.asknum
        VB: TMSrv.TmLnk.asknum
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: asknum
        path: ../TM/TMDataServer.cs
        startLine: 304
      syntax:
        content:
          CSharp: public int asknum { get; set; }
          VB: Public Property asknum As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TmLnk.asknum*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: TMSrv.ComData
    commentId: T:TMSrv.ComData
    language: CSharp
    name:
      CSharp: ComData
      VB: ComData
    nameWithType:
      CSharp: ComData
      VB: ComData
    qualifiedName:
      CSharp: TMSrv.ComData
      VB: TMSrv.ComData
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ComData
      path: ../TM/TMDataServer.cs
      startLine: 314
    summary: "\nClass ComData.\n"
    example: []
    syntax:
      content:
        CSharp: public class ComData
        VB: Public Class ComData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMSrv.ComData.config_flag
      commentId: P:TMSrv.ComData.config_flag
      language: CSharp
      name:
        CSharp: config_flag
        VB: config_flag
      nameWithType:
        CSharp: ComData.config_flag
        VB: ComData.config_flag
      qualifiedName:
        CSharp: TMSrv.ComData.config_flag
        VB: TMSrv.ComData.config_flag
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: config_flag
        path: ../TM/TMDataServer.cs
        startLine: 319
      summary: "\nнастройки сконфигурированы под реальный порт, можно работать\n"
      example: []
      syntax:
        content:
          CSharp: public int config_flag { get; set; }
          VB: Public Property config_flag As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.config_flag*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.comport
      commentId: P:TMSrv.ComData.comport
      language: CSharp
      name:
        CSharp: comport
        VB: comport
      nameWithType:
        CSharp: ComData.comport
        VB: ComData.comport
      qualifiedName:
        CSharp: TMSrv.ComData.comport
        VB: TMSrv.ComData.comport
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: comport
        path: ../TM/TMDataServer.cs
        startLine: 329
      summary: "\nномер COM порта  \n"
      example: []
      syntax:
        content:
          CSharp: public int comport { get; set; }
          VB: Public Property comport As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.comport*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.baudrate
      commentId: P:TMSrv.ComData.baudrate
      language: CSharp
      name:
        CSharp: baudrate
        VB: baudrate
      nameWithType:
        CSharp: ComData.baudrate
        VB: ComData.baudrate
      qualifiedName:
        CSharp: TMSrv.ComData.baudrate
        VB: TMSrv.ComData.baudrate
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: baudrate
        path: ../TM/TMDataServer.cs
        startLine: 339
      summary: "\nCOM port baud rate\n"
      example: []
      syntax:
        content:
          CSharp: public int baudrate { get; set; }
          VB: Public Property baudrate As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.baudrate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.parity
      commentId: P:TMSrv.ComData.parity
      language: CSharp
      name:
        CSharp: parity
        VB: parity
      nameWithType:
        CSharp: ComData.parity
        VB: ComData.parity
      qualifiedName:
        CSharp: TMSrv.ComData.parity
        VB: TMSrv.ComData.parity
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: parity
        path: ../TM/TMDataServer.cs
        startLine: 349
      summary: "\nThe COM port parity\n"
      example: []
      syntax:
        content:
          CSharp: public int parity { get; set; }
          VB: Public Property parity As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.parity*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.databits
      commentId: P:TMSrv.ComData.databits
      language: CSharp
      name:
        CSharp: databits
        VB: databits
      nameWithType:
        CSharp: ComData.databits
        VB: ComData.databits
      qualifiedName:
        CSharp: TMSrv.ComData.databits
        VB: TMSrv.ComData.databits
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: databits
        path: ../TM/TMDataServer.cs
        startLine: 359
      summary: "\nThe COM port data bits\n"
      example: []
      syntax:
        content:
          CSharp: public int databits { get; set; }
          VB: Public Property databits As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.databits*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.stopbits
      commentId: P:TMSrv.ComData.stopbits
      language: CSharp
      name:
        CSharp: stopbits
        VB: stopbits
      nameWithType:
        CSharp: ComData.stopbits
        VB: ComData.stopbits
      qualifiedName:
        CSharp: TMSrv.ComData.stopbits
        VB: TMSrv.ComData.stopbits
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: stopbits
        path: ../TM/TMDataServer.cs
        startLine: 369
      summary: "\nThe COM port stop bits\n"
      example: []
      syntax:
        content:
          CSharp: public int stopbits { get; set; }
          VB: Public Property stopbits As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.stopbits*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.inputq
      commentId: P:TMSrv.ComData.inputq
      language: CSharp
      name:
        CSharp: inputq
        VB: inputq
      nameWithType:
        CSharp: ComData.inputq
        VB: ComData.inputq
      qualifiedName:
        CSharp: TMSrv.ComData.inputq
        VB: TMSrv.ComData.inputq
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: inputq
        path: ../TM/TMDataServer.cs
        startLine: 379
      summary: "\nSets input queue length in OpenComConfig \n"
      example: []
      syntax:
        content:
          CSharp: public int inputq { get; set; }
          VB: Public Property inputq As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.inputq*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.outputq
      commentId: P:TMSrv.ComData.outputq
      language: CSharp
      name:
        CSharp: outputq
        VB: outputq
      nameWithType:
        CSharp: ComData.outputq
        VB: ComData.outputq
      qualifiedName:
        CSharp: TMSrv.ComData.outputq
        VB: TMSrv.ComData.outputq
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: outputq
        path: ../TM/TMDataServer.cs
        startLine: 388
      summary: "\nSets output queue length in OpenComConfig\n"
      example: []
      syntax:
        content:
          CSharp: public int outputq { get; set; }
          VB: Public Property outputq As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.outputq*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.PortOpen
      commentId: P:TMSrv.ComData.PortOpen
      language: CSharp
      name:
        CSharp: PortOpen
        VB: PortOpen
      nameWithType:
        CSharp: ComData.PortOpen
        VB: ComData.PortOpen
      qualifiedName:
        CSharp: TMSrv.ComData.PortOpen
        VB: TMSrv.ComData.PortOpen
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PortOpen
        path: ../TM/TMDataServer.cs
        startLine: 397
      summary: "\nThe port open\n"
      example: []
      syntax:
        content:
          CSharp: public int PortOpen { get; set; }
          VB: Public Property PortOpen As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.PortOpen*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.RS232Error
      commentId: P:TMSrv.ComData.RS232Error
      language: CSharp
      name:
        CSharp: RS232Error
        VB: RS232Error
      nameWithType:
        CSharp: ComData.RS232Error
        VB: ComData.RS232Error
      qualifiedName:
        CSharp: TMSrv.ComData.RS232Error
        VB: TMSrv.ComData.RS232Error
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RS232Error
        path: ../TM/TMDataServer.cs
        startLine: 406
      summary: "\nThe RS232 error\n"
      example: []
      syntax:
        content:
          CSharp: public int RS232Error { get; set; }
          VB: Public Property RS232Error As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.RS232Error*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.timeout
      commentId: P:TMSrv.ComData.timeout
      language: CSharp
      name:
        CSharp: timeout
        VB: timeout
      nameWithType:
        CSharp: ComData.timeout
        VB: ComData.timeout
      qualifiedName:
        CSharp: TMSrv.ComData.timeout
        VB: TMSrv.ComData.timeout
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: timeout
        path: ../TM/TMDataServer.cs
        startLine: 415
      summary: "\nThe timeout\n"
      example: []
      syntax:
        content:
          CSharp: public double timeout { get; set; }
          VB: Public Property timeout As Double
        parameters: []
        return:
          type: System.Double
      overload: TMSrv.ComData.timeout*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.devicename
      commentId: P:TMSrv.ComData.devicename
      language: CSharp
      name:
        CSharp: devicename
        VB: devicename
      nameWithType:
        CSharp: ComData.devicename
        VB: ComData.devicename
      qualifiedName:
        CSharp: TMSrv.ComData.devicename
        VB: TMSrv.ComData.devicename
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: devicename
        path: ../TM/TMDataServer.cs
        startLine: 424
      summary: "\nThe device name\n"
      example: []
      syntax:
        content:
          CSharp: public string devicename { get; set; }
          VB: Public Property devicename As String
        parameters: []
        return:
          type: System.String
      overload: TMSrv.ComData.devicename*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.PortBusyFlag
      commentId: P:TMSrv.ComData.PortBusyFlag
      language: CSharp
      name:
        CSharp: PortBusyFlag
        VB: PortBusyFlag
      nameWithType:
        CSharp: ComData.PortBusyFlag
        VB: ComData.PortBusyFlag
      qualifiedName:
        CSharp: TMSrv.ComData.PortBusyFlag
        VB: TMSrv.ComData.PortBusyFlag
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PortBusyFlag
        path: ../TM/TMDataServer.cs
        startLine: 430
      syntax:
        content:
          CSharp: public int PortBusyFlag { get; set; }
          VB: Public Property PortBusyFlag As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.ComData.PortBusyFlag*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.ComData.#ctor
      commentId: M:TMSrv.ComData.#ctor
      language: CSharp
      name:
        CSharp: ComData()
        VB: ComData()
      nameWithType:
        CSharp: ComData.ComData()
        VB: ComData.ComData()
      qualifiedName:
        CSharp: TMSrv.ComData.ComData()
        VB: TMSrv.ComData.ComData()
      type: Constructor
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMDataServer.cs
        startLine: 439
      summary: "\nInitializes a new instance of the <xref href=\"TMSrv.ComData\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public ComData()
          VB: Public Sub New
      overload: TMSrv.ComData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TMSrv.ComData: 
  - id: TMSrv.TMDataServer
    commentId: T:TMSrv.TMDataServer
    language: CSharp
    name:
      CSharp: TMDataServer
      VB: TMDataServer
    nameWithType:
      CSharp: TMDataServer
      VB: TMDataServer
    qualifiedName:
      CSharp: TMSrv.TMDataServer
      VB: TMSrv.TMDataServer
    type: Class
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServers.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: TMDataServer
      path: ../TM/TMDataServers.cs
      startLine: 21
    summary: "\nуниверсальный сервер - источник данных для подключения к разным источникам данных:\nTCP серверам по протоколу TM, устройствам через линклиб или com порт\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TMDataServer : IDisposable'
        VB: >-
          Public Class TMDataServer

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMSrv.TMDataServer.DataServers
      commentId: F:TMSrv.TMDataServer.DataServers
      language: CSharp
      name:
        CSharp: DataServers
        VB: DataServers
      nameWithType:
        CSharp: TMDataServer.DataServers
        VB: TMDataServer.DataServers
      qualifiedName:
        CSharp: TMSrv.TMDataServer.DataServers
        VB: TMSrv.TMDataServer.DataServers
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DataServers
        path: ../TM/TMDataServer.cs
        startLine: 450
      syntax:
        content:
          CSharp: public static List<TMDataServer> DataServers
          VB: Public Shared DataServers As List(Of TMDataServer)
        return:
          type: System.Collections.Generic.List{TMSrv.TMDataServer}
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.TMDataServer.DACADC_MAX_DAC
      commentId: F:TMSrv.TMDataServer.DACADC_MAX_DAC
      language: CSharp
      name:
        CSharp: DACADC_MAX_DAC
        VB: DACADC_MAX_DAC
      nameWithType:
        CSharp: TMDataServer.DACADC_MAX_DAC
        VB: TMDataServer.DACADC_MAX_DAC
      qualifiedName:
        CSharp: TMSrv.TMDataServer.DACADC_MAX_DAC
        VB: TMSrv.TMDataServer.DACADC_MAX_DAC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DACADC_MAX_DAC
        path: ../TM/TMDataServer.cs
        startLine: 455
      summary: "\nмаксимальное количество каналов в сервере\n"
      example: []
      syntax:
        content:
          CSharp: public static byte DACADC_MAX_DAC
          VB: Public Shared DACADC_MAX_DAC As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.TMDataServer.DACADC_MAX_ADC
      commentId: F:TMSrv.TMDataServer.DACADC_MAX_ADC
      language: CSharp
      name:
        CSharp: DACADC_MAX_ADC
        VB: DACADC_MAX_ADC
      nameWithType:
        CSharp: TMDataServer.DACADC_MAX_ADC
        VB: TMDataServer.DACADC_MAX_ADC
      qualifiedName:
        CSharp: TMSrv.TMDataServer.DACADC_MAX_ADC
        VB: TMSrv.TMDataServer.DACADC_MAX_ADC
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DACADC_MAX_ADC
        path: ../TM/TMDataServer.cs
        startLine: 460
      summary: "\nмаксимальное количество каналов в сервере\n"
      example: []
      syntax:
        content:
          CSharp: public static byte DACADC_MAX_ADC
          VB: Public Shared DACADC_MAX_ADC As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.TMDataServer.handle
      commentId: P:TMSrv.TMDataServer.handle
      language: CSharp
      name:
        CSharp: handle
        VB: handle
      nameWithType:
        CSharp: TMDataServer.handle
        VB: TMDataServer.handle
      qualifiedName:
        CSharp: TMSrv.TMDataServer.handle
        VB: TMSrv.TMDataServer.handle
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: handle
        path: ../TM/TMDataServer.cs
        startLine: 468
      summary: "\nназвание устройства для вывода сообщений в консоль\nдля коммуникации. -1 если не используется сейчас, 0+ если канал действует.\n"
      example: []
      syntax:
        content:
          CSharp: public int handle { get; set; }
          VB: Public Property handle As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.handle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.ip
      commentId: P:TMSrv.TMDataServer.ip
      language: CSharp
      name:
        CSharp: ip
        VB: ip
      nameWithType:
        CSharp: TMDataServer.ip
        VB: TMDataServer.ip
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ip
        VB: TMSrv.TMDataServer.ip
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ip
        path: ../TM/TMDataServer.cs
        startLine: 478
      summary: "\nIP (= &quot;127.0.0.1&quot;)\n"
      example: []
      syntax:
        content:
          CSharp: public string ip { get; set; }
          VB: Public Property ip As String
        parameters: []
        return:
          type: System.String
      overload: TMSrv.TMDataServer.ip*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.port
      commentId: P:TMSrv.TMDataServer.port
      language: CSharp
      name:
        CSharp: port
        VB: port
      nameWithType:
        CSharp: TMDataServer.port
        VB: TMDataServer.port
      qualifiedName:
        CSharp: TMSrv.TMDataServer.port
        VB: TMSrv.TMDataServer.port
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: port
        path: ../TM/TMDataServer.cs
        startLine: 488
      summary: "\nПорт (= 9995)\n"
      example: []
      syntax:
        content:
          CSharp: public int port { get; set; }
          VB: Public Property port As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.port*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.ConnectType
      commentId: P:TMSrv.TMDataServer.ConnectType
      language: CSharp
      name:
        CSharp: ConnectType
        VB: ConnectType
      nameWithType:
        CSharp: TMDataServer.ConnectType
        VB: TMDataServer.ConnectType
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ConnectType
        VB: TMSrv.TMDataServer.ConnectType
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ConnectType
        path: ../TM/TMDataServer.cs
        startLine: 499
      summary: "\nтип подключения: linklib, TMProtocol или\nлокальное  SERVER_ConnectType_TMPROTOCOL\n"
      example: []
      syntax:
        content:
          CSharp: public EServerConnectType ConnectType { get; set; }
          VB: Public Property ConnectType As EServerConnectType
        parameters: []
        return:
          type: TM.EServerConnectType
      overload: TMSrv.TMDataServer.ConnectType*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.ConnectAvailable
      commentId: P:TMSrv.TMDataServer.ConnectAvailable
      language: CSharp
      name:
        CSharp: ConnectAvailable
        VB: ConnectAvailable
      nameWithType:
        CSharp: TMDataServer.ConnectAvailable
        VB: TMDataServer.ConnectAvailable
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ConnectAvailable
        VB: TMSrv.TMDataServer.ConnectAvailable
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ConnectAvailable
        path: ../TM/TMDataServer.cs
        startLine: 510
      summary: "\nвозможные (реализованные) способы подключения,\nнапр. SERVER_CONNESERVER_ConnectType_DIRECT\n"
      example: []
      syntax:
        content:
          CSharp: public EServerConnectType ConnectAvailable { get; set; }
          VB: Public Property ConnectAvailable As EServerConnectType
        parameters: []
        return:
          type: TM.EServerConnectType
      overload: TMSrv.TMDataServer.ConnectAvailable*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.type
      commentId: P:TMSrv.TMDataServer.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: TMDataServer.type
        VB: TMDataServer.type
      qualifiedName:
        CSharp: TMSrv.TMDataServer.type
        VB: TMSrv.TMDataServer.type
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: type
        path: ../TM/TMDataServer.cs
        startLine: 520
      summary: "\nтип сервера 0-неизвестный, SERVER_TYPE_TEMPERATURE и т.д\n"
      example: []
      syntax:
        content:
          CSharp: public EServerType type { get; set; }
          VB: Public Property type As EServerType
        parameters: []
        return:
          type: TM.EServerType
      overload: TMSrv.TMDataServer.type*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.name
      commentId: P:TMSrv.TMDataServer.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: TMDataServer.name
        VB: TMDataServer.name
      qualifiedName:
        CSharp: TMSrv.TMDataServer.name
        VB: TMSrv.TMDataServer.name
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: name
        path: ../TM/TMDataServer.cs
        startLine: 530
      summary: "\nимя сервера\n"
      example: []
      syntax:
        content:
          CSharp: public string name { get; set; }
          VB: Public Property name As String
        parameters: []
        return:
          type: System.String
      overload: TMSrv.TMDataServer.name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.OnProcessing
      commentId: P:TMSrv.TMDataServer.OnProcessing
      language: CSharp
      name:
        CSharp: OnProcessing
        VB: OnProcessing
      nameWithType:
        CSharp: TMDataServer.OnProcessing
        VB: TMDataServer.OnProcessing
      qualifiedName:
        CSharp: TMSrv.TMDataServer.OnProcessing
        VB: TMSrv.TMDataServer.OnProcessing
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OnProcessing
        path: ../TM/TMDataServer.cs
        startLine: 540
      summary: "\nфлаг - сервер находится в процессе, удаление требует ожидания\n"
      example: []
      syntax:
        content:
          CSharp: public int OnProcessing { get; set; }
          VB: Public Property OnProcessing As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.OnProcessing*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.COM
      commentId: P:TMSrv.TMDataServer.COM
      language: CSharp
      name:
        CSharp: COM
        VB: COM
      nameWithType:
        CSharp: TMDataServer.COM
        VB: TMDataServer.COM
      qualifiedName:
        CSharp: TMSrv.TMDataServer.COM
        VB: TMSrv.TMDataServer.COM
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: COM
        path: ../TM/TMDataServer.cs
        startLine: 547
      syntax:
        content:
          CSharp: public ComData COM { get; set; }
          VB: Public Property COM As ComData
        parameters: []
        return:
          type: TMSrv.ComData
      overload: TMSrv.TMDataServer.COM*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.lnk
      commentId: P:TMSrv.TMDataServer.lnk
      language: CSharp
      name:
        CSharp: lnk
        VB: lnk
      nameWithType:
        CSharp: TMDataServer.lnk
        VB: TMDataServer.lnk
      qualifiedName:
        CSharp: TMSrv.TMDataServer.lnk
        VB: TMSrv.TMDataServer.lnk
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: lnk
        path: ../TM/TMDataServer.cs
        startLine: 553
      syntax:
        content:
          CSharp: public TmLnk lnk { get; set; }
          VB: Public Property lnk As TmLnk
        parameters: []
        return:
          type: TMSrv.TmLnk
      overload: TMSrv.TMDataServer.lnk*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.ControlID
      commentId: P:TMSrv.TMDataServer.ControlID
      language: CSharp
      name:
        CSharp: ControlID
        VB: ControlID
      nameWithType:
        CSharp: TMDataServer.ControlID
        VB: TMDataServer.ControlID
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ControlID
        VB: TMSrv.TMDataServer.ControlID
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ControlID
        path: ../TM/TMDataServer.cs
        startLine: 562
      summary: "\nid контрола, отображающего коннект к серверу\n"
      example: []
      syntax:
        content:
          CSharp: public int ControlID { get; set; }
          VB: Public Property ControlID As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.ControlID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.ControlRight
      commentId: P:TMSrv.TMDataServer.ControlRight
      language: CSharp
      name:
        CSharp: ControlRight
        VB: ControlRight
      nameWithType:
        CSharp: TMDataServer.ControlRight
        VB: TMDataServer.ControlRight
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ControlRight
        VB: TMSrv.TMDataServer.ControlRight
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ControlRight
        path: ../TM/TMDataServer.cs
        startLine: 572
      summary: "\nправая граница контрола, для выстраивания цепочки\n"
      example: []
      syntax:
        content:
          CSharp: public int ControlRight { get; set; }
          VB: Public Property ControlRight As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.ControlRight*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.Controls
      commentId: F:TMSrv.TMDataServer.Controls
      language: CSharp
      name:
        CSharp: Controls
        VB: Controls
      nameWithType:
        CSharp: TMDataServer.Controls
        VB: TMDataServer.Controls
      qualifiedName:
        CSharp: TMSrv.TMDataServer.Controls
        VB: TMSrv.TMDataServer.Controls
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Controls
        path: ../TM/TMDataServer.cs
        startLine: 583
      summary: "\nинтерфейсные контролы\n"
      example: []
      syntax:
        content:
          CSharp: public List<VCControl> Controls
          VB: Public Controls As List(Of VCControl)
        return:
          type: System.Collections.Generic.List{TMSrv.VCControl}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.ControlsCount
      commentId: P:TMSrv.TMDataServer.ControlsCount
      language: CSharp
      name:
        CSharp: ControlsCount
        VB: ControlsCount
      nameWithType:
        CSharp: TMDataServer.ControlsCount
        VB: TMDataServer.ControlsCount
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ControlsCount
        VB: TMSrv.TMDataServer.ControlsCount
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ControlsCount
        path: ../TM/TMDataServer.cs
        startLine: 588
      summary: "\nколичество интерфейсных контролов\n"
      example: []
      syntax:
        content:
          CSharp: public int ControlsCount { get; set; }
          VB: Public Property ControlsCount As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.ControlsCount*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.DevStatus
      commentId: P:TMSrv.TMDataServer.DevStatus
      language: CSharp
      name:
        CSharp: DevStatus
        VB: DevStatus
      nameWithType:
        CSharp: TMDataServer.DevStatus
        VB: TMDataServer.DevStatus
      qualifiedName:
        CSharp: TMSrv.TMDataServer.DevStatus
        VB: TMSrv.TMDataServer.DevStatus
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DevStatus
        path: ../TM/TMDataServer.cs
        startLine: 598
      summary: "\nстатус устройства - напр. DEVICE_STATUS_OK\n"
      example: []
      syntax:
        content:
          CSharp: public EDeviceStatus DevStatus { get; set; }
          VB: Public Property DevStatus As EDeviceStatus
        parameters: []
        return:
          type: TM.EDeviceStatus
      overload: TMSrv.TMDataServer.DevStatus*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.InWait
      commentId: P:TMSrv.TMDataServer.InWait
      language: CSharp
      name:
        CSharp: InWait
        VB: InWait
      nameWithType:
        CSharp: TMDataServer.InWait
        VB: TMDataServer.InWait
      qualifiedName:
        CSharp: TMSrv.TMDataServer.InWait
        VB: TMSrv.TMDataServer.InWait
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: InWait
        path: ../TM/TMDataServer.cs
        startLine: 634
      summary: "\nсервер в режиме ожидания ответа от железа\n"
      example: []
      syntax:
        content:
          CSharp: public byte InWait { get; set; }
          VB: Public Property InWait As Byte
        parameters: []
        return:
          type: System.Byte
      overload: TMSrv.TMDataServer.InWait*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.LogPath
      commentId: P:TMSrv.TMDataServer.LogPath
      language: CSharp
      name:
        CSharp: LogPath
        VB: LogPath
      nameWithType:
        CSharp: TMDataServer.LogPath
        VB: TMDataServer.LogPath
      qualifiedName:
        CSharp: TMSrv.TMDataServer.LogPath
        VB: TMSrv.TMDataServer.LogPath
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LogPath
        path: ../TM/TMDataServer.cs
        startLine: 644
      summary: "\nThe log path\n"
      example: []
      syntax:
        content:
          CSharp: public string LogPath { get; set; }
          VB: Public Property LogPath As String
        parameters: []
        return:
          type: System.String
      overload: TMSrv.TMDataServer.LogPath*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.NeedAutoReconnect
      commentId: P:TMSrv.TMDataServer.NeedAutoReconnect
      language: CSharp
      name:
        CSharp: NeedAutoReconnect
        VB: NeedAutoReconnect
      nameWithType:
        CSharp: TMDataServer.NeedAutoReconnect
        VB: TMDataServer.NeedAutoReconnect
      qualifiedName:
        CSharp: TMSrv.TMDataServer.NeedAutoReconnect
        VB: TMSrv.TMDataServer.NeedAutoReconnect
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NeedAutoReconnect
        path: ../TM/TMDataServer.cs
        startLine: 654
      summary: "\nавтоматическое подключение\n"
      example: []
      syntax:
        content:
          CSharp: public int NeedAutoReconnect { get; set; }
          VB: Public Property NeedAutoReconnect As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.NeedAutoReconnect*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.NeedForReconnect
      commentId: P:TMSrv.TMDataServer.NeedForReconnect
      language: CSharp
      name:
        CSharp: NeedForReconnect
        VB: NeedForReconnect
      nameWithType:
        CSharp: TMDataServer.NeedForReconnect
        VB: TMDataServer.NeedForReconnect
      qualifiedName:
        CSharp: TMSrv.TMDataServer.NeedForReconnect
        VB: TMSrv.TMDataServer.NeedForReconnect
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NeedForReconnect
        path: ../TM/TMDataServer.cs
        startLine: 664
      summary: "\nнеобходимость восстановления соединения в текущем сеансе\n"
      example: []
      syntax:
        content:
          CSharp: public int NeedForReconnect { get; set; }
          VB: Public Property NeedForReconnect As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.NeedForReconnect*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.buf
      commentId: P:TMSrv.TMDataServer.buf
      language: CSharp
      name:
        CSharp: buf
        VB: buf
      nameWithType:
        CSharp: TMDataServer.buf
        VB: TMDataServer.buf
      qualifiedName:
        CSharp: TMSrv.TMDataServer.buf
        VB: TMSrv.TMDataServer.buf
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: buf
        path: ../TM/TMDataServer.cs
        startLine: 674
      summary: "\nстроковый буфер для временного хранения сообщений\n"
      example: []
      syntax:
        content:
          CSharp: public string buf { get; set; }
          VB: Public Property buf As String
        parameters: []
        return:
          type: System.String
      overload: TMSrv.TMDataServer.buf*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.timeout
      commentId: P:TMSrv.TMDataServer.timeout
      language: CSharp
      name:
        CSharp: timeout
        VB: timeout
      nameWithType:
        CSharp: TMDataServer.timeout
        VB: TMDataServer.timeout
      qualifiedName:
        CSharp: TMSrv.TMDataServer.timeout
        VB: TMSrv.TMDataServer.timeout
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: timeout
        path: ../TM/TMDataServer.cs
        startLine: 684
      summary: "\nтаймаут ожидания ответа от железа (задействован в термоконтроле), секунды\n"
      example: []
      syntax:
        content:
          CSharp: public float timeout { get; set; }
          VB: Public Property timeout As Single
        parameters: []
        return:
          type: System.Single
      overload: TMSrv.TMDataServer.timeout*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.TimerTicks
      commentId: P:TMSrv.TMDataServer.TimerTicks
      language: CSharp
      name:
        CSharp: TimerTicks
        VB: TimerTicks
      nameWithType:
        CSharp: TMDataServer.TimerTicks
        VB: TMDataServer.TimerTicks
      qualifiedName:
        CSharp: TMSrv.TMDataServer.TimerTicks
        VB: TMSrv.TMDataServer.TimerTicks
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TimerTicks
        path: ../TM/TMDataServer.cs
        startLine: 694
      summary: "\nCчетчик тиков. Сбрасывается при пришедших от сервера данных\n"
      example: []
      syntax:
        content:
          CSharp: public int TimerTicks { get; set; }
          VB: Public Property TimerTicks As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.TimerTicks*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.TMSettings
      commentId: P:TMSrv.TMDataServer.TMSettings
      language: CSharp
      name:
        CSharp: TMSettings
        VB: TMSettings
      nameWithType:
        CSharp: TMDataServer.TMSettings
        VB: TMDataServer.TMSettings
      qualifiedName:
        CSharp: TMSrv.TMDataServer.TMSettings
        VB: TMSrv.TMDataServer.TMSettings
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMSettings
        path: ../TM/TMDataServer.cs
        startLine: 715
      summary: "\nбитовое поле, настройки протокола взаимодействия - TMSettings_ADDCHECKSUMM\n"
      example: []
      syntax:
        content:
          CSharp: public byte TMSettings { get; set; }
          VB: Public Property TMSettings As Byte
        parameters: []
        return:
          type: System.Byte
      overload: TMSrv.TMDataServer.TMSettings*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.traceToLog
      commentId: P:TMSrv.TMDataServer.traceToLog
      language: CSharp
      name:
        CSharp: traceToLog
        VB: traceToLog
      nameWithType:
        CSharp: TMDataServer.traceToLog
        VB: TMDataServer.traceToLog
      qualifiedName:
        CSharp: TMSrv.TMDataServer.traceToLog
        VB: TMSrv.TMDataServer.traceToLog
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: traceToLog
        path: ../TM/TMDataServer.cs
        startLine: 725
      summary: "\nфлаг - сохранять обмен пакетами с устройством в лог LogPath\n"
      example: []
      syntax:
        content:
          CSharp: public byte traceToLog { get; set; }
          VB: Public Property traceToLog As Byte
        parameters: []
        return:
          type: System.Byte
      overload: TMSrv.TMDataServer.traceToLog*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.update
      commentId: P:TMSrv.TMDataServer.update
      language: CSharp
      name:
        CSharp: update
        VB: update
      nameWithType:
        CSharp: TMDataServer.update
        VB: TMDataServer.update
      qualifiedName:
        CSharp: TMSrv.TMDataServer.update
        VB: TMSrv.TMDataServer.update
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: update
        path: ../TM/TMDataServer.cs
        startLine: 735
      summary: "\nсчетчик апдейтов\n"
      example: []
      syntax:
        content:
          CSharp: public byte update { get; set; }
          VB: Public Property update As Byte
        parameters: []
        return:
          type: System.Byte
      overload: TMSrv.TMDataServer.update*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.UpdatePeriod
      commentId: P:TMSrv.TMDataServer.UpdatePeriod
      language: CSharp
      name:
        CSharp: UpdatePeriod
        VB: UpdatePeriod
      nameWithType:
        CSharp: TMDataServer.UpdatePeriod
        VB: TMDataServer.UpdatePeriod
      qualifiedName:
        CSharp: TMSrv.TMDataServer.UpdatePeriod
        VB: TMSrv.TMDataServer.UpdatePeriod
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UpdatePeriod
        path: ../TM/TMDataServer.cs
        startLine: 745
      summary: "\nинтервал таймера в секундах\n"
      example: []
      syntax:
        content:
          CSharp: public float UpdatePeriod { get; set; }
          VB: Public Property UpdatePeriod As Single
        parameters: []
        return:
          type: System.Single
      overload: TMSrv.TMDataServer.UpdatePeriod*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.UpdateTimerID
      commentId: P:TMSrv.TMDataServer.UpdateTimerID
      language: CSharp
      name:
        CSharp: UpdateTimerID
        VB: UpdateTimerID
      nameWithType:
        CSharp: TMDataServer.UpdateTimerID
        VB: TMDataServer.UpdateTimerID
      qualifiedName:
        CSharp: TMSrv.TMDataServer.UpdateTimerID
        VB: TMSrv.TMDataServer.UpdateTimerID
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UpdateTimerID
        path: ../TM/TMDataServer.cs
        startLine: 756
      summary: "\nтаймер периодических опросов. заводится и стартует из StartUpdateTimer\n"
      example: []
      syntax:
        content:
          CSharp: public int UpdateTimerID { get; set; }
          VB: Public Property UpdateTimerID As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.UpdateTimerID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.configChanged
      commentId: P:TMSrv.TMDataServer.configChanged
      language: CSharp
      name:
        CSharp: configChanged
        VB: configChanged
      nameWithType:
        CSharp: TMDataServer.configChanged
        VB: TMDataServer.configChanged
      qualifiedName:
        CSharp: TMSrv.TMDataServer.configChanged
        VB: TMSrv.TMDataServer.configChanged
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: configChanged
        path: ../TM/TMDataServer.cs
        startLine: 766
      summary: "\nфлаг - изменилась аппаратная конфигурация - надо разослать инф. клиентам\n"
      example: []
      syntax:
        content:
          CSharp: public byte configChanged { get; set; }
          VB: Public Property configChanged As Byte
        parameters: []
        return:
          type: System.Byte
      overload: TMSrv.TMDataServer.configChanged*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMSrv.TMDataServer.DS_LangText
      commentId: F:TMSrv.TMDataServer.DS_LangText
      language: CSharp
      name:
        CSharp: DS_LangText
        VB: DS_LangText
      nameWithType:
        CSharp: TMDataServer.DS_LangText
        VB: TMDataServer.DS_LangText
      qualifiedName:
        CSharp: TMSrv.TMDataServer.DS_LangText
        VB: TMSrv.TMDataServer.DS_LangText
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DS_LangText
        path: ../TM/TMDataServer.cs
        startLine: 811
      summary: "\nошибки, выбираемые RS485_GetErrorMessage\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<int, string[]> DS_LangText
          VB: Public Shared DS_LangText As Dictionary(Of Integer, String())
        return:
          type: System.Collections.Generic.Dictionary{System.Int32,System.String[]}
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TMSrv.TMDataServer.AfterTryConnect
      commentId: E:TMSrv.TMDataServer.AfterTryConnect
      language: CSharp
      name:
        CSharp: AfterTryConnect
        VB: AfterTryConnect
      nameWithType:
        CSharp: TMDataServer.AfterTryConnect
        VB: TMDataServer.AfterTryConnect
      qualifiedName:
        CSharp: TMSrv.TMDataServer.AfterTryConnect
        VB: TMSrv.TMDataServer.AfterTryConnect
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: AfterTryConnect
        path: ../TM/TMDataServer.cs
        startLine: 871
      summary: "\nдополнительный обработчик после коннекта, вызывается в ConnectToServer\n"
      example: []
      syntax:
        content:
          CSharp: public event ConnectHandler AfterTryConnect
          VB: Public Event AfterTryConnect As ConnectHandler
        return:
          type: TMSrv.ConnectHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.AfterDisconnect
      commentId: E:TMSrv.TMDataServer.AfterDisconnect
      language: CSharp
      name:
        CSharp: AfterDisconnect
        VB: AfterDisconnect
      nameWithType:
        CSharp: TMDataServer.AfterDisconnect
        VB: TMDataServer.AfterDisconnect
      qualifiedName:
        CSharp: TMSrv.TMDataServer.AfterDisconnect
        VB: TMSrv.TMDataServer.AfterDisconnect
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: AfterDisconnect
        path: ../TM/TMDataServer.cs
        startLine: 876
      summary: "\nдополнительный обработчик после дисконнекта, вызывается в DisconnectFix \n"
      example: []
      syntax:
        content:
          CSharp: public event ConnectHandler AfterDisconnect
          VB: Public Event AfterDisconnect As ConnectHandler
        return:
          type: TMSrv.ConnectHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.Disconnect
      commentId: E:TMSrv.TMDataServer.Disconnect
      language: CSharp
      name:
        CSharp: Disconnect
        VB: Disconnect
      nameWithType:
        CSharp: TMDataServer.Disconnect
        VB: TMDataServer.Disconnect
      qualifiedName:
        CSharp: TMSrv.TMDataServer.Disconnect
        VB: TMSrv.TMDataServer.Disconnect
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Disconnect
        path: ../TM/TMDataServer.cs
        startLine: 881
      summary: "\nдополнительный обработчик после дисконнекта, вызывается в DisconnectFix \n"
      example: []
      syntax:
        content:
          CSharp: public event ConnectHandler Disconnect
          VB: Public Event Disconnect As ConnectHandler
        return:
          type: TMSrv.ConnectHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.Connect
      commentId: E:TMSrv.TMDataServer.Connect
      language: CSharp
      name:
        CSharp: Connect
        VB: Connect
      nameWithType:
        CSharp: TMDataServer.Connect
        VB: TMDataServer.Connect
      qualifiedName:
        CSharp: TMSrv.TMDataServer.Connect
        VB: TMSrv.TMDataServer.Connect
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Connect
        path: ../TM/TMDataServer.cs
        startLine: 887
      summary: "\nспециализированный коннект.\nЕсли задан он, то используется он в ConnectToServer\n"
      example: []
      syntax:
        content:
          CSharp: public event ConnectHandler Connect
          VB: Public Event Connect As ConnectHandler
        return:
          type: TMSrv.ConnectHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.ChangeDevicesStatus
      commentId: E:TMSrv.TMDataServer.ChangeDevicesStatus
      language: CSharp
      name:
        CSharp: ChangeDevicesStatus
        VB: ChangeDevicesStatus
      nameWithType:
        CSharp: TMDataServer.ChangeDevicesStatus
        VB: TMDataServer.ChangeDevicesStatus
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ChangeDevicesStatus
        VB: TMSrv.TMDataServer.ChangeDevicesStatus
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ChangeDevicesStatus
        path: ../TM/TMDataServer.cs
        startLine: 892
      summary: "\nпереопределенная функция\n"
      example: []
      syntax:
        content:
          CSharp: public event ServerHandler ChangeDevicesStatus
          VB: Public Event ChangeDevicesStatus As ServerHandler
        return:
          type: TMSrv.ServerHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.FreeServerData
      commentId: E:TMSrv.TMDataServer.FreeServerData
      language: CSharp
      name:
        CSharp: FreeServerData
        VB: FreeServerData
      nameWithType:
        CSharp: TMDataServer.FreeServerData
        VB: TMDataServer.FreeServerData
      qualifiedName:
        CSharp: TMSrv.TMDataServer.FreeServerData
        VB: TMSrv.TMDataServer.FreeServerData
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FreeServerData
        path: ../TM/TMDataServer.cs
        startLine: 897
      summary: "\nдоп. функция освобождения серверных данных.\n"
      example: []
      syntax:
        content:
          CSharp: public event ServerHandler FreeServerData
          VB: Public Event FreeServerData As ServerHandler
        return:
          type: TMSrv.ServerHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.ParseIncomingPacket
      commentId: E:TMSrv.TMDataServer.ParseIncomingPacket
      language: CSharp
      name:
        CSharp: ParseIncomingPacket
        VB: ParseIncomingPacket
      nameWithType:
        CSharp: TMDataServer.ParseIncomingPacket
        VB: TMDataServer.ParseIncomingPacket
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ParseIncomingPacket
        VB: TMSrv.TMDataServer.ParseIncomingPacket
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ParseIncomingPacket
        path: ../TM/TMDataServer.cs
        startLine: 902
      summary: "\nдополнительный обработчик входящего пакета для ParseIncommingPacketTM\n"
      example: []
      syntax:
        content:
          CSharp: public event IncomingPacketHandler ParseIncomingPacket
          VB: Public Event ParseIncomingPacket As IncomingPacketHandler
        return:
          type: TMSrv.IncomingPacketHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.PostParseData
      commentId: E:TMSrv.TMDataServer.PostParseData
      language: CSharp
      name:
        CSharp: PostParseData
        VB: PostParseData
      nameWithType:
        CSharp: TMDataServer.PostParseData
        VB: TMDataServer.PostParseData
      qualifiedName:
        CSharp: TMSrv.TMDataServer.PostParseData
        VB: TMSrv.TMDataServer.PostParseData
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PostParseData
        path: ../TM/TMDataServer.cs
        startLine: 912
      summary: "\nуказатель на функцию - дополнительный обработчик входящих команд.\nВызывается после обработки данных, например,\nдля доп.реакции по отображению данных использовать необязательно\nдля PFS - параметры cmd и cid из пришедшей команды\nдля остальных - тип пакета и вид данных вызывается из парсера\nTMCPFS_PostParseData, Kr_PostParseData\n"
      example: []
      syntax:
        content:
          CSharp: public event PostParseHandler PostParseData
          VB: Public Event PostParseData As PostParseHandler
        return:
          type: TMSrv.PostParseHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.MakeCommand
      commentId: E:TMSrv.TMDataServer.MakeCommand
      language: CSharp
      name:
        CSharp: MakeCommand
        VB: MakeCommand
      nameWithType:
        CSharp: TMDataServer.MakeCommand
        VB: TMDataServer.MakeCommand
      qualifiedName:
        CSharp: TMSrv.TMDataServer.MakeCommand
        VB: TMSrv.TMDataServer.MakeCommand
      type: Event
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MakeCommand
        path: ../TM/TMDataServer.cs
        startLine: 918
      summary: "\nвнешняя функция для формирования команды к устройству.\nНапр. PFS_MakeCommand Termo_MakeCommand XRAY_MakeCommand TermoL_MakeCommand ACC_MakeCommand\n"
      example: []
      syntax:
        content:
          CSharp: public event MakeCommandHandler MakeCommand
          VB: Public Event MakeCommand As MakeCommandHandler
        return:
          type: TMSrv.MakeCommandHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.Client
      commentId: F:TMSrv.TMDataServer.Client
      language: CSharp
      name:
        CSharp: Client
        VB: Client
      nameWithType:
        CSharp: TMDataServer.Client
        VB: TMDataServer.Client
      qualifiedName:
        CSharp: TMSrv.TMDataServer.Client
        VB: TMSrv.TMDataServer.Client
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Client
        path: ../TM/TMDataServer.cs
        startLine: 920
      syntax:
        content:
          CSharp: public TMClient Client
          VB: Public Client As TMClient
        return:
          type: TM.TMClient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.ServerData
      commentId: F:TMSrv.TMDataServer.ServerData
      language: CSharp
      name:
        CSharp: ServerData
        VB: ServerData
      nameWithType:
        CSharp: TMDataServer.ServerData
        VB: TMDataServer.ServerData
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ServerData
        VB: TMSrv.TMDataServer.ServerData
      type: Field
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerData
        path: ../TM/TMDataServer.cs
        startLine: 925
      summary: "\nуникальная начинка сервера в соответствии с типом\n"
      example: []
      syntax:
        content:
          CSharp: public object ServerData
          VB: Public ServerData As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.Dispose
      commentId: M:TMSrv.TMDataServer.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: TMDataServer.Dispose()
        VB: TMDataServer.Dispose()
      qualifiedName:
        CSharp: TMSrv.TMDataServer.Dispose()
        VB: TMSrv.TMDataServer.Dispose()
      type: Method
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Dispose
        path: ../TM/TMDataServer.cs
        startLine: 947
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: TMSrv.TMDataServer.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TMSrv.TMDataServer.Dispose(System.Boolean)
      commentId: M:TMSrv.TMDataServer.Dispose(System.Boolean)
      language: CSharp
      name:
        CSharp: Dispose(Boolean)
        VB: Dispose(Boolean)
      nameWithType:
        CSharp: TMDataServer.Dispose(Boolean)
        VB: TMDataServer.Dispose(Boolean)
      qualifiedName:
        CSharp: TMSrv.TMDataServer.Dispose(System.Boolean)
        VB: TMSrv.TMDataServer.Dispose(System.Boolean)
      type: Method
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Dispose
        path: ../TM/TMDataServer.cs
        startLine: 952
      syntax:
        content:
          CSharp: protected virtual void Dispose(bool disposing)
          VB: Protected Overridable Sub Dispose(disposing As Boolean)
        parameters:
        - id: disposing
          type: System.Boolean
      overload: TMSrv.TMDataServer.Dispose*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType)
      commentId: M:TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType)
      language: CSharp
      name:
        CSharp: AddServer(String, String, Int32, EServerType)
        VB: AddServer(String, String, Int32, EServerType)
      nameWithType:
        CSharp: TMDataServer.AddServer(String, String, Int32, EServerType)
        VB: TMDataServer.AddServer(String, String, Int32, EServerType)
      qualifiedName:
        CSharp: TMSrv.TMDataServer.AddServer(System.String, System.String, System.Int32, TM.EServerType)
        VB: TMSrv.TMDataServer.AddServer(System.String, System.String, System.Int32, TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServers.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: AddServer
        path: ../TM/TMDataServers.cs
        startLine: 37
      syntax:
        content:
          CSharp: public virtual int AddServer(string name, string ip, int port, EServerType type)
          VB: Public Overridable Function AddServer(name As String, ip As String, port As Integer, type As EServerType) As Integer
        parameters:
        - id: name
          type: System.String
        - id: ip
          type: System.String
        - id: port
          type: System.Int32
        - id: type
          type: TM.EServerType
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.AddServer*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
  - id: TMSrv.TMDataServer.ntm
    commentId: T:TMSrv.TMDataServer.ntm
    language: CSharp
    name:
      CSharp: TMDataServer.ntm
      VB: TMDataServer.ntm
    nameWithType:
      CSharp: TMDataServer.ntm
      VB: TMDataServer.ntm
    qualifiedName:
      CSharp: TMSrv.TMDataServer.ntm
      VB: TMSrv.TMDataServer.ntm
    type: Struct
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ntm
      path: ../TM/TMDataServer.cs
      startLine: 780
    summary: "\nдля пакетов, реализующих какой-то уникальный протокол\n"
    example: []
    syntax:
      content:
        CSharp: public struct ntm
        VB: Public Structure ntm
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TMSrv.TMDataServer.ntm.waitpacketsize
      commentId: P:TMSrv.TMDataServer.ntm.waitpacketsize
      language: CSharp
      name:
        CSharp: waitpacketsize
        VB: waitpacketsize
      nameWithType:
        CSharp: TMDataServer.ntm.waitpacketsize
        VB: TMDataServer.ntm.waitpacketsize
      qualifiedName:
        CSharp: TMSrv.TMDataServer.ntm.waitpacketsize
        VB: TMSrv.TMDataServer.ntm.waitpacketsize
      type: Property
      assemblies:
      - TM
      namespace: TMSrv
      source:
        remote:
          path: TM/TMDataServer.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: waitpacketsize
        path: ../TM/TMDataServer.cs
        startLine: 788
      summary: "\nтекущий ожидаемый размер пакета.\nЕсли 0, то вычитвается максимально возможное количество байт\n"
      example: []
      syntax:
        content:
          CSharp: public int waitpacketsize { get; set; }
          VB: Public Property waitpacketsize As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TMSrv.TMDataServer.ntm.waitpacketsize*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: TMSrv.ConnectHandler
    commentId: T:TMSrv.ConnectHandler
    language: CSharp
    name:
      CSharp: ConnectHandler
      VB: ConnectHandler
    nameWithType:
      CSharp: ConnectHandler
      VB: ConnectHandler
    qualifiedName:
      CSharp: TMSrv.ConnectHandler
      VB: TMSrv.ConnectHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ConnectHandler
      path: ../TM/TMDataServer.cs
      startLine: 960
    syntax:
      content:
        CSharp: public delegate void ConnectHandler(TMDataServer pds, int res);
        VB: Public Delegate Sub ConnectHandler(pds As TMDataServer, res As Integer)
      parameters:
      - id: pds
        type: TMSrv.TMDataServer
      - id: res
        type: System.Int32
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TMSrv.PostParseHandler
    commentId: T:TMSrv.PostParseHandler
    language: CSharp
    name:
      CSharp: PostParseHandler
      VB: PostParseHandler
    nameWithType:
      CSharp: PostParseHandler
      VB: PostParseHandler
    qualifiedName:
      CSharp: TMSrv.PostParseHandler
      VB: TMSrv.PostParseHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PostParseHandler
      path: ../TM/TMDataServer.cs
      startLine: 961
    syntax:
      content:
        CSharp: public delegate void PostParseHandler(int cmd, int cid);
        VB: Public Delegate Sub PostParseHandler(cmd As Integer, cid As Integer)
      parameters:
      - id: cmd
        type: System.Int32
      - id: cid
        type: System.Int32
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TMSrv.IncomingPacketHandler
    commentId: T:TMSrv.IncomingPacketHandler
    language: CSharp
    name:
      CSharp: IncomingPacketHandler
      VB: IncomingPacketHandler
    nameWithType:
      CSharp: IncomingPacketHandler
      VB: IncomingPacketHandler
    qualifiedName:
      CSharp: TMSrv.IncomingPacketHandler
      VB: TMSrv.IncomingPacketHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: IncomingPacketHandler
      path: ../TM/TMDataServer.cs
      startLine: 962
    syntax:
      content:
        CSharp: public delegate void IncomingPacketHandler(TMDataServer pds, TMPacket p, byte[] pdata);
        VB: Public Delegate Sub IncomingPacketHandler(pds As TMDataServer, p As TMPacket, pdata As Byte())
      parameters:
      - id: pds
        type: TMSrv.TMDataServer
      - id: p
        type: TM.TMPacket
      - id: pdata
        type: System.Byte[]
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TMSrv.MakeCommandHandler
    commentId: T:TMSrv.MakeCommandHandler
    language: CSharp
    name:
      CSharp: MakeCommandHandler
      VB: MakeCommandHandler
    nameWithType:
      CSharp: MakeCommandHandler
      VB: MakeCommandHandler
    qualifiedName:
      CSharp: TMSrv.MakeCommandHandler
      VB: TMSrv.MakeCommandHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: MakeCommandHandler
      path: ../TM/TMDataServer.cs
      startLine: 963
    syntax:
      content:
        CSharp: public delegate int MakeCommandHandler(int cmd, byte[] send_data, int n, DevDescr p_dev, short reqrespdelay);
        VB: Public Delegate Function MakeCommandHandler(cmd As Integer, send_data As Byte(), n As Integer, p_dev As DevDescr, reqrespdelay As Short) As Integer
      parameters:
      - id: cmd
        type: System.Int32
      - id: send_data
        type: System.Byte[]
      - id: n
        type: System.Int32
      - id: p_dev
        type: TMSrv.DevDescr
      - id: reqrespdelay
        type: System.Int16
      return:
        type: System.Int32
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TMSrv.ServerHandler
    commentId: T:TMSrv.ServerHandler
    language: CSharp
    name:
      CSharp: ServerHandler
      VB: ServerHandler
    nameWithType:
      CSharp: ServerHandler
      VB: ServerHandler
    qualifiedName:
      CSharp: TMSrv.ServerHandler
      VB: TMSrv.ServerHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TMSrv
    source:
      remote:
        path: TM/TMDataServer.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ServerHandler
      path: ../TM/TMDataServer.cs
      startLine: 964
    syntax:
      content:
        CSharp: public delegate void ServerHandler(TMDataServer pds);
        VB: Public Delegate Sub ServerHandler(pds As TMDataServer)
      parameters:
      - id: pds
        type: TMSrv.TMDataServer
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
- id: TM
  commentId: N:TM
  language: CSharp
  name:
    CSharp: TM
    VB: TM
  nameWithType:
    CSharp: TM
    VB: TM
  qualifiedName:
    CSharp: TM
    VB: TM
  type: Namespace
  assemblies:
  - TM
  modifiers: {}
  items:
  - id: TM.BufferChunk
    commentId: T:TM.BufferChunk
    language: CSharp
    name:
      CSharp: BufferChunk
      VB: BufferChunk
    nameWithType:
      CSharp: BufferChunk
      VB: BufferChunk
    qualifiedName:
      CSharp: TM.BufferChunk
      VB: TM.BufferChunk
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/BufferChunk.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: BufferChunk
      path: ../TM/BufferChunk.cs
      startLine: 60
    summary: "\n\nOverview:\n<pre><code>  ----------------------------------------------------------------------\n  BufferChunk is a helper class created to make network\n  calls in DotNet easier by allowing byte[] to be passed\n  around along with an index (or offset) and length (or chunksize).\n  Members:\n  ----------------------------------------------------------------------\n  - index  - offset inside the buffer where valid data starts\n  - length - amount of valid data\n  - buffer - byte[] containing the data\n  Except for constructors (which set index and length member variables),\n  when index and length are passed as parameters, they are used as\n  offsets into the valid data, not offsets into the buffer.\n   Object State:\n  ----------------------------------------------------------------------\n  BufferChunk does not accept or return null or zero-length objects.\n  However, it is valid\n   for a BufferChunk to be in a state where it has no data to manipulate\n  i.e. length == 0 this.index + this.length cannot be > buffer.Length\n  index + length cannot be > this.length when manipulating inside the\n  valid data\n   index must be >= 0\n   length must be >= 0\n   Integral types:\n   ---------------------------------------------------------------------\n   BufferChunk allows the reading and writing of integral types\n   (Int16, Int32, Int64 and the unsigned counterparts) into the byte[].</code></pre>\n<br />Implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.ICloneable\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [ComVisible(false)]

          public class BufferChunk : IDisposable, ICloneable
        VB: >-
          <ComVisible(False)>

          Public Class BufferChunk

              Implements IDisposable, ICloneable
    seealso:
    - linkId: System.IDisposable
      commentId: T:System.IDisposable
    - linkId: System.ICloneable
      commentId: T:System.ICloneable
    - linkId: System.IDisposable
      commentId: T:System.IDisposable
    - linkId: System.ICloneable
      commentId: T:System.ICloneable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    - System.ICloneable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    extensionMethods:
    - TM.BufferChunk.TM.Extensions.Add(TM.TMPacketHeader)
    - TM.BufferChunk.TM.Extensions.Add(TM.PlanSpot)
    - TM.BufferChunk.TM.Extensions.MC_PT_ILH
    - TM.BufferChunk.TM.Extensions.MCS_State
    - TM.BufferChunk.TM.Extensions.NextFullSpot
    - TM.BufferChunk.TM.Extensions.NextPacketHeader
    - TM.BufferChunk.TM.Extensions.NextPlanSpotResult
    - TM.BufferChunk.TM.Extensions.NextResultSpot
    - TM.BufferChunk.TM.Extensions.NextSpot
    - TM.BufferChunk.TM.Extensions.NextSpotFull
    - TM.BufferChunk.TM.Extensions.NextSpotResult
    attributes:
    - type: System.Runtime.InteropServices.ComVisibleAttribute
      ctor: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
      arguments:
      - type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.BufferChunk.#ctor(System.Int32)
      commentId: M:TM.BufferChunk.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: BufferChunk(Int32)
        VB: BufferChunk(Int32)
      nameWithType:
        CSharp: BufferChunk.BufferChunk(Int32)
        VB: BufferChunk.BufferChunk(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.BufferChunk(System.Int32)
        VB: TM.BufferChunk.BufferChunk(System.Int32)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 107
      summary: "\nConstructor, create a new BufferChunk and allocate a new byte[] to hold the data.\n"
      example:
      - "\nBufferChunk bufferChunk = new BufferChunk(2000);\n"
      syntax:
        content:
          CSharp: public BufferChunk(int size = 1024)
          VB: Public Sub New(size As Integer = 1024)
        parameters:
        - id: size
          type: System.Int32
          description: int size of the new byte[] to create, must be >= 1
      overload: TM.BufferChunk.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.BufferChunk: 
    - id: TM.BufferChunk.#ctor(System.Byte[])
      commentId: M:TM.BufferChunk.#ctor(System.Byte[])
      language: CSharp
      name:
        CSharp: BufferChunk(Byte[])
        VB: BufferChunk(Byte())
      nameWithType:
        CSharp: BufferChunk.BufferChunk(Byte[])
        VB: BufferChunk.BufferChunk(Byte())
      qualifiedName:
        CSharp: TM.BufferChunk.BufferChunk(System.Byte[])
        VB: TM.BufferChunk.BufferChunk(System.Byte())
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 131
      summary: "\nConstructor, create a BufferChunk using an existing byte[] without performing a memcopy\n"
      example:
      - "\nbyte[] buffer = new byte[2000];\nBufferChunk bufferChunk = new BufferChunk(buffer);\n"
      syntax:
        content:
          CSharp: public BufferChunk(byte[] buffer)
          VB: Public Sub New(buffer As Byte())
        parameters:
        - id: buffer
          type: System.Byte[]
          description: "\nbyte[] to be used as the data store for the BufferChunk,\ncannot be null or zero length\n"
      overload: TM.BufferChunk.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.BufferChunk: 
    - id: TM.BufferChunk.#ctor(System.Byte[],System.Int32,System.Int32)
      commentId: M:TM.BufferChunk.#ctor(System.Byte[],System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: BufferChunk(Byte[], Int32, Int32)
        VB: BufferChunk(Byte(), Int32, Int32)
      nameWithType:
        CSharp: BufferChunk.BufferChunk(Byte[], Int32, Int32)
        VB: BufferChunk.BufferChunk(Byte(), Int32, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.BufferChunk(System.Byte[], System.Int32, System.Int32)
        VB: TM.BufferChunk.BufferChunk(System.Byte(), System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 156
      summary: "\nConstructor, create a BufferChunk from its constituent parts\n"
      example:
      - "\nbyte[] buffer = new byte[2000];\nBufferChunk bufferChunk = new BufferChunk(buffer, 10, 200);\n"
      syntax:
        content:
          CSharp: public BufferChunk(byte[] buffer, int index, int length)
          VB: Public Sub New(buffer As Byte(), index As Integer, length As Integer)
        parameters:
        - id: buffer
          type: System.Byte[]
          description: byte[] to be used as the data store for the BufferChunk
        - id: index
          type: System.Int32
          description: offset at which the valid data starts
        - id: length
          type: System.Int32
          description: amount of &apos;valid data&apos;
      overload: TM.BufferChunk.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.BufferChunk: 
    - id: TM.BufferChunk.Buffer
      commentId: P:TM.BufferChunk.Buffer
      language: CSharp
      name:
        CSharp: Buffer
        VB: Buffer
      nameWithType:
        CSharp: BufferChunk.Buffer
        VB: BufferChunk.Buffer
      qualifiedName:
        CSharp: TM.BufferChunk.Buffer
        VB: TM.BufferChunk.Buffer
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Buffer
        path: ../TM/BufferChunk.cs
        startLine: 227
      summary: "\nBuffer gives you direct access to the byte[] which is storing the raw data of the\nBufferChunk.  Buffer is simply a byte[] that is passed ByRef so you have easy and\nefficient access to the basic data.\nNote: This property may be removed going forward\n"
      example:
      - "\npublic int SendTo(BufferChunk bufferChunk, EndPoint endPoint)\n{\nreturn SendTo(bufferChunk.Buffer, bufferChunk.Index, bufferChunk.Length,\nSocketFlags.None, endPoint);\n}\n"
      syntax:
        content:
          CSharp: public byte[] Buffer { get; }
          VB: Public ReadOnly Property Buffer As Byte()
        parameters: []
        return:
          type: System.Byte[]
          description: The buffer.
      overload: TM.BufferChunk.Buffer*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.BufferChunk.Index
      commentId: P:TM.BufferChunk.Index
      language: CSharp
      name:
        CSharp: Index
        VB: Index
      nameWithType:
        CSharp: BufferChunk.Index
        VB: BufferChunk.Index
      qualifiedName:
        CSharp: TM.BufferChunk.Index
        VB: TM.BufferChunk.Index
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Index
        path: ../TM/BufferChunk.cs
        startLine: 251
      summary: "\nIndex points to the start of the valid data area\nNote: This property may be removed going forward\n"
      example:
      - "\npublic int SendTo(BufferChunk bufferChunk, EndPoint endPoint)\n{\nreturn SendTo(bufferChunk.Buffer, bufferChunk.Index, bufferChunk.Length,\nSocketFlags.None, endPoint);\n}\n"
      syntax:
        content:
          CSharp: public int Index { get; }
          VB: Public ReadOnly Property Index As Integer
        parameters: []
        return:
          type: System.Int32
          description: The index.
      overload: TM.BufferChunk.Index*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.BufferChunk.Length
      commentId: P:TM.BufferChunk.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: BufferChunk.Length
        VB: BufferChunk.Length
      qualifiedName:
        CSharp: TM.BufferChunk.Length
        VB: TM.BufferChunk.Length
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/BufferChunk.cs
        startLine: 279
      summary: "\nLength is amount of valid data in the buffer\nLength should not be directly manipulated to select smaller sections of the BufferChunk\nbecause this would abandon valid data.  Instead, you should use the method\n<xref href=\"TM.BufferChunk.Peek(System.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  to create a shallow copy new BufferChunk pointing to\njust the section you want.\nNote: This property may be removed going forward\n"
      example:
      - "\npublic int SendTo(BufferChunk bufferChunk, EndPoint endPoint)\n{\nreturn SendTo(bufferChunk.Buffer, bufferChunk.Index, bufferChunk.Length,\nSocketFlags.None, endPoint);\n}\n"
      syntax:
        content:
          CSharp: public int Length { get; set; }
          VB: Public Property Length As Integer
        parameters: []
        return:
          type: System.Int32
          description: The length.
      overload: TM.BufferChunk.Length*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        TM.BufferChunk.Peek(System.Int32,System.Int32): 
    - id: TM.BufferChunk.Item(System.Int32)
      commentId: P:TM.BufferChunk.Item(System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: BufferChunk.Item[Int32]
        VB: BufferChunk.Item(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.Item[System.Int32]
        VB: TM.BufferChunk.Item(System.Int32)
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: this[]
        path: ../TM/BufferChunk.cs
        startLine: 331
      summary: "\nIndexer used to allow us to treat a BufferChunk like a byte[].  Useful when making in place modifications or reads\nfrom a BufferChunk.\n"
      example: []
      syntax:
        content:
          CSharp: public byte this[int index] { get; set; }
          VB: Public Property Item(index As Integer) As Byte
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        return:
          type: System.Byte
          description: System.Byte.
      overload: TM.BufferChunk.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        System.Byte: 
    - id: TM.BufferChunk.Clone
      commentId: M:TM.BufferChunk.Clone
      language: CSharp
      name:
        CSharp: Clone()
        VB: Clone()
      nameWithType:
        CSharp: BufferChunk.Clone()
        VB: BufferChunk.Clone()
      qualifiedName:
        CSharp: TM.BufferChunk.Clone()
        VB: TM.BufferChunk.Clone()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Clone
        path: ../TM/BufferChunk.cs
        startLine: 368
      summary: "\nCreates a shallow copy (new Index and Length, duplicate reference to the same Buffer) of a BufferChunk.\n"
      example: []
      syntax:
        content:
          CSharp: public object Clone()
          VB: Public Function Clone As Object
        return:
          type: System.Object
          description: BufferChunk instance with ref Buffer, ByVal Index, and ByVal Length
      overload: TM.BufferChunk.Clone*
      implements:
      - System.ICloneable.Clone
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.Dispose
      commentId: M:TM.BufferChunk.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: BufferChunk.Dispose()
        VB: BufferChunk.Dispose()
      qualifiedName:
        CSharp: TM.BufferChunk.Dispose()
        VB: TM.BufferChunk.Dispose()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Dispose
        path: ../TM/BufferChunk.cs
        startLine: 379
      summary: "\nDisposes the internal state of the object\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: TM.BufferChunk.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.Compare(System.Byte[],System.Byte[])
      commentId: M:TM.BufferChunk.Compare(System.Byte[],System.Byte[])
      language: CSharp
      name:
        CSharp: Compare(Byte[], Byte[])
        VB: Compare(Byte(), Byte())
      nameWithType:
        CSharp: BufferChunk.Compare(Byte[], Byte[])
        VB: BufferChunk.Compare(Byte(), Byte())
      qualifiedName:
        CSharp: TM.BufferChunk.Compare(System.Byte[], System.Byte[])
        VB: TM.BufferChunk.Compare(System.Byte(), System.Byte())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Compare
        path: ../TM/BufferChunk.cs
        startLine: 403
      summary: "\nCompares the specified obj1.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Compare(byte[] obj1, byte[] obj2)
          VB: Public Shared Function Compare(obj1 As Byte(), obj2 As Byte()) As Boolean
        parameters:
        - id: obj1
          type: System.Byte[]
          description: The obj1.
        - id: obj2
          type: System.Byte[]
          description: The obj2.
        return:
          type: System.Boolean
          description: <code>true</code> if XXXX, <code>false</code> otherwise
      overload: TM.BufferChunk.Compare*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.Copy(System.Byte[])
      commentId: M:TM.BufferChunk.Copy(System.Byte[])
      language: CSharp
      name:
        CSharp: Copy(Byte[])
        VB: Copy(Byte())
      nameWithType:
        CSharp: BufferChunk.Copy(Byte[])
        VB: BufferChunk.Copy(Byte())
      qualifiedName:
        CSharp: TM.BufferChunk.Copy(System.Byte[])
        VB: TM.BufferChunk.Copy(System.Byte())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Copy
        path: ../TM/BufferChunk.cs
        startLine: 439
      summary: "\nCopies the specified source.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] Copy(byte[] source)
          VB: Public Shared Function Copy(source As Byte()) As Byte()
        parameters:
        - id: source
          type: System.Byte[]
          description: The source.
        return:
          type: System.Byte[]
          description: System.Byte[][].
      overload: TM.BufferChunk.Copy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,TM.BufferChunk)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,TM.BufferChunk)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, BufferChunk)
        VB: Addition(BufferChunk, BufferChunk)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, BufferChunk)
        VB: BufferChunk.Addition(BufferChunk, BufferChunk)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, TM.BufferChunk)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, TM.BufferChunk)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 464
      summary: "\nOverride + and += operator to allow appending of buffers,\nprovided there is room in the left-most BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, BufferChunk source)
          VB: Public Shared Operator +(destination As BufferChunk, source As BufferChunk) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: BufferChunk destination that will be appended to
        - id: source
          type: TM.BufferChunk
          description: BufferChunk source
        return:
          type: TM.BufferChunk
          description: Reference to BufferChunk destination
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Byte[])
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Byte[])
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Byte[])
        VB: Addition(BufferChunk, Byte())
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Byte[])
        VB: BufferChunk.Addition(BufferChunk, Byte())
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Byte[])
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Byte())
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 493
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, byte[] source)
          VB: Public Shared Operator +(destination As BufferChunk, source As Byte()) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: source
          type: System.Byte[]
          description: The source.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Byte)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Byte)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Byte)
        VB: Addition(BufferChunk, Byte)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Byte)
        VB: BufferChunk.Addition(BufferChunk, Byte)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Byte)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Byte)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 538
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, byte b)
          VB: Public Shared Operator +(destination As BufferChunk, b As Byte) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: b
          type: System.Byte
          description: The b.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Int16)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Int16)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Int16)
        VB: Addition(BufferChunk, Int16)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Int16)
        VB: BufferChunk.Addition(BufferChunk, Int16)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Int16)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Int16)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 563
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, short data)
          VB: Public Shared Operator +(destination As BufferChunk, data As Short) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.Int16
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Single)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Single)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Single)
        VB: Addition(BufferChunk, Single)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Single)
        VB: BufferChunk.Addition(BufferChunk, Single)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Single)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Single)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 590
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, float data)
          VB: Public Shared Operator +(destination As BufferChunk, data As Single) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.Single
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Double)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Double)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Double)
        VB: Addition(BufferChunk, Double)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Double)
        VB: BufferChunk.Addition(BufferChunk, Double)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Double)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Double)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 608
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, double data)
          VB: Public Shared Operator +(destination As BufferChunk, data As Double) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.Double
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Int32)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Int32)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Int32)
        VB: Addition(BufferChunk, Int32)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Int32)
        VB: BufferChunk.Addition(BufferChunk, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Int32)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Int32)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 626
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, int data)
          VB: Public Shared Operator +(destination As BufferChunk, data As Integer) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.Int32
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.Int64)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.Int64)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, Int64)
        VB: Addition(BufferChunk, Int64)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, Int64)
        VB: BufferChunk.Addition(BufferChunk, Int64)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.Int64)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.Int64)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 653
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, long data)
          VB: Public Shared Operator +(destination As BufferChunk, data As Long) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.Int64
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.UInt16)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.UInt16)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, UInt16)
        VB: Addition(BufferChunk, UInt16)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, UInt16)
        VB: BufferChunk.Addition(BufferChunk, UInt16)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.UInt16)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.UInt16)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 670
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, ushort data)
          VB: Public Shared Operator +(destination As BufferChunk, data As UShort) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.UInt16
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.UInt32)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.UInt32)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, UInt32)
        VB: Addition(BufferChunk, UInt32)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, UInt32)
        VB: BufferChunk.Addition(BufferChunk, UInt32)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.UInt32)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.UInt32)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 687
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, uint data)
          VB: Public Shared Operator +(destination As BufferChunk, data As UInteger) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.UInt32
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.UInt64)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.UInt64)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, UInt64)
        VB: Addition(BufferChunk, UInt64)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, UInt64)
        VB: BufferChunk.Addition(BufferChunk, UInt64)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.UInt64)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.UInt64)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 704
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, ulong data)
          VB: Public Shared Operator +(destination As BufferChunk, data As ULong) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: data
          type: System.UInt64
          description: The data.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Addition(TM.BufferChunk,System.String)
      commentId: M:TM.BufferChunk.op_Addition(TM.BufferChunk,System.String)
      language: CSharp
      name:
        CSharp: Addition(BufferChunk, String)
        VB: Addition(BufferChunk, String)
      nameWithType:
        CSharp: BufferChunk.Addition(BufferChunk, String)
        VB: BufferChunk.Addition(BufferChunk, String)
      qualifiedName:
        CSharp: TM.BufferChunk.Addition(TM.BufferChunk, System.String)
        VB: TM.BufferChunk.Addition(TM.BufferChunk, System.String)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Addition
        path: ../TM/BufferChunk.cs
        startLine: 732
      summary: "\n<br />Implements the +.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk operator +(BufferChunk destination, string s)
          VB: Public Shared Operator +(destination As BufferChunk, s As String) As BufferChunk
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: The destination.
        - id: s
          type: System.String
          description: The s.
        return:
          type: TM.BufferChunk
          description: The result of the operator.
      overload: TM.BufferChunk.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.op_Explicit(TM.BufferChunk)~System.Byte[]
      commentId: M:TM.BufferChunk.op_Explicit(TM.BufferChunk)~System.Byte[]
      language: CSharp
      name:
        CSharp: Explicit(BufferChunk to Byte[])
        VB: Narrowing(BufferChunk to Byte())
      nameWithType:
        CSharp: BufferChunk.Explicit(BufferChunk to Byte[])
        VB: BufferChunk.Narrowing(BufferChunk to Byte())
      qualifiedName:
        CSharp: TM.BufferChunk.Explicit(TM.BufferChunk to System.Byte[])
        VB: TM.BufferChunk.Narrowing(TM.BufferChunk to System.Byte())
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Explicit
        path: ../TM/BufferChunk.cs
        startLine: 768
      summary: "\nExplicitly cast the valid data into a new byte[]. This function creates a copy of the\nBufferChunk data and omits the bytes before the Index and after the Length from the\nbyte[] copy.  This is a simple way to interoperate BufferChunks with functions that\nonly know how to deal with byte[].\n"
      example:
      - "\nusing P;\nusing System.Net.Sockets;\nSocket socket = new Socket(...);  // This standard socket only knows byte[]\nBufferChunk bufferChunk = new bufferChunk(500); // Create a new BufferChunk containing a 500 byte buffer\nsocket.Send((byte[])bufferChunk, SocketFlags.None);    //Note the explicit cast from BufferChunk to byte[]\n"
      syntax:
        content:
          CSharp: public static explicit operator byte[](BufferChunk source)
          VB: Public Shared Narrowing Operator CType(source As BufferChunk) As Byte()
        parameters:
        - id: source
          type: TM.BufferChunk
          description: BufferChunk
        return:
          type: System.Byte[]
          description: byte[] containing the valid data from the BufferChunk
      overload: TM.BufferChunk.op_Explicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        TM.BufferChunk: 
        System.Byte: 
    - id: TM.BufferChunk.op_Explicit(TM.BufferChunk)~System.String
      commentId: M:TM.BufferChunk.op_Explicit(TM.BufferChunk)~System.String
      language: CSharp
      name:
        CSharp: Explicit(BufferChunk to String)
        VB: Narrowing(BufferChunk to String)
      nameWithType:
        CSharp: BufferChunk.Explicit(BufferChunk to String)
        VB: BufferChunk.Narrowing(BufferChunk to String)
      qualifiedName:
        CSharp: TM.BufferChunk.Explicit(TM.BufferChunk to System.String)
        VB: TM.BufferChunk.Narrowing(TM.BufferChunk to System.String)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Explicit
        path: ../TM/BufferChunk.cs
        startLine: 793
      summary: "\nExplicitly cast the valid data to a string.  Helpful for applications that want to send\nstrings or XML over the network without worrying about the String to UTF8 logic.\n"
      example:
      - "\nBufferChunk bc = new BufferChunk(new byte[] {74, 97, 115, 111, 110});\nif((string)bc == &quot;Jason&quot;)...\n"
      syntax:
        content:
          CSharp: public static explicit operator string (BufferChunk source)
          VB: Public Shared Narrowing Operator CType(source As BufferChunk) As String
        parameters:
        - id: source
          type: TM.BufferChunk
          description: BufferChunk containing the data
        return:
          type: System.String
          description: string form of data
      overload: TM.BufferChunk.op_Explicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        TM.BufferChunk: 
        System.String: 
    - id: TM.BufferChunk.op_Explicit(System.String)~TM.BufferChunk
      commentId: M:TM.BufferChunk.op_Explicit(System.String)~TM.BufferChunk
      language: CSharp
      name:
        CSharp: Explicit(String to BufferChunk)
        VB: Narrowing(String to BufferChunk)
      nameWithType:
        CSharp: BufferChunk.Explicit(String to BufferChunk)
        VB: BufferChunk.Narrowing(String to BufferChunk)
      qualifiedName:
        CSharp: TM.BufferChunk.Explicit(System.String to TM.BufferChunk)
        VB: TM.BufferChunk.Narrowing(System.String to TM.BufferChunk)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Explicit
        path: ../TM/BufferChunk.cs
        startLine: 814
      summary: "\nExplicitly cast a string to a BufferChunk.  Helpful for applications that want to send strings or XML over the\nnetwork without worrying about the String to UTF8 logic.\n"
      example: []
      syntax:
        content:
          CSharp: public static explicit operator BufferChunk(string source)
          VB: Public Shared Narrowing Operator CType(source As String) As BufferChunk
        parameters:
        - id: source
          type: System.String
          description: The source.
        return:
          type: TM.BufferChunk
          description: The result of the conversion.
      overload: TM.BufferChunk.op_Explicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.String: 
        TM.BufferChunk: 
    - id: TM.BufferChunk.op_Explicit(System.Byte[])~TM.BufferChunk
      commentId: M:TM.BufferChunk.op_Explicit(System.Byte[])~TM.BufferChunk
      language: CSharp
      name:
        CSharp: Explicit(Byte[] to BufferChunk)
        VB: Narrowing(Byte() to BufferChunk)
      nameWithType:
        CSharp: BufferChunk.Explicit(Byte[] to BufferChunk)
        VB: BufferChunk.Narrowing(Byte() to BufferChunk)
      qualifiedName:
        CSharp: TM.BufferChunk.Explicit(System.Byte[] to TM.BufferChunk)
        VB: TM.BufferChunk.Narrowing(System.Byte() to TM.BufferChunk)
      type: Operator
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: op_Explicit
        path: ../TM/BufferChunk.cs
        startLine: 837
      summary: "\nExplicitly cast a byte[] into a BufferChunk.  Useful when you want to start acting upon a byte[] in an incremental\nfashion by taking advantage of The functionality a BufferChunk provides over a byte[].  For instance, this is useful\nfor aking a large (say 500k) dataset and dividing it up into smaller (say 1.5k) chunks.\nThis is functionally equivalent to <code>new BufferChunk(buffer)</code>\n"
      example: []
      syntax:
        content:
          CSharp: public static explicit operator BufferChunk(byte[] buffer)
          VB: Public Shared Narrowing Operator CType(buffer As Byte()) As BufferChunk
        parameters:
        - id: buffer
          type: System.Byte[]
          description: byte[] buffer containing valid data
        return:
          type: TM.BufferChunk
          description: BufferChunk
      overload: TM.BufferChunk.op_Explicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.Byte: 
        TM.BufferChunk: 
    - id: TM.BufferChunk.SetNetworking(System.Boolean)
      commentId: M:TM.BufferChunk.SetNetworking(System.Boolean)
      language: CSharp
      name:
        CSharp: SetNetworking(Boolean)
        VB: SetNetworking(Boolean)
      nameWithType:
        CSharp: BufferChunk.SetNetworking(Boolean)
        VB: BufferChunk.SetNetworking(Boolean)
      qualifiedName:
        CSharp: TM.BufferChunk.SetNetworking(System.Boolean)
        VB: TM.BufferChunk.SetNetworking(System.Boolean)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetNetworking
        path: ../TM/BufferChunk.cs
        startLine: 851
      summary: "\nSets the networking.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetNetworking(bool v = true)
          VB: Public Shared Sub SetNetworking(v As Boolean = True)
        parameters:
        - id: v
          type: System.Boolean
          description: if set to <code>true</code> [v].
      overload: TM.BufferChunk.SetNetworking*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.BufferChunk.Clear
      commentId: M:TM.BufferChunk.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: BufferChunk.Clear()
        VB: BufferChunk.Clear()
      qualifiedName:
        CSharp: TM.BufferChunk.Clear()
        VB: TM.BufferChunk.Clear()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Clear
        path: ../TM/BufferChunk.cs
        startLine: 862
      summary: "\nUsed to zero out the data area of the BufferChunk.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: TM.BufferChunk.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.CopyFrom(System.IntPtr,System.Int32)
      commentId: M:TM.BufferChunk.CopyFrom(System.IntPtr,System.Int32)
      language: CSharp
      name:
        CSharp: CopyFrom(IntPtr, Int32)
        VB: CopyFrom(IntPtr, Int32)
      nameWithType:
        CSharp: BufferChunk.CopyFrom(IntPtr, Int32)
        VB: BufferChunk.CopyFrom(IntPtr, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.CopyFrom(System.IntPtr, System.Int32)
        VB: TM.BufferChunk.CopyFrom(System.IntPtr, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CopyFrom
        path: ../TM/BufferChunk.cs
        startLine: 879
      summary: "\nCopies from.\n"
      example: []
      syntax:
        content:
          CSharp: public void CopyFrom(IntPtr src, int length)
          VB: Public Sub CopyFrom(src As IntPtr, length As Integer)
        parameters:
        - id: src
          type: System.IntPtr
          description: The SRC.
        - id: length
          type: System.Int32
          description: The length.
      overload: TM.BufferChunk.CopyFrom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.CopyTo(TM.BufferChunk,System.Int32)
      commentId: M:TM.BufferChunk.CopyTo(TM.BufferChunk,System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(BufferChunk, Int32)
        VB: CopyTo(BufferChunk, Int32)
      nameWithType:
        CSharp: BufferChunk.CopyTo(BufferChunk, Int32)
        VB: BufferChunk.CopyTo(BufferChunk, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.CopyTo(TM.BufferChunk, System.Int32)
        VB: TM.BufferChunk.CopyTo(TM.BufferChunk, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CopyTo
        path: ../TM/BufferChunk.cs
        startLine: 903
      summary: "\nCopy the valid data section of &apos;this&apos; to the destination BufferChunk\noverwriting dest&apos;s previous contents\nThis method does not allow dest&apos;s valid data section to grow or shrink\n(i.e. treat valid data as a fixed buffer)\n"
      example: []
      syntax:
        content:
          CSharp: public void CopyTo(BufferChunk destination, int index)
          VB: Public Sub CopyTo(destination As BufferChunk, index As Integer)
        parameters:
        - id: destination
          type: TM.BufferChunk
          description: BufferChunk
        - id: index
          type: System.Int32
          description: offset in the destination BufferChunk&apos;s valid data
      overload: TM.BufferChunk.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.CopyTo(System.IntPtr,System.Int32)
      commentId: M:TM.BufferChunk.CopyTo(System.IntPtr,System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(IntPtr, Int32)
        VB: CopyTo(IntPtr, Int32)
      nameWithType:
        CSharp: BufferChunk.CopyTo(IntPtr, Int32)
        VB: BufferChunk.CopyTo(IntPtr, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.CopyTo(System.IntPtr, System.Int32)
        VB: TM.BufferChunk.CopyTo(System.IntPtr, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CopyTo
        path: ../TM/BufferChunk.cs
        startLine: 928
      summary: "\nCopies to.\n"
      example: []
      syntax:
        content:
          CSharp: public void CopyTo(IntPtr dest, int length)
          VB: Public Sub CopyTo(dest As IntPtr, length As Integer)
        parameters:
        - id: dest
          type: System.IntPtr
          description: The dest.
        - id: length
          type: System.Int32
          description: The length.
      overload: TM.BufferChunk.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetByte(System.Int32)
      commentId: M:TM.BufferChunk.GetByte(System.Int32)
      language: CSharp
      name:
        CSharp: GetByte(Int32)
        VB: GetByte(Int32)
      nameWithType:
        CSharp: BufferChunk.GetByte(Int32)
        VB: BufferChunk.GetByte(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetByte(System.Int32)
        VB: TM.BufferChunk.GetByte(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetByte
        path: ../TM/BufferChunk.cs
        startLine: 957
      summary: "\nRetrieves 1 byte from inside the BufferChunk\nThis method is included for consistency.  It simply forwards to the indexer.\n"
      example: []
      syntax:
        content:
          CSharp: public byte GetByte(int index)
          VB: Public Function GetByte(index As Integer) As Byte
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.Byte
          description: System.Byte.
      overload: TM.BufferChunk.GetByte*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetDouble(System.Int32)
      commentId: M:TM.BufferChunk.GetDouble(System.Int32)
      language: CSharp
      name:
        CSharp: GetDouble(Int32)
        VB: GetDouble(Int32)
      nameWithType:
        CSharp: BufferChunk.GetDouble(Int32)
        VB: BufferChunk.GetDouble(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetDouble(System.Int32)
        VB: TM.BufferChunk.GetDouble(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetDouble
        path: ../TM/BufferChunk.cs
        startLine: 973
      summary: "\nRetrieves 8 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public double GetDouble(int index)
          VB: Public Function GetDouble(index As Integer) As Double
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.Double
          description: System.Double.
      overload: TM.BufferChunk.GetDouble*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetFloat(System.Int32)
      commentId: M:TM.BufferChunk.GetFloat(System.Int32)
      language: CSharp
      name:
        CSharp: GetFloat(Int32)
        VB: GetFloat(Int32)
      nameWithType:
        CSharp: BufferChunk.GetFloat(Int32)
        VB: BufferChunk.GetFloat(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetFloat(System.Int32)
        VB: TM.BufferChunk.GetFloat(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetFloat
        path: ../TM/BufferChunk.cs
        startLine: 992
      summary: "\nRetrieves 4 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public float GetFloat(int index)
          VB: Public Function GetFloat(index As Integer) As Single
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.Single
          description: System.Single.
      overload: TM.BufferChunk.GetFloat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetInt16(System.Int32)
      commentId: M:TM.BufferChunk.GetInt16(System.Int32)
      language: CSharp
      name:
        CSharp: GetInt16(Int32)
        VB: GetInt16(Int32)
      nameWithType:
        CSharp: BufferChunk.GetInt16(Int32)
        VB: BufferChunk.GetInt16(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetInt16(System.Int32)
        VB: TM.BufferChunk.GetInt16(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetInt16
        path: ../TM/BufferChunk.cs
        startLine: 1011
      summary: "\nRetrieves 2 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public short GetInt16(int index)
          VB: Public Function GetInt16(index As Integer) As Short
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.Int16
          description: System.Int16.
      overload: TM.BufferChunk.GetInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetInt32(System.Int32)
      commentId: M:TM.BufferChunk.GetInt32(System.Int32)
      language: CSharp
      name:
        CSharp: GetInt32(Int32)
        VB: GetInt32(Int32)
      nameWithType:
        CSharp: BufferChunk.GetInt32(Int32)
        VB: BufferChunk.GetInt32(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetInt32(System.Int32)
        VB: TM.BufferChunk.GetInt32(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetInt32
        path: ../TM/BufferChunk.cs
        startLine: 1030
      summary: "\nRetrieves 4 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public int GetInt32(int index)
          VB: Public Function GetInt32(index As Integer) As Integer
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.Int32
          description: System.Int32.
      overload: TM.BufferChunk.GetInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetInt64(System.Int32)
      commentId: M:TM.BufferChunk.GetInt64(System.Int32)
      language: CSharp
      name:
        CSharp: GetInt64(Int32)
        VB: GetInt64(Int32)
      nameWithType:
        CSharp: BufferChunk.GetInt64(Int32)
        VB: BufferChunk.GetInt64(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetInt64(System.Int32)
        VB: TM.BufferChunk.GetInt64(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetInt64
        path: ../TM/BufferChunk.cs
        startLine: 1049
      summary: "\nRetrieves 8 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public long GetInt64(int index)
          VB: Public Function GetInt64(index As Integer) As Long
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.Int64
          description: System.Int64.
      overload: TM.BufferChunk.GetInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetPaddedUInt16(System.Int32)
      commentId: M:TM.BufferChunk.GetPaddedUInt16(System.Int32)
      language: CSharp
      name:
        CSharp: GetPaddedUInt16(Int32)
        VB: GetPaddedUInt16(Int32)
      nameWithType:
        CSharp: BufferChunk.GetPaddedUInt16(Int32)
        VB: BufferChunk.GetPaddedUInt16(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetPaddedUInt16(System.Int32)
        VB: TM.BufferChunk.GetPaddedUInt16(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetPaddedUInt16
        path: ../TM/BufferChunk.cs
        startLine: 1064
      summary: "\nGets the padded U int16.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort GetPaddedUInt16(int index)
          VB: Public Function GetPaddedUInt16(index As Integer) As UShort
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        return:
          type: System.UInt16
          description: System.UInt16.
      overload: TM.BufferChunk.GetPaddedUInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetPaddedUInt32(System.Int32)
      commentId: M:TM.BufferChunk.GetPaddedUInt32(System.Int32)
      language: CSharp
      name:
        CSharp: GetPaddedUInt32(Int32)
        VB: GetPaddedUInt32(Int32)
      nameWithType:
        CSharp: BufferChunk.GetPaddedUInt32(Int32)
        VB: BufferChunk.GetPaddedUInt32(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetPaddedUInt32(System.Int32)
        VB: TM.BufferChunk.GetPaddedUInt32(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetPaddedUInt32
        path: ../TM/BufferChunk.cs
        startLine: 1105
      summary: "\nGets the padded UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public uint GetPaddedUInt32(int index)
          VB: Public Function GetPaddedUInt32(index As Integer) As UInteger
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        return:
          type: System.UInt32
          description: System.UInt32.
      overload: TM.BufferChunk.GetPaddedUInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetPaddedUInt64(System.Int32)
      commentId: M:TM.BufferChunk.GetPaddedUInt64(System.Int32)
      language: CSharp
      name:
        CSharp: GetPaddedUInt64(Int32)
        VB: GetPaddedUInt64(Int32)
      nameWithType:
        CSharp: BufferChunk.GetPaddedUInt64(Int32)
        VB: BufferChunk.GetPaddedUInt64(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetPaddedUInt64(System.Int32)
        VB: TM.BufferChunk.GetPaddedUInt64(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetPaddedUInt64
        path: ../TM/BufferChunk.cs
        startLine: 1146
      summary: "\nGets the padded UInt64.\n"
      example: []
      syntax:
        content:
          CSharp: public ulong GetPaddedUInt64(int index)
          VB: Public Function GetPaddedUInt64(index As Integer) As ULong
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        return:
          type: System.UInt64
          description: System.UInt64.
      overload: TM.BufferChunk.GetPaddedUInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetUInt16(System.Int32)
      commentId: M:TM.BufferChunk.GetUInt16(System.Int32)
      language: CSharp
      name:
        CSharp: GetUInt16(Int32)
        VB: GetUInt16(Int32)
      nameWithType:
        CSharp: BufferChunk.GetUInt16(Int32)
        VB: BufferChunk.GetUInt16(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetUInt16(System.Int32)
        VB: TM.BufferChunk.GetUInt16(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetUInt16
        path: ../TM/BufferChunk.cs
        startLine: 1187
      summary: "\nRetrieves 2 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public ushort GetUInt16(int index)
          VB: Public Function GetUInt16(index As Integer) As UShort
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.UInt16
          description: System.UInt16.
      overload: TM.BufferChunk.GetUInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetUInt32(System.Int32)
      commentId: M:TM.BufferChunk.GetUInt32(System.Int32)
      language: CSharp
      name:
        CSharp: GetUInt32(Int32)
        VB: GetUInt32(Int32)
      nameWithType:
        CSharp: BufferChunk.GetUInt32(Int32)
        VB: BufferChunk.GetUInt32(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetUInt32(System.Int32)
        VB: TM.BufferChunk.GetUInt32(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetUInt32
        path: ../TM/BufferChunk.cs
        startLine: 1202
      summary: "\nRetrieves 4 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public uint GetUInt32(int index)
          VB: Public Function GetUInt32(index As Integer) As UInteger
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.UInt32
          description: System.UInt32.
      overload: TM.BufferChunk.GetUInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetUInt64(System.Int32)
      commentId: M:TM.BufferChunk.GetUInt64(System.Int32)
      language: CSharp
      name:
        CSharp: GetUInt64(Int32)
        VB: GetUInt64(Int32)
      nameWithType:
        CSharp: BufferChunk.GetUInt64(Int32)
        VB: BufferChunk.GetUInt64(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetUInt64(System.Int32)
        VB: TM.BufferChunk.GetUInt64(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetUInt64
        path: ../TM/BufferChunk.cs
        startLine: 1217
      summary: "\nRetrieves 8 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public ulong GetUInt64(int index)
          VB: Public Function GetUInt64(index As Integer) As ULong
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        return:
          type: System.UInt64
          description: System.UInt64.
      overload: TM.BufferChunk.GetUInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.GetUTF8String(System.Int32,System.Int32)
      commentId: M:TM.BufferChunk.GetUTF8String(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetUTF8String(Int32, Int32)
        VB: GetUTF8String(Int32, Int32)
      nameWithType:
        CSharp: BufferChunk.GetUTF8String(Int32, Int32)
        VB: BufferChunk.GetUTF8String(Int32, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.GetUTF8String(System.Int32, System.Int32)
        VB: TM.BufferChunk.GetUTF8String(System.Int32, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GetUTF8String
        path: ../TM/BufferChunk.cs
        startLine: 1238
      summary: "\nRetrieves length bytes from inside the BufferChunk and converts from UTF8 string\n"
      example: []
      syntax:
        content:
          CSharp: public string GetUTF8String(int index, int length)
          VB: Public Function GetUTF8String(index As Integer, length As Integer) As String
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: length
          type: System.Int32
          description: The length.
        return:
          type: System.String
          description: System.String.
      overload: TM.BufferChunk.GetUTF8String*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextBufferChunk(System.Int32)
      commentId: M:TM.BufferChunk.NextBufferChunk(System.Int32)
      language: CSharp
      name:
        CSharp: NextBufferChunk(Int32)
        VB: NextBufferChunk(Int32)
      nameWithType:
        CSharp: BufferChunk.NextBufferChunk(Int32)
        VB: BufferChunk.NextBufferChunk(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.NextBufferChunk(System.Int32)
        VB: TM.BufferChunk.NextBufferChunk(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextBufferChunk
        path: ../TM/BufferChunk.cs
        startLine: 1277
      summary: "\nReturns a BufferChunk consisting of the next &apos;length&apos; bytes of the BufferChunk instance.\nAutomatically increments Index and decrements Length.\nThis function is useful for iterative functions that parse through a large BufferChunk returning smaller\nBufferChunks\n"
      example:
      - "\n...\nframeBuffer = new BufferChunk(500000);\n...\nint packetsInFrame = (ushort)((frameBuffer.Length + RtpHeaderExtensionSize) / (MaximumPacketPayload));\nif (((frameBuffer.Length + RtpHeaderExtensionSize) % (MaximumPacketPayload)) > 0)\npacketsInFrame++;\nfor (int i = 0; i &lt; packetsInFrame; i++)\n{\nint sizeToCopy = (frameBuffer.Length &lt; MaximumPacketPayload) ? frameBuffer.Length : MaximumPacketPayload;\nsocket.Send((byte[])frameBuffer.NextBufferChunk(sizeToCopy));\n}\n"
      syntax:
        content:
          CSharp: public BufferChunk NextBufferChunk(int length)
          VB: Public Function NextBufferChunk(length As Integer) As BufferChunk
        parameters:
        - id: length
          type: System.Int32
          description: int
        return:
          type: TM.BufferChunk
          description: BufferChunk
      overload: TM.BufferChunk.NextBufferChunk*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextBufferChunkMax(System.Int32)
      commentId: M:TM.BufferChunk.NextBufferChunkMax(System.Int32)
      language: CSharp
      name:
        CSharp: NextBufferChunkMax(Int32)
        VB: NextBufferChunkMax(Int32)
      nameWithType:
        CSharp: BufferChunk.NextBufferChunkMax(Int32)
        VB: BufferChunk.NextBufferChunkMax(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.NextBufferChunkMax(System.Int32)
        VB: TM.BufferChunk.NextBufferChunkMax(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextBufferChunkMax
        path: ../TM/BufferChunk.cs
        startLine: 1298
      summary: "\nReturns the requested amount of data, or whatever remains if length > this.length\n"
      example: []
      syntax:
        content:
          CSharp: public BufferChunk NextBufferChunkMax(int length)
          VB: Public Function NextBufferChunkMax(length As Integer) As BufferChunk
        parameters:
        - id: length
          type: System.Int32
          description: The length.
        return:
          type: TM.BufferChunk
          description: BufferChunk.
      overload: TM.BufferChunk.NextBufferChunkMax*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextByte
      commentId: M:TM.BufferChunk.NextByte
      language: CSharp
      name:
        CSharp: NextByte()
        VB: NextByte()
      nameWithType:
        CSharp: BufferChunk.NextByte()
        VB: BufferChunk.NextByte()
      qualifiedName:
        CSharp: TM.BufferChunk.NextByte()
        VB: TM.BufferChunk.NextByte()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextByte
        path: ../TM/BufferChunk.cs
        startLine: 1315
      summary: "\nNexts the byte.\n"
      example: []
      syntax:
        content:
          CSharp: public byte NextByte()
          VB: Public Function NextByte As Byte
        return:
          type: System.Byte
          description: System.Byte.
      overload: TM.BufferChunk.NextByte*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextDouble
      commentId: M:TM.BufferChunk.NextDouble
      language: CSharp
      name:
        CSharp: NextDouble()
        VB: NextDouble()
      nameWithType:
        CSharp: BufferChunk.NextDouble()
        VB: BufferChunk.NextDouble()
      qualifiedName:
        CSharp: TM.BufferChunk.NextDouble()
        VB: TM.BufferChunk.NextDouble()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextDouble
        path: ../TM/BufferChunk.cs
        startLine: 1334
      summary: "\nNexts the Double.\n"
      example: []
      syntax:
        content:
          CSharp: public double NextDouble()
          VB: Public Function NextDouble As Double
        return:
          type: System.Double
          description: System.Double.
      overload: TM.BufferChunk.NextDouble*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextFloat
      commentId: M:TM.BufferChunk.NextFloat
      language: CSharp
      name:
        CSharp: NextFloat()
        VB: NextFloat()
      nameWithType:
        CSharp: BufferChunk.NextFloat()
        VB: BufferChunk.NextFloat()
      qualifiedName:
        CSharp: TM.BufferChunk.NextFloat()
        VB: TM.BufferChunk.NextFloat()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextFloat
        path: ../TM/BufferChunk.cs
        startLine: 1353
      summary: "\nNexts the float.\n"
      example: []
      syntax:
        content:
          CSharp: public float NextFloat()
          VB: Public Function NextFloat As Single
        return:
          type: System.Single
          description: System.Single.
      overload: TM.BufferChunk.NextFloat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextInt16
      commentId: M:TM.BufferChunk.NextInt16
      language: CSharp
      name:
        CSharp: NextInt16()
        VB: NextInt16()
      nameWithType:
        CSharp: BufferChunk.NextInt16()
        VB: BufferChunk.NextInt16()
      qualifiedName:
        CSharp: TM.BufferChunk.NextInt16()
        VB: TM.BufferChunk.NextInt16()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextInt16
        path: ../TM/BufferChunk.cs
        startLine: 1372
      summary: "\nNexts the Int16.\n"
      example: []
      syntax:
        content:
          CSharp: public short NextInt16()
          VB: Public Function NextInt16 As Short
        return:
          type: System.Int16
          description: System.Int16.
      overload: TM.BufferChunk.NextInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextInt32
      commentId: M:TM.BufferChunk.NextInt32
      language: CSharp
      name:
        CSharp: NextInt32()
        VB: NextInt32()
      nameWithType:
        CSharp: BufferChunk.NextInt32()
        VB: BufferChunk.NextInt32()
      qualifiedName:
        CSharp: TM.BufferChunk.NextInt32()
        VB: TM.BufferChunk.NextInt32()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextInt32
        path: ../TM/BufferChunk.cs
        startLine: 1391
      summary: "\nNexts the Int32.\n"
      example: []
      syntax:
        content:
          CSharp: public int NextInt32()
          VB: Public Function NextInt32 As Integer
        return:
          type: System.Int32
          description: System.Int32.
      overload: TM.BufferChunk.NextInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextInt64
      commentId: M:TM.BufferChunk.NextInt64
      language: CSharp
      name:
        CSharp: NextInt64()
        VB: NextInt64()
      nameWithType:
        CSharp: BufferChunk.NextInt64()
        VB: BufferChunk.NextInt64()
      qualifiedName:
        CSharp: TM.BufferChunk.NextInt64()
        VB: TM.BufferChunk.NextInt64()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextInt64
        path: ../TM/BufferChunk.cs
        startLine: 1410
      summary: "\nNexts the Int64.\n"
      example: []
      syntax:
        content:
          CSharp: public long NextInt64()
          VB: Public Function NextInt64 As Long
        return:
          type: System.Int64
          description: System.Int64.
      overload: TM.BufferChunk.NextInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextUInt16
      commentId: M:TM.BufferChunk.NextUInt16
      language: CSharp
      name:
        CSharp: NextUInt16()
        VB: NextUInt16()
      nameWithType:
        CSharp: BufferChunk.NextUInt16()
        VB: BufferChunk.NextUInt16()
      qualifiedName:
        CSharp: TM.BufferChunk.NextUInt16()
        VB: TM.BufferChunk.NextUInt16()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextUInt16
        path: ../TM/BufferChunk.cs
        startLine: 1429
      summary: "\nNexts the UInt16.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort NextUInt16()
          VB: Public Function NextUInt16 As UShort
        return:
          type: System.UInt16
          description: System.UInt16.
      overload: TM.BufferChunk.NextUInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextUInt32
      commentId: M:TM.BufferChunk.NextUInt32
      language: CSharp
      name:
        CSharp: NextUInt32()
        VB: NextUInt32()
      nameWithType:
        CSharp: BufferChunk.NextUInt32()
        VB: BufferChunk.NextUInt32()
      qualifiedName:
        CSharp: TM.BufferChunk.NextUInt32()
        VB: TM.BufferChunk.NextUInt32()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextUInt32
        path: ../TM/BufferChunk.cs
        startLine: 1442
      summary: "\nNexts the UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public uint NextUInt32()
          VB: Public Function NextUInt32 As UInteger
        return:
          type: System.UInt32
          description: System.UInt32.
      overload: TM.BufferChunk.NextUInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextUInt64
      commentId: M:TM.BufferChunk.NextUInt64
      language: CSharp
      name:
        CSharp: NextUInt64()
        VB: NextUInt64()
      nameWithType:
        CSharp: BufferChunk.NextUInt64()
        VB: BufferChunk.NextUInt64()
      qualifiedName:
        CSharp: TM.BufferChunk.NextUInt64()
        VB: TM.BufferChunk.NextUInt64()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextUInt64
        path: ../TM/BufferChunk.cs
        startLine: 1455
      summary: "\nNexts the UInt64.\n"
      example: []
      syntax:
        content:
          CSharp: public ulong NextUInt64()
          VB: Public Function NextUInt64 As ULong
        return:
          type: System.UInt64
          description: System.UInt64.
      overload: TM.BufferChunk.NextUInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.NextUtf8String(System.Int32)
      commentId: M:TM.BufferChunk.NextUtf8String(System.Int32)
      language: CSharp
      name:
        CSharp: NextUtf8String(Int32)
        VB: NextUtf8String(Int32)
      nameWithType:
        CSharp: BufferChunk.NextUtf8String(Int32)
        VB: BufferChunk.NextUtf8String(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.NextUtf8String(System.Int32)
        VB: TM.BufferChunk.NextUtf8String(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextUtf8String
        path: ../TM/BufferChunk.cs
        startLine: 1470
      summary: "\nNexts the UTF8 string.\n"
      example: []
      syntax:
        content:
          CSharp: public string NextUtf8String(int length)
          VB: Public Function NextUtf8String(length As Integer) As String
        parameters:
        - id: length
          type: System.Int32
          description: The length.
        return:
          type: System.String
          description: System.String.
      overload: TM.BufferChunk.NextUtf8String*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.Peek(System.Int32,System.Int32)
      commentId: M:TM.BufferChunk.Peek(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Peek(Int32, Int32)
        VB: Peek(Int32, Int32)
      nameWithType:
        CSharp: BufferChunk.Peek(Int32, Int32)
        VB: BufferChunk.Peek(Int32, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.Peek(System.Int32, System.Int32)
        VB: TM.BufferChunk.Peek(System.Int32, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Peek
        path: ../TM/BufferChunk.cs
        startLine: 1493
      summary: "\nCreate a return BufferChunk containing a subset of the data from the valid data.\n"
      example: []
      syntax:
        content:
          CSharp: public BufferChunk Peek(int index, int length)
          VB: Public Function Peek(index As Integer, length As Integer) As BufferChunk
        parameters:
        - id: index
          type: System.Int32
          description: int index into the valid data area
        - id: length
          type: System.Int32
          description: int length of the data to copy
        return:
          type: TM.BufferChunk
          description: BufferChunk length Length that was extracted from the source BufferChunk
      overload: TM.BufferChunk.Peek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.Reset
      commentId: M:TM.BufferChunk.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: BufferChunk.Reset()
        VB: BufferChunk.Reset()
      qualifiedName:
        CSharp: TM.BufferChunk.Reset()
        VB: TM.BufferChunk.Reset()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Reset
        path: ../TM/BufferChunk.cs
        startLine: 1506
      summary: "\nReset the BufferChunk&apos;s Index and Length pointers to zero so it is ready for reuse as an empty BufferChunk.\nNote that the actual byte[] buffer is not reset, so the memory is not deallocated/reallocated, allowing for\nmore efficient reuse of memory without abusing the GC\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: TM.BufferChunk.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.Reset(System.Int32,System.Int32)
      commentId: M:TM.BufferChunk.Reset(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Reset(Int32, Int32)
        VB: Reset(Int32, Int32)
      nameWithType:
        CSharp: BufferChunk.Reset(Int32, Int32)
        VB: BufferChunk.Reset(Int32, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.Reset(System.Int32, System.Int32)
        VB: TM.BufferChunk.Reset(System.Int32, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Reset
        path: ../TM/BufferChunk.cs
        startLine: 1522
      summary: "\nReset the BufferChunk&apos;s Index and Length pointers to supplied values\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset(int index, int length)
          VB: Public Sub Reset(index As Integer, length As Integer)
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        - id: length
          type: System.Int32
          description: The length.
      overload: TM.BufferChunk.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetByte(System.Int32,System.Byte)
      commentId: M:TM.BufferChunk.SetByte(System.Int32,System.Byte)
      language: CSharp
      name:
        CSharp: SetByte(Int32, Byte)
        VB: SetByte(Int32, Byte)
      nameWithType:
        CSharp: BufferChunk.SetByte(Int32, Byte)
        VB: BufferChunk.SetByte(Int32, Byte)
      qualifiedName:
        CSharp: TM.BufferChunk.SetByte(System.Int32, System.Byte)
        VB: TM.BufferChunk.SetByte(System.Int32, System.Byte)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetByte
        path: ../TM/BufferChunk.cs
        startLine: 1549
      summary: "\nModifies 1 byte inside the BufferChunk\nThis method is included for consistency.  It simply forwards to the indexer.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetByte(int index, byte data)
          VB: Public Sub SetByte(index As Integer, data As Byte)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.Byte
          description: Value to write at index
      overload: TM.BufferChunk.SetByte*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetInt16(System.Int32,System.Int16)
      commentId: M:TM.BufferChunk.SetInt16(System.Int32,System.Int16)
      language: CSharp
      name:
        CSharp: SetInt16(Int32, Int16)
        VB: SetInt16(Int32, Int16)
      nameWithType:
        CSharp: BufferChunk.SetInt16(Int32, Int16)
        VB: BufferChunk.SetInt16(Int32, Int16)
      qualifiedName:
        CSharp: TM.BufferChunk.SetInt16(System.Int32, System.Int16)
        VB: TM.BufferChunk.SetInt16(System.Int32, System.Int16)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetInt16
        path: ../TM/BufferChunk.cs
        startLine: 1565
      summary: "\nModifies 2 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetInt16(int index, short data)
          VB: Public Sub SetInt16(index As Integer, data As Short)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.Int16
          description: Value to write at index
      overload: TM.BufferChunk.SetInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetInt32(System.Int32,System.Int32)
      commentId: M:TM.BufferChunk.SetInt32(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SetInt32(Int32, Int32)
        VB: SetInt32(Int32, Int32)
      nameWithType:
        CSharp: BufferChunk.SetInt32(Int32, Int32)
        VB: BufferChunk.SetInt32(Int32, Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.SetInt32(System.Int32, System.Int32)
        VB: TM.BufferChunk.SetInt32(System.Int32, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetInt32
        path: ../TM/BufferChunk.cs
        startLine: 1588
      summary: "\nModifies 4 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetInt32(int index, int data)
          VB: Public Sub SetInt32(index As Integer, data As Integer)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.Int32
          description: Value to write at index
      overload: TM.BufferChunk.SetInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetInt64(System.Int32,System.Int64)
      commentId: M:TM.BufferChunk.SetInt64(System.Int32,System.Int64)
      language: CSharp
      name:
        CSharp: SetInt64(Int32, Int64)
        VB: SetInt64(Int32, Int64)
      nameWithType:
        CSharp: BufferChunk.SetInt64(Int32, Int64)
        VB: BufferChunk.SetInt64(Int32, Int64)
      qualifiedName:
        CSharp: TM.BufferChunk.SetInt64(System.Int32, System.Int64)
        VB: TM.BufferChunk.SetInt64(System.Int32, System.Int64)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetInt64
        path: ../TM/BufferChunk.cs
        startLine: 1611
      summary: "\nModifies 8 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetInt64(int index, long data)
          VB: Public Sub SetInt64(index As Integer, data As Long)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.Int64
          description: Value to write at index
      overload: TM.BufferChunk.SetInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetPaddedUInt16(System.Int32,System.UInt16)
      commentId: M:TM.BufferChunk.SetPaddedUInt16(System.Int32,System.UInt16)
      language: CSharp
      name:
        CSharp: SetPaddedUInt16(Int32, UInt16)
        VB: SetPaddedUInt16(Int32, UInt16)
      nameWithType:
        CSharp: BufferChunk.SetPaddedUInt16(Int32, UInt16)
        VB: BufferChunk.SetPaddedUInt16(Int32, UInt16)
      qualifiedName:
        CSharp: TM.BufferChunk.SetPaddedUInt16(System.Int32, System.UInt16)
        VB: TM.BufferChunk.SetPaddedUInt16(System.Int32, System.UInt16)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetPaddedUInt16
        path: ../TM/BufferChunk.cs
        startLine: 1626
      summary: "\nSets the padded UInt16.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetPaddedUInt16(int index, ushort data)
          VB: Public Sub SetPaddedUInt16(index As Integer, data As UShort)
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        - id: data
          type: System.UInt16
          description: The data.
      overload: TM.BufferChunk.SetPaddedUInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetPaddedUInt32(System.Int32,System.UInt32)
      commentId: M:TM.BufferChunk.SetPaddedUInt32(System.Int32,System.UInt32)
      language: CSharp
      name:
        CSharp: SetPaddedUInt32(Int32, UInt32)
        VB: SetPaddedUInt32(Int32, UInt32)
      nameWithType:
        CSharp: BufferChunk.SetPaddedUInt32(Int32, UInt32)
        VB: BufferChunk.SetPaddedUInt32(Int32, UInt32)
      qualifiedName:
        CSharp: TM.BufferChunk.SetPaddedUInt32(System.Int32, System.UInt32)
        VB: TM.BufferChunk.SetPaddedUInt32(System.Int32, System.UInt32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetPaddedUInt32
        path: ../TM/BufferChunk.cs
        startLine: 1668
      summary: "\nSets the padded UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetPaddedUInt32(int index, uint data)
          VB: Public Sub SetPaddedUInt32(index As Integer, data As UInteger)
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        - id: data
          type: System.UInt32
          description: The data.
      overload: TM.BufferChunk.SetPaddedUInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetPaddedUInt64(System.Int32,System.UInt64)
      commentId: M:TM.BufferChunk.SetPaddedUInt64(System.Int32,System.UInt64)
      language: CSharp
      name:
        CSharp: SetPaddedUInt64(Int32, UInt64)
        VB: SetPaddedUInt64(Int32, UInt64)
      nameWithType:
        CSharp: BufferChunk.SetPaddedUInt64(Int32, UInt64)
        VB: BufferChunk.SetPaddedUInt64(Int32, UInt64)
      qualifiedName:
        CSharp: TM.BufferChunk.SetPaddedUInt64(System.Int32, System.UInt64)
        VB: TM.BufferChunk.SetPaddedUInt64(System.Int32, System.UInt64)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetPaddedUInt64
        path: ../TM/BufferChunk.cs
        startLine: 1710
      summary: "\nSets the padded UInt64.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetPaddedUInt64(int index, ulong data)
          VB: Public Sub SetPaddedUInt64(index As Integer, data As ULong)
        parameters:
        - id: index
          type: System.Int32
          description: The index.
        - id: data
          type: System.UInt64
          description: The data.
      overload: TM.BufferChunk.SetPaddedUInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetUInt16(System.Int32,System.UInt16)
      commentId: M:TM.BufferChunk.SetUInt16(System.Int32,System.UInt16)
      language: CSharp
      name:
        CSharp: SetUInt16(Int32, UInt16)
        VB: SetUInt16(Int32, UInt16)
      nameWithType:
        CSharp: BufferChunk.SetUInt16(Int32, UInt16)
        VB: BufferChunk.SetUInt16(Int32, UInt16)
      qualifiedName:
        CSharp: TM.BufferChunk.SetUInt16(System.Int32, System.UInt16)
        VB: TM.BufferChunk.SetUInt16(System.Int32, System.UInt16)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetUInt16
        path: ../TM/BufferChunk.cs
        startLine: 1752
      summary: "\nModifies 2 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetUInt16(int index, ushort data)
          VB: Public Sub SetUInt16(index As Integer, data As UShort)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.UInt16
          description: Value to write at index
      overload: TM.BufferChunk.SetUInt16*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetUInt32(System.Int32,System.UInt32)
      commentId: M:TM.BufferChunk.SetUInt32(System.Int32,System.UInt32)
      language: CSharp
      name:
        CSharp: SetUInt32(Int32, UInt32)
        VB: SetUInt32(Int32, UInt32)
      nameWithType:
        CSharp: BufferChunk.SetUInt32(Int32, UInt32)
        VB: BufferChunk.SetUInt32(Int32, UInt32)
      qualifiedName:
        CSharp: TM.BufferChunk.SetUInt32(System.Int32, System.UInt32)
        VB: TM.BufferChunk.SetUInt32(System.Int32, System.UInt32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetUInt32
        path: ../TM/BufferChunk.cs
        startLine: 1767
      summary: "\nModifies 4 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetUInt32(int index, uint data)
          VB: Public Sub SetUInt32(index As Integer, data As UInteger)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.UInt32
          description: Value to write at index
      overload: TM.BufferChunk.SetUInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetUInt64(System.Int32,System.UInt64)
      commentId: M:TM.BufferChunk.SetUInt64(System.Int32,System.UInt64)
      language: CSharp
      name:
        CSharp: SetUInt64(Int32, UInt64)
        VB: SetUInt64(Int32, UInt64)
      nameWithType:
        CSharp: BufferChunk.SetUInt64(Int32, UInt64)
        VB: BufferChunk.SetUInt64(Int32, UInt64)
      qualifiedName:
        CSharp: TM.BufferChunk.SetUInt64(System.Int32, System.UInt64)
        VB: TM.BufferChunk.SetUInt64(System.Int32, System.UInt64)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetUInt64
        path: ../TM/BufferChunk.cs
        startLine: 1782
      summary: "\nModifies 8 bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetUInt64(int index, ulong data)
          VB: Public Sub SetUInt64(index As Integer, data As ULong)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.UInt64
          description: Value to write at index
      overload: TM.BufferChunk.SetUInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.SetUTF8String(System.Int32,System.String)
      commentId: M:TM.BufferChunk.SetUTF8String(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: SetUTF8String(Int32, String)
        VB: SetUTF8String(Int32, String)
      nameWithType:
        CSharp: BufferChunk.SetUTF8String(Int32, String)
        VB: BufferChunk.SetUTF8String(Int32, String)
      qualifiedName:
        CSharp: TM.BufferChunk.SetUTF8String(System.Int32, System.String)
        VB: TM.BufferChunk.SetUTF8String(System.Int32, System.String)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SetUTF8String
        path: ../TM/BufferChunk.cs
        startLine: 1805
      summary: "\nModifies UTF8.GetBytes(data) bytes inside the BufferChunk\n"
      example: []
      syntax:
        content:
          CSharp: public void SetUTF8String(int index, string data)
          VB: Public Sub SetUTF8String(index As Integer, data As String)
        parameters:
        - id: index
          type: System.Int32
          description: Offset into the valid data
        - id: data
          type: System.String
          description: Value to write at index
      overload: TM.BufferChunk.SetUTF8String*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.BufferChunk.Skip(System.Int32)
      commentId: M:TM.BufferChunk.Skip(System.Int32)
      language: CSharp
      name:
        CSharp: Skip(Int32)
        VB: Skip(Int32)
      nameWithType:
        CSharp: BufferChunk.Skip(Int32)
        VB: BufferChunk.Skip(Int32)
      qualifiedName:
        CSharp: TM.BufferChunk.Skip(System.Int32)
        VB: TM.BufferChunk.Skip(System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Skip
        path: ../TM/BufferChunk.cs
        startLine: 1818
      summary: "\nSkips the specified length.\n"
      example: []
      syntax:
        content:
          CSharp: public void Skip(int len)
          VB: Public Sub Skip(len As Integer)
        parameters:
        - id: len
          type: System.Int32
          description: The length.
      overload: TM.BufferChunk.Skip*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      System.IDisposable: 
      System.ICloneable: 
  - id: TM.InsufficientDataException
    commentId: T:TM.InsufficientDataException
    language: CSharp
    name:
      CSharp: InsufficientDataException
      VB: InsufficientDataException
    nameWithType:
      CSharp: InsufficientDataException
      VB: InsufficientDataException
    qualifiedName:
      CSharp: TM.InsufficientDataException
      VB: TM.InsufficientDataException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/BufferChunk.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: InsufficientDataException
      path: ../TM/BufferChunk.cs
      startLine: 2236
    summary: "\nClass InsufficientDataException\nRaised when requesting more data than current buffer holds\n<br />Implements the <xref href=\"System.ApplicationException\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InsufficientDataException : ApplicationException, ISerializable'
        VB: >-
          Public Class InsufficientDataException

              Inherits ApplicationException

              Implements ISerializable
    seealso:
    - linkId: System.ApplicationException
      commentId: T:System.ApplicationException
    - linkId: System.ApplicationException
      commentId: T:System.ApplicationException
    inheritance:
    - System.Object
    - System.Exception
    - System.ApplicationException
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.InsufficientDataException.#ctor
      commentId: M:TM.InsufficientDataException.#ctor
      language: CSharp
      name:
        CSharp: InsufficientDataException()
        VB: InsufficientDataException()
      nameWithType:
        CSharp: InsufficientDataException.InsufficientDataException()
        VB: InsufficientDataException.InsufficientDataException()
      qualifiedName:
        CSharp: TM.InsufficientDataException.InsufficientDataException()
        VB: TM.InsufficientDataException.InsufficientDataException()
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2246
      summary: "\nInitializes a new instance of the <xref href=\"TM.InsufficientDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public InsufficientDataException()
          VB: Public Sub New
      overload: TM.InsufficientDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.InsufficientDataException: 
    - id: TM.InsufficientDataException.#ctor(System.String)
      commentId: M:TM.InsufficientDataException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: InsufficientDataException(String)
        VB: InsufficientDataException(String)
      nameWithType:
        CSharp: InsufficientDataException.InsufficientDataException(String)
        VB: InsufficientDataException.InsufficientDataException(String)
      qualifiedName:
        CSharp: TM.InsufficientDataException.InsufficientDataException(System.String)
        VB: TM.InsufficientDataException.InsufficientDataException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2258
      summary: "\nInitializes a new instance of the <xref href=\"TM.InsufficientDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public InsufficientDataException(string msg)
          VB: Public Sub New(msg As String)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
      overload: TM.InsufficientDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.InsufficientDataException: 
    - id: TM.InsufficientDataException.#ctor(System.String,System.Exception)
      commentId: M:TM.InsufficientDataException.#ctor(System.String,System.Exception)
      language: CSharp
      name:
        CSharp: InsufficientDataException(String, Exception)
        VB: InsufficientDataException(String, Exception)
      nameWithType:
        CSharp: InsufficientDataException.InsufficientDataException(String, Exception)
        VB: InsufficientDataException.InsufficientDataException(String, Exception)
      qualifiedName:
        CSharp: TM.InsufficientDataException.InsufficientDataException(System.String, System.Exception)
        VB: TM.InsufficientDataException.InsufficientDataException(System.String, System.Exception)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2272
      summary: "\nInitializes a new instance of the <xref href=\"TM.InsufficientDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public InsufficientDataException(string msg, Exception inner)
          VB: Public Sub New(msg As String, inner As Exception)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
        - id: inner
          type: System.Exception
          description: The inner.
      overload: TM.InsufficientDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.InsufficientDataException: 
    references:
      System.ApplicationException: 
  - id: TM.InsufficientSpaceException
    commentId: T:TM.InsufficientSpaceException
    language: CSharp
    name:
      CSharp: InsufficientSpaceException
      VB: InsufficientSpaceException
    nameWithType:
      CSharp: InsufficientSpaceException
      VB: InsufficientSpaceException
    qualifiedName:
      CSharp: TM.InsufficientSpaceException
      VB: TM.InsufficientSpaceException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/BufferChunk.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: InsufficientSpaceException
      path: ../TM/BufferChunk.cs
      startLine: 2290
    summary: "\nClass InsufficientSpaceException\nRaised when trying to add more data than current buffer can hold\n<br />Implements the <xref href=\"System.ApplicationException\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InsufficientSpaceException : ApplicationException, ISerializable'
        VB: >-
          Public Class InsufficientSpaceException

              Inherits ApplicationException

              Implements ISerializable
    seealso:
    - linkId: System.ApplicationException
      commentId: T:System.ApplicationException
    - linkId: System.ApplicationException
      commentId: T:System.ApplicationException
    inheritance:
    - System.Object
    - System.Exception
    - System.ApplicationException
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.InsufficientSpaceException.#ctor
      commentId: M:TM.InsufficientSpaceException.#ctor
      language: CSharp
      name:
        CSharp: InsufficientSpaceException()
        VB: InsufficientSpaceException()
      nameWithType:
        CSharp: InsufficientSpaceException.InsufficientSpaceException()
        VB: InsufficientSpaceException.InsufficientSpaceException()
      qualifiedName:
        CSharp: TM.InsufficientSpaceException.InsufficientSpaceException()
        VB: TM.InsufficientSpaceException.InsufficientSpaceException()
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2300
      summary: "\nInitializes a new instance of the <xref href=\"TM.InsufficientSpaceException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public InsufficientSpaceException()
          VB: Public Sub New
      overload: TM.InsufficientSpaceException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.InsufficientSpaceException: 
    - id: TM.InsufficientSpaceException.#ctor(System.String)
      commentId: M:TM.InsufficientSpaceException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: InsufficientSpaceException(String)
        VB: InsufficientSpaceException(String)
      nameWithType:
        CSharp: InsufficientSpaceException.InsufficientSpaceException(String)
        VB: InsufficientSpaceException.InsufficientSpaceException(String)
      qualifiedName:
        CSharp: TM.InsufficientSpaceException.InsufficientSpaceException(System.String)
        VB: TM.InsufficientSpaceException.InsufficientSpaceException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2312
      summary: "\nInitializes a new instance of the <xref href=\"TM.InsufficientSpaceException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public InsufficientSpaceException(string msg)
          VB: Public Sub New(msg As String)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
      overload: TM.InsufficientSpaceException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.InsufficientSpaceException: 
    - id: TM.InsufficientSpaceException.#ctor(System.String,System.Exception)
      commentId: M:TM.InsufficientSpaceException.#ctor(System.String,System.Exception)
      language: CSharp
      name:
        CSharp: InsufficientSpaceException(String, Exception)
        VB: InsufficientSpaceException(String, Exception)
      nameWithType:
        CSharp: InsufficientSpaceException.InsufficientSpaceException(String, Exception)
        VB: InsufficientSpaceException.InsufficientSpaceException(String, Exception)
      qualifiedName:
        CSharp: TM.InsufficientSpaceException.InsufficientSpaceException(System.String, System.Exception)
        VB: TM.InsufficientSpaceException.InsufficientSpaceException(System.String, System.Exception)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2326
      summary: "\nInitializes a new instance of the <xref href=\"TM.InsufficientSpaceException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public InsufficientSpaceException(string msg, Exception inner)
          VB: Public Sub New(msg As String, inner As Exception)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
        - id: inner
          type: System.Exception
          description: The inner.
      overload: TM.InsufficientSpaceException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.InsufficientSpaceException: 
    references:
      System.ApplicationException: 
  - id: TM.NoDataException
    commentId: T:TM.NoDataException
    language: CSharp
    name:
      CSharp: NoDataException
      VB: NoDataException
    nameWithType:
      CSharp: NoDataException
      VB: NoDataException
    qualifiedName:
      CSharp: TM.NoDataException
      VB: TM.NoDataException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/BufferChunk.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: NoDataException
      path: ../TM/BufferChunk.cs
      startLine: 2344
    summary: "\nClass NoDataException\nRaised when requesting more data than current buffer holds\n<br />Implements the <xref href=\"System.ApplicationException\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class NoDataException : ApplicationException, ISerializable'
        VB: >-
          Public Class NoDataException

              Inherits ApplicationException

              Implements ISerializable
    seealso:
    - linkId: System.ApplicationException
      commentId: T:System.ApplicationException
    - linkId: System.ApplicationException
      commentId: T:System.ApplicationException
    inheritance:
    - System.Object
    - System.Exception
    - System.ApplicationException
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.NoDataException.#ctor
      commentId: M:TM.NoDataException.#ctor
      language: CSharp
      name:
        CSharp: NoDataException()
        VB: NoDataException()
      nameWithType:
        CSharp: NoDataException.NoDataException()
        VB: NoDataException.NoDataException()
      qualifiedName:
        CSharp: TM.NoDataException.NoDataException()
        VB: TM.NoDataException.NoDataException()
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2351
      summary: "\nInitializes a new instance of the <xref href=\"TM.NoDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public NoDataException()
          VB: Public Sub New
      overload: TM.NoDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.NoDataException: 
    - id: TM.NoDataException.#ctor(System.String)
      commentId: M:TM.NoDataException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: NoDataException(String)
        VB: NoDataException(String)
      nameWithType:
        CSharp: NoDataException.NoDataException(String)
        VB: NoDataException.NoDataException(String)
      qualifiedName:
        CSharp: TM.NoDataException.NoDataException(System.String)
        VB: TM.NoDataException.NoDataException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2359
      summary: "\nInitializes a new instance of the <xref href=\"TM.NoDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public NoDataException(string msg)
          VB: Public Sub New(msg As String)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
      overload: TM.NoDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.NoDataException: 
    - id: TM.NoDataException.#ctor(System.String,System.Exception)
      commentId: M:TM.NoDataException.#ctor(System.String,System.Exception)
      language: CSharp
      name:
        CSharp: NoDataException(String, Exception)
        VB: NoDataException(String, Exception)
      nameWithType:
        CSharp: NoDataException.NoDataException(String, Exception)
        VB: NoDataException.NoDataException(String, Exception)
      qualifiedName:
        CSharp: TM.NoDataException.NoDataException(System.String, System.Exception)
        VB: TM.NoDataException.NoDataException(System.String, System.Exception)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/BufferChunk.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/BufferChunk.cs
        startLine: 2368
      summary: "\nInitializes a new instance of the <xref href=\"TM.NoDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public NoDataException(string msg, Exception inner)
          VB: Public Sub New(msg As String, inner As Exception)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
        - id: inner
          type: System.Exception
          description: The inner.
      overload: TM.NoDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.NoDataException: 
    references:
      System.ApplicationException: 
  - id: TM.Extensions
    commentId: T:TM.Extensions
    language: CSharp
    name:
      CSharp: Extensions
      VB: Extensions
    nameWithType:
      CSharp: Extensions
      VB: Extensions
    qualifiedName:
      CSharp: TM.Extensions
      VB: TM.Extensions
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/Extensions.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: Extensions
      path: ../TM/Extensions.cs
      startLine: 23
    summary: "\nClass Extensions\n"
    example: []
    syntax:
      content:
        CSharp: public static class Extensions
        VB: Public Module Extensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
      commentId: M:TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
      language: CSharp
      name:
        CSharp: Add(BufferChunk, TMPacketHeader)
        VB: Add(BufferChunk, TMPacketHeader)
      nameWithType:
        CSharp: Extensions.Add(BufferChunk, TMPacketHeader)
        VB: Extensions.Add(BufferChunk, TMPacketHeader)
      qualifiedName:
        CSharp: TM.Extensions.Add(TM.BufferChunk, TM.TMPacketHeader)
        VB: TM.Extensions.Add(TM.BufferChunk, TM.TMPacketHeader)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Add
        path: ../TM/Extensions.cs
        startLine: 33
      summary: "\nAdds the specified header.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk Add(this BufferChunk buf, TMPacketHeader header)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Add(buf As BufferChunk, header As TMPacketHeader) As BufferChunk
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        - id: header
          type: TM.TMPacketHeader
          description: The header.
        return:
          type: TM.BufferChunk
          description: BufferChunk.
      overload: TM.Extensions.Add*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
      commentId: M:TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
      language: CSharp
      name:
        CSharp: Add(BufferChunk, PlanSpot)
        VB: Add(BufferChunk, PlanSpot)
      nameWithType:
        CSharp: Extensions.Add(BufferChunk, PlanSpot)
        VB: Extensions.Add(BufferChunk, PlanSpot)
      qualifiedName:
        CSharp: TM.Extensions.Add(TM.BufferChunk, TM.PlanSpot)
        VB: TM.Extensions.Add(TM.BufferChunk, TM.PlanSpot)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Add
        path: ../TM/Extensions.cs
        startLine: 53
      summary: "\nAdds the specified plan.\n"
      example: []
      syntax:
        content:
          CSharp: public static BufferChunk Add(this BufferChunk buf, PlanSpot plan)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Add(buf As BufferChunk, plan As PlanSpot) As BufferChunk
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        - id: plan
          type: TM.PlanSpot
          description: The plan.
        return:
          type: TM.BufferChunk
          description: BufferChunk.
      overload: TM.Extensions.Add*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ByteArrayToStructure(System.Byte[],System.Object,System.Int32)
      commentId: M:TM.Extensions.ByteArrayToStructure(System.Byte[],System.Object,System.Int32)
      language: CSharp
      name:
        CSharp: ByteArrayToStructure(Byte[], Object, Int32)
        VB: ByteArrayToStructure(Byte(), Object, Int32)
      nameWithType:
        CSharp: Extensions.ByteArrayToStructure(Byte[], Object, Int32)
        VB: Extensions.ByteArrayToStructure(Byte(), Object, Int32)
      qualifiedName:
        CSharp: TM.Extensions.ByteArrayToStructure(System.Byte[], System.Object, System.Int32)
        VB: TM.Extensions.ByteArrayToStructure(System.Byte(), System.Object, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ByteArrayToStructure
        path: ../TM/Extensions.cs
        startLine: 72
      summary: "\nBytes the array to structure.\n"
      example: []
      syntax:
        content:
          CSharp: public static object ByteArrayToStructure(this byte[] bytearray, object structureObj, int position)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ByteArrayToStructure(bytearray As Byte(), structureObj As Object, position As Integer) As Object
        parameters:
        - id: bytearray
          type: System.Byte[]
          description: The bytearray.
        - id: structureObj
          type: System.Object
          description: The structure object.
        - id: position
          type: System.Int32
          description: The position.
        return:
          type: System.Object
          description: System.Object.
      overload: TM.Extensions.ByteArrayToStructure*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.Copy(System.Double[])
      commentId: M:TM.Extensions.Copy(System.Double[])
      language: CSharp
      name:
        CSharp: Copy(Double[])
        VB: Copy(Double())
      nameWithType:
        CSharp: Extensions.Copy(Double[])
        VB: Extensions.Copy(Double())
      qualifiedName:
        CSharp: TM.Extensions.Copy(System.Double[])
        VB: TM.Extensions.Copy(System.Double())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Copy
        path: ../TM/Extensions.cs
        startLine: 87
      summary: "\nCopies the specified hist.\n"
      example: []
      syntax:
        content:
          CSharp: public static double[] Copy(this double[] hist)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Copy(hist As Double()) As Double()
        parameters:
        - id: hist
          type: System.Double[]
          description: The hist.
        return:
          type: System.Double[]
          description: System.Double[][].
      overload: TM.Extensions.Copy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.Copy(System.IO.Stream,System.IO.Stream,System.Action{System.IO.Stream,System.IO.Stream,System.Exception})
      commentId: M:TM.Extensions.Copy(System.IO.Stream,System.IO.Stream,System.Action{System.IO.Stream,System.IO.Stream,System.Exception})
      language: CSharp
      name:
        CSharp: Copy(Stream, Stream, Action<Stream, Stream, Exception>)
        VB: Copy(Stream, Stream, Action(Of Stream, Stream, Exception))
      nameWithType:
        CSharp: Extensions.Copy(Stream, Stream, Action<Stream, Stream, Exception>)
        VB: Extensions.Copy(Stream, Stream, Action(Of Stream, Stream, Exception))
      qualifiedName:
        CSharp: TM.Extensions.Copy(System.IO.Stream, System.IO.Stream, System.Action<System.IO.Stream, System.IO.Stream, System.Exception>)
        VB: TM.Extensions.Copy(System.IO.Stream, System.IO.Stream, System.Action(Of System.IO.Stream, System.IO.Stream, System.Exception))
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Copy
        path: ../TM/Extensions.cs
        startLine: 107
      summary: "\nThis is not suitable for large files because the SEND() buffer may get filled up and throw an exception\nif you attempt to write to it. You should change this to use the strongly typed networkstream and ensure\nyou have enough room to send data\n"
      example: []
      syntax:
        content:
          CSharp: public static void Copy(this Stream source, Stream destination, Action<Stream, Stream, Exception> completed = null)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub Copy(source As Stream, destination As Stream, completed As Action(Of Stream, Stream, Exception) = Nothing)
        parameters:
        - id: source
          type: System.IO.Stream
          description: The source.
        - id: destination
          type: System.IO.Stream
          description: The destination.
        - id: completed
          type: System.Action{System.IO.Stream,System.IO.Stream,System.Exception}
          description: The completed.
      overload: TM.Extensions.Copy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.Description(System.Enum)
      commentId: M:TM.Extensions.Description(System.Enum)
      language: CSharp
      name:
        CSharp: Description(Enum)
        VB: Description(Enum)
      nameWithType:
        CSharp: Extensions.Description(Enum)
        VB: Extensions.Description(Enum)
      qualifiedName:
        CSharp: TM.Extensions.Description(System.Enum)
        VB: TM.Extensions.Description(System.Enum)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Description
        path: ../TM/Extensions.cs
        startLine: 136
      summary: "\nDescriptions the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public static string Description(this Enum value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Description(value As  Enum) As String
        parameters:
        - id: value
          type: System.Enum
          description: The value.
        return:
          type: System.String
          description: System.String.
      overload: TM.Extensions.Description*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.MC_PT_ILH(TM.BufferChunk)
      commentId: M:TM.Extensions.MC_PT_ILH(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: MC_PT_ILH(BufferChunk)
        VB: MC_PT_ILH(BufferChunk)
      nameWithType:
        CSharp: Extensions.MC_PT_ILH(BufferChunk)
        VB: Extensions.MC_PT_ILH(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.MC_PT_ILH(TM.BufferChunk)
        VB: TM.Extensions.MC_PT_ILH(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MC_PT_ILH
        path: ../TM/Extensions.cs
        startLine: 155
      summary: "\nMcs the pt ilh.\n"
      example: []
      syntax:
        content:
          CSharp: public static MC_PT_ILH MC_PT_ILH(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MC_PT_ILH(buf As BufferChunk) As MC_PT_ILH
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        return:
          type: TMSrv.MC_PT_ILH
          description: MC_PT_ILH.
      overload: TM.Extensions.MC_PT_ILH*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.MCS_State(TM.BufferChunk)
      commentId: M:TM.Extensions.MCS_State(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: MCS_State(BufferChunk)
        VB: MCS_State(BufferChunk)
      nameWithType:
        CSharp: Extensions.MCS_State(BufferChunk)
        VB: Extensions.MCS_State(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.MCS_State(TM.BufferChunk)
        VB: TM.Extensions.MCS_State(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MCS_State
        path: ../TM/Extensions.cs
        startLine: 180
      summary: "\nNexts the server state.\n"
      example: []
      syntax:
        content:
          CSharp: public static MCS_State_topass MCS_State(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MCS_State(buf As BufferChunk) As MCS_State_topass
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        return:
          type: TMSrv.MCS_State_topass
          description: System.Nullable&lt;MCS_State_topass>.
      overload: TM.Extensions.MCS_State*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextFullSpot(TM.BufferChunk)
      commentId: M:TM.Extensions.NextFullSpot(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextFullSpot(BufferChunk)
        VB: NextFullSpot(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextFullSpot(BufferChunk)
        VB: Extensions.NextFullSpot(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextFullSpot(TM.BufferChunk)
        VB: TM.Extensions.NextFullSpot(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextFullSpot
        path: ../TM/Extensions.cs
        startLine: 203
      summary: "\nNexts the full spot.\n"
      example: []
      syntax:
        content:
          CSharp: public static PlanSpotFull? NextFullSpot(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextFullSpot(buf As BufferChunk) As PlanSpotFull?
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        return:
          type: System.Nullable{TM.PlanSpotFull}
          description: System.Nullable&lt;PlanSpotFull>.
      overload: TM.Extensions.NextFullSpot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextPacketHeader(TM.BufferChunk)
      commentId: M:TM.Extensions.NextPacketHeader(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextPacketHeader(BufferChunk)
        VB: NextPacketHeader(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextPacketHeader(BufferChunk)
        VB: Extensions.NextPacketHeader(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextPacketHeader(TM.BufferChunk)
        VB: TM.Extensions.NextPacketHeader(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextPacketHeader
        path: ../TM/Extensions.cs
        startLine: 234
      summary: "\nNexts the TMPacketHeader\n"
      example: []
      syntax:
        content:
          CSharp: public static TMPacketHeader NextPacketHeader(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextPacketHeader(buf As BufferChunk) As TMPacketHeader
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buffer chunk.
        return:
          type: TM.TMPacketHeader
          description: TMPacketHeader.
      overload: TM.Extensions.NextPacketHeader*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
      commentId: M:TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextPlanSpotResult(BufferChunk)
        VB: NextPlanSpotResult(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextPlanSpotResult(BufferChunk)
        VB: Extensions.NextPlanSpotResult(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
        VB: TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextPlanSpotResult
        path: ../TM/Extensions.cs
        startLine: 264
      summary: "\nNexts the plan spot result.\n"
      example: []
      syntax:
        content:
          CSharp: public static PlanSpotResult? NextPlanSpotResult(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextPlanSpotResult(buf As BufferChunk) As PlanSpotResult?
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        return:
          type: System.Nullable{TM.PlanSpotResult}
          description: System.Nullable&lt;PlanSpotResult>.
      overload: TM.Extensions.NextPlanSpotResult*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextResultSpot(TM.BufferChunk)
      commentId: M:TM.Extensions.NextResultSpot(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextResultSpot(BufferChunk)
        VB: NextResultSpot(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextResultSpot(BufferChunk)
        VB: Extensions.NextResultSpot(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextResultSpot(TM.BufferChunk)
        VB: TM.Extensions.NextResultSpot(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextResultSpot
        path: ../TM/Extensions.cs
        startLine: 287
      summary: "\nNexts the result spot.\n"
      example: []
      syntax:
        content:
          CSharp: public static PlanSpotResult? NextResultSpot(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextResultSpot(buf As BufferChunk) As PlanSpotResult?
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        return:
          type: System.Nullable{TM.PlanSpotResult}
          description: System.Nullable&lt;PlanSpotResult>.
      overload: TM.Extensions.NextResultSpot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextSpot(TM.BufferChunk)
      commentId: M:TM.Extensions.NextSpot(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextSpot(BufferChunk)
        VB: NextSpot(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextSpot(BufferChunk)
        VB: Extensions.NextSpot(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextSpot(TM.BufferChunk)
        VB: TM.Extensions.NextSpot(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextSpot
        path: ../TM/Extensions.cs
        startLine: 310
      summary: "\nNexts the PlanSpot.\n"
      example: []
      syntax:
        content:
          CSharp: public static PlanSpot? NextSpot(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextSpot(buf As BufferChunk) As PlanSpot?
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buffer chunk.
        return:
          type: System.Nullable{TM.PlanSpot}
          description: PlanSpot.
      overload: TM.Extensions.NextSpot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextSpotFull(TM.BufferChunk)
      commentId: M:TM.Extensions.NextSpotFull(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextSpotFull(BufferChunk)
        VB: NextSpotFull(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextSpotFull(BufferChunk)
        VB: Extensions.NextSpotFull(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextSpotFull(TM.BufferChunk)
        VB: TM.Extensions.NextSpotFull(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextSpotFull
        path: ../TM/Extensions.cs
        startLine: 333
      summary: "\nNexts the PlanSpotFull.\n"
      example: []
      syntax:
        content:
          CSharp: public static PlanSpotFull? NextSpotFull(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextSpotFull(buf As BufferChunk) As PlanSpotFull?
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buffer chunk.
        return:
          type: System.Nullable{TM.PlanSpotFull}
          description: PlanSpotFull.
      overload: TM.Extensions.NextSpotFull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.NextSpotResult(TM.BufferChunk)
      commentId: M:TM.Extensions.NextSpotResult(TM.BufferChunk)
      language: CSharp
      name:
        CSharp: NextSpotResult(BufferChunk)
        VB: NextSpotResult(BufferChunk)
      nameWithType:
        CSharp: Extensions.NextSpotResult(BufferChunk)
        VB: Extensions.NextSpotResult(BufferChunk)
      qualifiedName:
        CSharp: TM.Extensions.NextSpotResult(TM.BufferChunk)
        VB: TM.Extensions.NextSpotResult(TM.BufferChunk)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NextSpotResult
        path: ../TM/Extensions.cs
        startLine: 363
      summary: "\nNexts the spot result.\n"
      example: []
      syntax:
        content:
          CSharp: public static PlanSpotResult? NextSpotResult(this BufferChunk buf)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextSpotResult(buf As BufferChunk) As PlanSpotResult?
        parameters:
        - id: buf
          type: TM.BufferChunk
          description: The buf.
        return:
          type: System.Nullable{TM.PlanSpotResult}
          description: System.Nullable&lt;PlanSpotResult>.
      overload: TM.Extensions.NextSpotResult*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.SplitString(System.String,System.Int32)
      commentId: M:TM.Extensions.SplitString(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: SplitString(String, Int32)
        VB: SplitString(String, Int32)
      nameWithType:
        CSharp: Extensions.SplitString(String, Int32)
        VB: Extensions.SplitString(String, Int32)
      qualifiedName:
        CSharp: TM.Extensions.SplitString(System.String, System.Int32)
        VB: TM.Extensions.SplitString(System.String, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SplitString
        path: ../TM/Extensions.cs
        startLine: 386
      summary: "\nSplits the string.\n"
      example: []
      syntax:
        content:
          CSharp: public static IEnumerable<string> SplitString(this string s, int length)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function SplitString(s As String, length As Integer) As IEnumerable(Of String)
        parameters:
        - id: s
          type: System.String
          description: The s.
        - id: length
          type: System.Int32
          description: The length.
        return:
          type: System.Collections.Generic.IEnumerable{System.String}
          description: IEnumerable&lt;System.String>.
      overload: TM.Extensions.SplitString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ToBool(System.String,System.Boolean)
      commentId: M:TM.Extensions.ToBool(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: ToBool(String, Boolean)
        VB: ToBool(String, Boolean)
      nameWithType:
        CSharp: Extensions.ToBool(String, Boolean)
        VB: Extensions.ToBool(String, Boolean)
      qualifiedName:
        CSharp: TM.Extensions.ToBool(System.String, System.Boolean)
        VB: TM.Extensions.ToBool(System.String, System.Boolean)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToBool
        path: ../TM/Extensions.cs
        startLine: 406
      summary: "\nTo the bool.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool ToBool(this string str, bool def)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToBool(str As String, def As Boolean) As Boolean
        parameters:
        - id: str
          type: System.String
          description: The string.
        - id: def
          type: System.Boolean
          description: if set to <code>true</code> [def].
        return:
          type: System.Boolean
          description: <code>true</code> if XXXX, <code>false</code> otherwise
      overload: TM.Extensions.ToBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ToByte(System.Int16[])
      commentId: M:TM.Extensions.ToByte(System.Int16[])
      language: CSharp
      name:
        CSharp: ToByte(Int16[])
        VB: ToByte(Int16())
      nameWithType:
        CSharp: Extensions.ToByte(Int16[])
        VB: Extensions.ToByte(Int16())
      qualifiedName:
        CSharp: TM.Extensions.ToByte(System.Int16[])
        VB: TM.Extensions.ToByte(System.Int16())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToByte
        path: ../TM/Extensions.cs
        startLine: 417
      summary: "\nConverts the 16bit to to 8bit array.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ToByte(this short[] arr)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToByte(arr As Short()) As Byte()
        parameters:
        - id: arr
          type: System.Int16[]
          description: The arr.
        return:
          type: System.Byte[]
          description: System.Byte[][].
      overload: TM.Extensions.ToByte*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ToDegrees(System.Single)
      commentId: M:TM.Extensions.ToDegrees(System.Single)
      language: CSharp
      name:
        CSharp: ToDegrees(Single)
        VB: ToDegrees(Single)
      nameWithType:
        CSharp: Extensions.ToDegrees(Single)
        VB: Extensions.ToDegrees(Single)
      qualifiedName:
        CSharp: TM.Extensions.ToDegrees(System.Single)
        VB: TM.Extensions.ToDegrees(System.Single)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToDegrees
        path: ../TM/Extensions.cs
        startLine: 435
      summary: "\nConverts to degrees.\n"
      example: []
      syntax:
        content:
          CSharp: public static float ToDegrees(this float radians)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToDegrees(radians As Single) As Single
        parameters:
        - id: radians
          type: System.Single
          description: The radians.
        return:
          type: System.Single
          description: System.Single.
      overload: TM.Extensions.ToDegrees*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ToDouble(System.String,System.Double)
      commentId: M:TM.Extensions.ToDouble(System.String,System.Double)
      language: CSharp
      name:
        CSharp: ToDouble(String, Double)
        VB: ToDouble(String, Double)
      nameWithType:
        CSharp: Extensions.ToDouble(String, Double)
        VB: Extensions.ToDouble(String, Double)
      qualifiedName:
        CSharp: TM.Extensions.ToDouble(System.String, System.Double)
        VB: TM.Extensions.ToDouble(System.String, System.Double)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToDouble
        path: ../TM/Extensions.cs
        startLine: 447
      summary: "\nTo the double.\n"
      example: []
      syntax:
        content:
          CSharp: public static double ToDouble(this string str, double def)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToDouble(str As String, def As Double) As Double
        parameters:
        - id: str
          type: System.String
          description: The string.
        - id: def
          type: System.Double
          description: The def.
        return:
          type: System.Double
          description: System.Double.
      overload: TM.Extensions.ToDouble*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ToFloat(System.String,System.Single)
      commentId: M:TM.Extensions.ToFloat(System.String,System.Single)
      language: CSharp
      name:
        CSharp: ToFloat(String, Single)
        VB: ToFloat(String, Single)
      nameWithType:
        CSharp: Extensions.ToFloat(String, Single)
        VB: Extensions.ToFloat(String, Single)
      qualifiedName:
        CSharp: TM.Extensions.ToFloat(System.String, System.Single)
        VB: TM.Extensions.ToFloat(System.String, System.Single)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToFloat
        path: ../TM/Extensions.cs
        startLine: 459
      summary: "\nTo the float.\n"
      example: []
      syntax:
        content:
          CSharp: public static float ToFloat(this string str, float def)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToFloat(str As String, def As Single) As Single
        parameters:
        - id: str
          type: System.String
          description: The string.
        - id: def
          type: System.Single
          description: The def.
        return:
          type: System.Single
          description: System.Single.
      overload: TM.Extensions.ToFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.ToInt(System.String,System.Int32)
      commentId: M:TM.Extensions.ToInt(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: ToInt(String, Int32)
        VB: ToInt(String, Int32)
      nameWithType:
        CSharp: Extensions.ToInt(String, Int32)
        VB: Extensions.ToInt(String, Int32)
      qualifiedName:
        CSharp: TM.Extensions.ToInt(System.String, System.Int32)
        VB: TM.Extensions.ToInt(System.String, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToInt
        path: ../TM/Extensions.cs
        startLine: 471
      summary: "\nTo the int.\n"
      example: []
      syntax:
        content:
          CSharp: public static int ToInt(this string str, int def)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToInt(str As String, def As Integer) As Integer
        parameters:
        - id: str
          type: System.String
          description: The string.
        - id: def
          type: System.Int32
          description: The def.
        return:
          type: System.Int32
          description: System.Int32.
      overload: TM.Extensions.ToInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.Extensions.WriteMultiLine(System.String,System.Int32)
      commentId: M:TM.Extensions.WriteMultiLine(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: WriteMultiLine(String, Int32)
        VB: WriteMultiLine(String, Int32)
      nameWithType:
        CSharp: Extensions.WriteMultiLine(String, Int32)
        VB: Extensions.WriteMultiLine(String, Int32)
      qualifiedName:
        CSharp: TM.Extensions.WriteMultiLine(System.String, System.Int32)
        VB: TM.Extensions.WriteMultiLine(System.String, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/Extensions.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WriteMultiLine
        path: ../TM/Extensions.cs
        startLine: 482
      summary: "\nWrites the multi line.\n"
      example: []
      syntax:
        content:
          CSharp: public static void WriteMultiLine(this string lstring, int len = 110)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub WriteMultiLine(lstring As String, len As Integer = 110)
        parameters:
        - id: lstring
          type: System.String
          description: The lstring.
        - id: len
          type: System.Int32
          description: The length.
      overload: TM.Extensions.WriteMultiLine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: TM.Globals
    commentId: T:TM.Globals
    language: CSharp
    name:
      CSharp: Globals
      VB: Globals
    nameWithType:
      CSharp: Globals
      VB: Globals
    qualifiedName:
      CSharp: TM.Globals
      VB: TM.Globals
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: Globals
      path: ../TM/TMClient.cs
      startLine: 28
    summary: "\nClass Globals == Default values and global objects\n"
    example: []
    syntax:
      content:
        CSharp: public static class Globals
        VB: Public Module Globals
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: TM.Globals.Client
      commentId: F:TM.Globals.Client
      language: CSharp
      name:
        CSharp: Client
        VB: Client
      nameWithType:
        CSharp: Globals.Client
        VB: Globals.Client
      qualifiedName:
        CSharp: TM.Globals.Client
        VB: TM.Globals.Client
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Client
        path: ../TM/TMClient.cs
        startLine: 35
      summary: "\nGLOBAL Client\n"
      example: []
      syntax:
        content:
          CSharp: public static TMClient Client
          VB: Public Shared Client As TMClient
        return:
          type: TM.TMClient
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.Globals.IP
      commentId: F:TM.Globals.IP
      language: CSharp
      name:
        CSharp: IP
        VB: IP
      nameWithType:
        CSharp: Globals.IP
        VB: Globals.IP
      qualifiedName:
        CSharp: TM.Globals.IP
        VB: TM.Globals.IP
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IP
        path: ../TM/TMClient.cs
        startLine: 40
      summary: "\nThe default IP\n"
      example: []
      syntax:
        content:
          CSharp: public static string IP
          VB: Public Shared IP As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.Globals.Port
      commentId: F:TM.Globals.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: Globals.Port
        VB: Globals.Port
      qualifiedName:
        CSharp: TM.Globals.Port
        VB: TM.Globals.Port
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClient.cs
        startLine: 45
      summary: "\nThe default port\n"
      example: []
      syntax:
        content:
          CSharp: public static int Port
          VB: Public Shared Port As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.Globals.Language
      commentId: P:TM.Globals.Language
      language: CSharp
      name:
        CSharp: Language
        VB: Language
      nameWithType:
        CSharp: Globals.Language
        VB: Globals.Language
      qualifiedName:
        CSharp: TM.Globals.Language
        VB: TM.Globals.Language
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Language
        path: ../TM/TMClient.cs
        startLine: 53
      syntax:
        content:
          CSharp: public static string Language { get; set; }
          VB: Public Shared Property Language As String
        parameters: []
        return:
          type: System.String
      overload: TM.Globals.Language*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
  - id: TM.ClientDataHandle
    commentId: T:TM.ClientDataHandle
    language: CSharp
    name:
      CSharp: ClientDataHandle
      VB: ClientDataHandle
    nameWithType:
      CSharp: ClientDataHandle
      VB: ClientDataHandle
    qualifiedName:
      CSharp: TM.ClientDataHandle
      VB: TM.ClientDataHandle
    type: Delegate
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ClientDataHandle
      path: ../TM/TMClient.cs
      startLine: 83
    summary: "\nDelegate ClientDataHandle\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void ClientDataHandle(BufferChunk data = null, int bytesRead = 0);
        VB: Public Delegate Sub ClientDataHandle(data As BufferChunk = Nothing, bytesRead As Integer = 0)
      parameters:
      - id: data
        type: TM.BufferChunk
        description: The data.
      - id: bytesRead
        type: System.Int32
        description: The bytes read.
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TM.ClientHandler
    commentId: T:TM.ClientHandler
    language: CSharp
    name:
      CSharp: ClientHandler
      VB: ClientHandler
    nameWithType:
      CSharp: ClientHandler
      VB: ClientHandler
    qualifiedName:
      CSharp: TM.ClientHandler
      VB: TM.ClientHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ClientHandler
      path: ../TM/TMClient.cs
      startLine: 88
    summary: "\nDelegate ClientHandler\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void ClientHandler();
        VB: Public Delegate Sub ClientHandler
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TM.PlanResultsHandler
    commentId: T:TM.PlanResultsHandler
    language: CSharp
    name:
      CSharp: PlanResultsHandler
      VB: PlanResultsHandler
    nameWithType:
      CSharp: PlanResultsHandler
      VB: PlanResultsHandler
    qualifiedName:
      CSharp: TM.PlanResultsHandler
      VB: TM.PlanResultsHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PlanResultsHandler
      path: ../TM/TMClient.cs
      startLine: 94
    summary: "\nDelegate PlanResultsHandler\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void PlanResultsHandler(List<PlanSpotResult> results);
        VB: Public Delegate Sub PlanResultsHandler(results As List(Of PlanSpotResult))
      parameters:
      - id: results
        type: System.Collections.Generic.List{TM.PlanSpotResult}
        description: The results.
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TM.ServerStateChangedHandler
    commentId: T:TM.ServerStateChangedHandler
    language: CSharp
    name:
      CSharp: ServerStateChangedHandler
      VB: ServerStateChangedHandler
    nameWithType:
      CSharp: ServerStateChangedHandler
      VB: ServerStateChangedHandler
    qualifiedName:
      CSharp: TM.ServerStateChangedHandler
      VB: TM.ServerStateChangedHandler
    type: Delegate
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ServerStateChangedHandler
      path: ../TM/TMClient.cs
      startLine: 100
    summary: "\nDelegate ServerStateChangedHandler\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void ServerStateChangedHandler(ECommandState state);
        VB: Public Delegate Sub ServerStateChangedHandler(state As ECommandState)
      parameters:
      - id: state
        type: TMSrv.ECommandState
        description: The state.
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: TM.TMClient
    commentId: T:TM.TMClient
    language: CSharp
    name:
      CSharp: TMClient
      VB: TMClient
    nameWithType:
      CSharp: TMClient
      VB: TMClient
    qualifiedName:
      CSharp: TM.TMClient
      VB: TM.TMClient
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: TMClient
      path: ../TM/TMClient.cs
      startLine: 108
    summary: "\nClass TMClient.\n<br />Implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TMClient : IDisposable'
        VB: >-
          Public Class TMClient

              Implements IDisposable
    seealso:
    - linkId: System.IDisposable
      commentId: T:System.IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.TMClient.ConnectionTryCount
      commentId: F:TM.TMClient.ConnectionTryCount
      language: CSharp
      name:
        CSharp: ConnectionTryCount
        VB: ConnectionTryCount
      nameWithType:
        CSharp: TMClient.ConnectionTryCount
        VB: TMClient.ConnectionTryCount
      qualifiedName:
        CSharp: TM.TMClient.ConnectionTryCount
        VB: TM.TMClient.ConnectionTryCount
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ConnectionTryCount
        path: ../TM/TMClient.cs
        startLine: 115
      summary: "\nThe default value of connection try out count\n"
      example: []
      syntax:
        content:
          CSharp: public static int ConnectionTryCount
          VB: Public Shared ConnectionTryCount As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.TMClient.#ctor
      commentId: M:TM.TMClient.#ctor
      language: CSharp
      name:
        CSharp: TMClient()
        VB: TMClient()
      nameWithType:
        CSharp: TMClient.TMClient()
        VB: TMClient.TMClient()
      qualifiedName:
        CSharp: TM.TMClient.TMClient()
        VB: TM.TMClient.TMClient()
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMClient.cs
        startLine: 124
      summary: "\nInitializes a new instance of the <xref href=\"TM.TMClient\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public TMClient()
          VB: Public Sub New
      overload: TM.TMClient.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.TMClient: 
    - id: TM.TMClient.ReadData
      commentId: F:TM.TMClient.ReadData
      language: CSharp
      name:
        CSharp: ReadData
        VB: ReadData
      nameWithType:
        CSharp: TMClient.ReadData
        VB: TMClient.ReadData
      qualifiedName:
        CSharp: TM.TMClient.ReadData
        VB: TM.TMClient.ReadData
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ReadData
        path: ../TM/TMClient.cs
        startLine: 141
      summary: "\nThe read data\n"
      example: []
      syntax:
        content:
          CSharp: public BufferChunk ReadData
          VB: Public ReadData As BufferChunk
        return:
          type: TM.BufferChunk
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.Sender
      commentId: F:TM.TMClient.Sender
      language: CSharp
      name:
        CSharp: Sender
        VB: Sender
      nameWithType:
        CSharp: TMClient.Sender
        VB: TMClient.Sender
      qualifiedName:
        CSharp: TM.TMClient.Sender
        VB: TM.TMClient.Sender
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Sender
        path: ../TM/TMClient.cs
        startLine: 146
      summary: "\nThe TCP sender\n"
      example: []
      syntax:
        content:
          CSharp: public TcpClient Sender
          VB: Public Sender As TcpClient
        return:
          type: System.Net.Sockets.TcpClient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.DataBlockReceived
      commentId: E:TM.TMClient.DataBlockReceived
      language: CSharp
      name:
        CSharp: DataBlockReceived
        VB: DataBlockReceived
      nameWithType:
        CSharp: TMClient.DataBlockReceived
        VB: TMClient.DataBlockReceived
      qualifiedName:
        CSharp: TM.TMClient.DataBlockReceived
        VB: TM.TMClient.DataBlockReceived
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DataBlockReceived
        path: ../TM/TMClient.cs
        startLine: 170
      summary: "\nOccurs when [data block received].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientDataHandle DataBlockReceived
          VB: Public Event DataBlockReceived As ClientDataHandle
        return:
          type: TM.ClientDataHandle
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.ErrorReceived
      commentId: E:TM.TMClient.ErrorReceived
      language: CSharp
      name:
        CSharp: ErrorReceived
        VB: ErrorReceived
      nameWithType:
        CSharp: TMClient.ErrorReceived
        VB: TMClient.ErrorReceived
      qualifiedName:
        CSharp: TM.TMClient.ErrorReceived
        VB: TM.TMClient.ErrorReceived
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ErrorReceived
        path: ../TM/TMClient.cs
        startLine: 175
      summary: "\nOccurs when [on error received].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientHandler ErrorReceived
          VB: Public Event ErrorReceived As ClientHandler
        return:
          type: TM.ClientHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.InfoReceived
      commentId: E:TM.TMClient.InfoReceived
      language: CSharp
      name:
        CSharp: InfoReceived
        VB: InfoReceived
      nameWithType:
        CSharp: TMClient.InfoReceived
        VB: TMClient.InfoReceived
      qualifiedName:
        CSharp: TM.TMClient.InfoReceived
        VB: TM.TMClient.InfoReceived
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: InfoReceived
        path: ../TM/TMClient.cs
        startLine: 180
      summary: "\nOccurs when [on info received].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientHandler InfoReceived
          VB: Public Event InfoReceived As ClientHandler
        return:
          type: TM.ClientHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.PlanFinished
      commentId: E:TM.TMClient.PlanFinished
      language: CSharp
      name:
        CSharp: PlanFinished
        VB: PlanFinished
      nameWithType:
        CSharp: TMClient.PlanFinished
        VB: TMClient.PlanFinished
      qualifiedName:
        CSharp: TM.TMClient.PlanFinished
        VB: TM.TMClient.PlanFinished
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PlanFinished
        path: ../TM/TMClient.cs
        startLine: 185
      summary: "\nOccurs when [plan processing is finished].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientHandler PlanFinished
          VB: Public Event PlanFinished As ClientHandler
        return:
          type: TM.ClientHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.PlanLoaded
      commentId: E:TM.TMClient.PlanLoaded
      language: CSharp
      name:
        CSharp: PlanLoaded
        VB: PlanLoaded
      nameWithType:
        CSharp: TMClient.PlanLoaded
        VB: TMClient.PlanLoaded
      qualifiedName:
        CSharp: TM.TMClient.PlanLoaded
        VB: TM.TMClient.PlanLoaded
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PlanLoaded
        path: ../TM/TMClient.cs
        startLine: 190
      summary: "\nOccurs when [plan loaded].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientHandler PlanLoaded
          VB: Public Event PlanLoaded As ClientHandler
        return:
          type: TM.ClientHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.PlanResultsProcessed
      commentId: E:TM.TMClient.PlanResultsProcessed
      language: CSharp
      name:
        CSharp: PlanResultsProcessed
        VB: PlanResultsProcessed
      nameWithType:
        CSharp: TMClient.PlanResultsProcessed
        VB: TMClient.PlanResultsProcessed
      qualifiedName:
        CSharp: TM.TMClient.PlanResultsProcessed
        VB: TM.TMClient.PlanResultsProcessed
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PlanResultsProcessed
        path: ../TM/TMClient.cs
        startLine: 195
      summary: "\nOccurs when part of [plan results processed and received].\n"
      example: []
      syntax:
        content:
          CSharp: public event PlanResultsHandler PlanResultsProcessed
          VB: Public Event PlanResultsProcessed As PlanResultsHandler
        return:
          type: TM.PlanResultsHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.ServerConnected
      commentId: E:TM.TMClient.ServerConnected
      language: CSharp
      name:
        CSharp: ServerConnected
        VB: ServerConnected
      nameWithType:
        CSharp: TMClient.ServerConnected
        VB: TMClient.ServerConnected
      qualifiedName:
        CSharp: TM.TMClient.ServerConnected
        VB: TM.TMClient.ServerConnected
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerConnected
        path: ../TM/TMClient.cs
        startLine: 200
      summary: "\nOccurs when [server connected].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientHandler ServerConnected
          VB: Public Event ServerConnected As ClientHandler
        return:
          type: TM.ClientHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.ServerDisconnected
      commentId: E:TM.TMClient.ServerDisconnected
      language: CSharp
      name:
        CSharp: ServerDisconnected
        VB: ServerDisconnected
      nameWithType:
        CSharp: TMClient.ServerDisconnected
        VB: TMClient.ServerDisconnected
      qualifiedName:
        CSharp: TM.TMClient.ServerDisconnected
        VB: TM.TMClient.ServerDisconnected
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerDisconnected
        path: ../TM/TMClient.cs
        startLine: 205
      summary: "\nOccurs when [server disconnected].\n"
      example: []
      syntax:
        content:
          CSharp: public event ClientHandler ServerDisconnected
          VB: Public Event ServerDisconnected As ClientHandler
        return:
          type: TM.ClientHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.ServerStateChanged
      commentId: E:TM.TMClient.ServerStateChanged
      language: CSharp
      name:
        CSharp: ServerStateChanged
        VB: ServerStateChanged
      nameWithType:
        CSharp: TMClient.ServerStateChanged
        VB: TMClient.ServerStateChanged
      qualifiedName:
        CSharp: TM.TMClient.ServerStateChanged
        VB: TM.TMClient.ServerStateChanged
      type: Event
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerStateChanged
        path: ../TM/TMClient.cs
        startLine: 210
      summary: "\nOccurs when [server state changed].\n"
      example: []
      syntax:
        content:
          CSharp: public event ServerStateChangedHandler ServerStateChanged
          VB: Public Event ServerStateChanged As ServerStateChangedHandler
        return:
          type: TM.ServerStateChangedHandler
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.Debug
      commentId: P:TM.TMClient.Debug
      language: CSharp
      name:
        CSharp: Debug
        VB: Debug
      nameWithType:
        CSharp: TMClient.Debug
        VB: TMClient.Debug
      qualifiedName:
        CSharp: TM.TMClient.Debug
        VB: TM.TMClient.Debug
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Debug
        path: ../TM/TMClient.cs
        startLine: 220
      summary: "\nSet Debugging ON/OFF\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Debug { get; set; }
          VB: Public Shared Property Debug As Boolean
        parameters: []
        return:
          type: System.Boolean
          description: <code>true</code> if debug; otherwise, <code>false</code>.
      overload: TM.TMClient.Debug*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
    - id: TM.TMClient.DebugPreference
      commentId: P:TM.TMClient.DebugPreference
      language: CSharp
      name:
        CSharp: DebugPreference
        VB: DebugPreference
      nameWithType:
        CSharp: TMClient.DebugPreference
        VB: TMClient.DebugPreference
      qualifiedName:
        CSharp: TM.TMClient.DebugPreference
        VB: TM.TMClient.DebugPreference
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DebugPreference
        path: ../TM/TMClient.cs
        startLine: 241
      summary: "\nEnum.ActionPreference:\n<pre><code>Continue 	      2 	- Debug is ON\nSilentlyContinue 	0 	- Debug is OFF</code></pre>\n"
      example: []
      syntax:
        content:
          CSharp: public static int DebugPreference { get; set; }
          VB: Public Shared Property DebugPreference As Integer
        parameters: []
        return:
          type: System.Int32
          description: The debug preference.
      overload: TM.TMClient.DebugPreference*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
    - id: TM.TMClient.Header
      commentId: P:TM.TMClient.Header
      language: CSharp
      name:
        CSharp: Header
        VB: Header
      nameWithType:
        CSharp: TMClient.Header
        VB: TMClient.Header
      qualifiedName:
        CSharp: TM.TMClient.Header
        VB: TM.TMClient.Header
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Header
        path: ../TM/TMClient.cs
        startLine: 251
      summary: "\nGets the packet header.\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacketHeader Header { get; }
          VB: Public ReadOnly Property Header As TMPacketHeader
        parameters: []
        return:
          type: TM.TMPacketHeader
          description: The header.
      overload: TM.TMClient.Header*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.IpAddress
      commentId: P:TM.TMClient.IpAddress
      language: CSharp
      name:
        CSharp: IpAddress
        VB: IpAddress
      nameWithType:
        CSharp: TMClient.IpAddress
        VB: TMClient.IpAddress
      qualifiedName:
        CSharp: TM.TMClient.IpAddress
        VB: TM.TMClient.IpAddress
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IpAddress
        path: ../TM/TMClient.cs
        startLine: 261
      summary: "\nGets the server IP address.\n"
      example: []
      syntax:
        content:
          CSharp: public string IpAddress { get; set; }
          VB: Public Property IpAddress As String
        parameters: []
        return:
          type: System.String
          description: The IP address.
      overload: TM.TMClient.IpAddress*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.TMClient.IP
      commentId: P:TM.TMClient.IP
      language: CSharp
      name:
        CSharp: IP
        VB: IP
      nameWithType:
        CSharp: TMClient.IP
        VB: TMClient.IP
      qualifiedName:
        CSharp: TM.TMClient.IP
        VB: TM.TMClient.IP
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IP
        path: ../TM/TMClient.cs
        startLine: 266
      syntax:
        content:
          CSharp: public string IP { get; }
          VB: Public ReadOnly Property IP As String
        parameters: []
        return:
          type: System.String
      overload: TM.TMClient.IP*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.IsConnected
      commentId: P:TM.TMClient.IsConnected
      language: CSharp
      name:
        CSharp: IsConnected
        VB: IsConnected
      nameWithType:
        CSharp: TMClient.IsConnected
        VB: TMClient.IsConnected
      qualifiedName:
        CSharp: TM.TMClient.IsConnected
        VB: TM.TMClient.IsConnected
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IsConnected
        path: ../TM/TMClient.cs
        startLine: 278
      summary: "\nGets a value indicating whether this <xref href=\"TM.TMClient\" data-throw-if-not-resolved=\"false\"></xref> is connected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsConnected { get; }
          VB: Public ReadOnly Property IsConnected As Boolean
        parameters: []
        return:
          type: System.Boolean
          description: <code>true</code> if connected; otherwise, <code>false</code>.
      overload: TM.TMClient.IsConnected*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        TM.TMClient: 
    - id: TM.TMClient.LocalEndPoint
      commentId: P:TM.TMClient.LocalEndPoint
      language: CSharp
      name:
        CSharp: LocalEndPoint
        VB: LocalEndPoint
      nameWithType:
        CSharp: TMClient.LocalEndPoint
        VB: TMClient.LocalEndPoint
      qualifiedName:
        CSharp: TM.TMClient.LocalEndPoint
        VB: TM.TMClient.LocalEndPoint
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LocalEndPoint
        path: ../TM/TMClient.cs
        startLine: 319
      summary: "\nGets the local end point.\n"
      example: []
      syntax:
        content:
          CSharp: public IPEndPoint LocalEndPoint { get; }
          VB: Public ReadOnly Property LocalEndPoint As IPEndPoint
        parameters: []
        return:
          type: System.Net.IPEndPoint
          description: The local end point.
      overload: TM.TMClient.LocalEndPoint*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.LocalIpAddress
      commentId: P:TM.TMClient.LocalIpAddress
      language: CSharp
      name:
        CSharp: LocalIpAddress
        VB: LocalIpAddress
      nameWithType:
        CSharp: TMClient.LocalIpAddress
        VB: TMClient.LocalIpAddress
      qualifiedName:
        CSharp: TM.TMClient.LocalIpAddress
        VB: TM.TMClient.LocalIpAddress
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LocalIpAddress
        path: ../TM/TMClient.cs
        startLine: 331
      summary: "\nGets the local IP address.\n"
      example: []
      syntax:
        content:
          CSharp: public string LocalIpAddress { get; }
          VB: Public ReadOnly Property LocalIpAddress As String
        parameters: []
        return:
          type: System.String
          description: The local IP address.
      overload: TM.TMClient.LocalIpAddress*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.LocalPort
      commentId: P:TM.TMClient.LocalPort
      language: CSharp
      name:
        CSharp: LocalPort
        VB: LocalPort
      nameWithType:
        CSharp: TMClient.LocalPort
        VB: TMClient.LocalPort
      qualifiedName:
        CSharp: TM.TMClient.LocalPort
        VB: TM.TMClient.LocalPort
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LocalPort
        path: ../TM/TMClient.cs
        startLine: 343
      summary: "\nGets the local port.\n"
      example: []
      syntax:
        content:
          CSharp: public int LocalPort { get; }
          VB: Public ReadOnly Property LocalPort As Integer
        parameters: []
        return:
          type: System.Int32
          description: The local port.
      overload: TM.TMClient.LocalPort*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.MCS_State_Server
      commentId: P:TM.TMClient.MCS_State_Server
      language: CSharp
      name:
        CSharp: MCS_State_Server
        VB: MCS_State_Server
      nameWithType:
        CSharp: TMClient.MCS_State_Server
        VB: TMClient.MCS_State_Server
      qualifiedName:
        CSharp: TM.TMClient.MCS_State_Server
        VB: TM.TMClient.MCS_State_Server
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MCS_State_Server
        path: ../TM/TMClient.cs
        startLine: 355
      summary: "\nGets the MCS_State_Server structure.\n"
      example: []
      syntax:
        content:
          CSharp: public MCS_State_topass MCS_State_Server { get; }
          VB: Public ReadOnly Property MCS_State_Server As MCS_State_topass
        parameters: []
        return:
          type: TMSrv.MCS_State_topass
          description: The server.
      overload: TM.TMClient.MCS_State_Server*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.Plan
      commentId: P:TM.TMClient.Plan
      language: CSharp
      name:
        CSharp: Plan
        VB: Plan
      nameWithType:
        CSharp: TMClient.Plan
        VB: TMClient.Plan
      qualifiedName:
        CSharp: TM.TMClient.Plan
        VB: TM.TMClient.Plan
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Plan
        path: ../TM/TMClient.cs
        startLine: 365
      summary: "\nLoaded plan data\n"
      example: []
      syntax:
        content:
          CSharp: public List<PlanSpot> Plan { get; }
          VB: Public ReadOnly Property Plan As List(Of PlanSpot)
        parameters: []
        return:
          type: System.Collections.Generic.List{TM.PlanSpot}
          description: The plan.
      overload: TM.TMClient.Plan*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.PlanResults
      commentId: P:TM.TMClient.PlanResults
      language: CSharp
      name:
        CSharp: PlanResults
        VB: PlanResults
      nameWithType:
        CSharp: TMClient.PlanResults
        VB: TMClient.PlanResults
      qualifiedName:
        CSharp: TM.TMClient.PlanResults
        VB: TM.TMClient.PlanResults
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PlanResults
        path: ../TM/TMClient.cs
        startLine: 375
      summary: "\nProcessed plan results\n"
      example: []
      syntax:
        content:
          CSharp: public List<PlanSpotResult> PlanResults { get; }
          VB: Public ReadOnly Property PlanResults As List(Of PlanSpotResult)
        parameters: []
        return:
          type: System.Collections.Generic.List{TM.PlanSpotResult}
          description: The plan results.
      overload: TM.TMClient.PlanResults*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.Port
      commentId: P:TM.TMClient.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: TMClient.Port
        VB: TMClient.Port
      qualifiedName:
        CSharp: TM.TMClient.Port
        VB: TM.TMClient.Port
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClient.cs
        startLine: 385
      summary: "\nGets the remote server port.\n"
      example: []
      syntax:
        content:
          CSharp: public int Port { get; set; }
          VB: Public Property Port As Integer
        parameters: []
        return:
          type: System.Int32
          description: The remote port.
      overload: TM.TMClient.Port*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.TMClient.ProcessingIsOn
      commentId: P:TM.TMClient.ProcessingIsOn
      language: CSharp
      name:
        CSharp: ProcessingIsOn
        VB: ProcessingIsOn
      nameWithType:
        CSharp: TMClient.ProcessingIsOn
        VB: TMClient.ProcessingIsOn
      qualifiedName:
        CSharp: TM.TMClient.ProcessingIsOn
        VB: TM.TMClient.ProcessingIsOn
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessingIsOn
        path: ../TM/TMClient.cs
        startLine: 395
      summary: "\nGets a value indicating whether [processing is on].\n"
      example: []
      syntax:
        content:
          CSharp: public bool ProcessingIsOn { get; set; }
          VB: Public Property ProcessingIsOn As Boolean
        parameters: []
        return:
          type: System.Boolean
          description: <code>true</code> if [processing is on]; otherwise, <code>false</code>.
      overload: TM.TMClient.ProcessingIsOn*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.TMClient.RemoteEndPoint
      commentId: P:TM.TMClient.RemoteEndPoint
      language: CSharp
      name:
        CSharp: RemoteEndPoint
        VB: RemoteEndPoint
      nameWithType:
        CSharp: TMClient.RemoteEndPoint
        VB: TMClient.RemoteEndPoint
      qualifiedName:
        CSharp: TM.TMClient.RemoteEndPoint
        VB: TM.TMClient.RemoteEndPoint
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RemoteEndPoint
        path: ../TM/TMClient.cs
        startLine: 405
      summary: "\nGets the remote end point.\n"
      example: []
      syntax:
        content:
          CSharp: public IPEndPoint RemoteEndPoint { get; }
          VB: Public ReadOnly Property RemoteEndPoint As IPEndPoint
        parameters: []
        return:
          type: System.Net.IPEndPoint
          description: The remote end point.
      overload: TM.TMClient.RemoteEndPoint*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.ServerState
      commentId: P:TM.TMClient.ServerState
      language: CSharp
      name:
        CSharp: ServerState
        VB: ServerState
      nameWithType:
        CSharp: TMClient.ServerState
        VB: TMClient.ServerState
      qualifiedName:
        CSharp: TM.TMClient.ServerState
        VB: TM.TMClient.ServerState
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerState
        path: ../TM/TMClient.cs
        startLine: 417
      summary: "\nGets the state of the server.\n"
      example: []
      syntax:
        content:
          CSharp: public ECommandState ServerState { get; }
          VB: Public ReadOnly Property ServerState As ECommandState
        parameters: []
        return:
          type: TMSrv.ECommandState
          description: The state of the server.
      overload: TM.TMClient.ServerState*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.SpotsPassed
      commentId: P:TM.TMClient.SpotsPassed
      language: CSharp
      name:
        CSharp: SpotsPassed
        VB: SpotsPassed
      nameWithType:
        CSharp: TMClient.SpotsPassed
        VB: TMClient.SpotsPassed
      qualifiedName:
        CSharp: TM.TMClient.SpotsPassed
        VB: TM.TMClient.SpotsPassed
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SpotsPassed
        path: ../TM/TMClient.cs
        startLine: 427
      summary: "\nGets the number of spots processed.\n"
      example: []
      syntax:
        content:
          CSharp: public uint SpotsPassed { get; }
          VB: Public ReadOnly Property SpotsPassed As UInteger
        parameters: []
        return:
          type: System.UInt32
          description: The spots passed.
      overload: TM.TMClient.SpotsPassed*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.SpotsTotal
      commentId: P:TM.TMClient.SpotsTotal
      language: CSharp
      name:
        CSharp: SpotsTotal
        VB: SpotsTotal
      nameWithType:
        CSharp: TMClient.SpotsTotal
        VB: TMClient.SpotsTotal
      qualifiedName:
        CSharp: TM.TMClient.SpotsTotal
        VB: TM.TMClient.SpotsTotal
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SpotsTotal
        path: ../TM/TMClient.cs
        startLine: 437
      summary: "\nGets the number of spots total in plan.\n"
      example: []
      syntax:
        content:
          CSharp: public uint SpotsTotal { get; }
          VB: Public ReadOnly Property SpotsTotal As UInteger
        parameters: []
        return:
          type: System.UInt32
          description: The spots total.
      overload: TM.TMClient.SpotsTotal*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMClient.Dispose
      commentId: M:TM.TMClient.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: TMClient.Dispose()
        VB: TMClient.Dispose()
      qualifiedName:
        CSharp: TM.TMClient.Dispose()
        VB: TM.TMClient.Dispose()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Dispose
        path: ../TM/TMClient.cs
        startLine: 451
      summary: "\nPerforms application-defined tasks associated with freeing,\nreleasing, or resetting unmanaged resources.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: TM.TMClient.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.DumpPlan(System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot})
      commentId: M:TM.TMClient.DumpPlan(System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot})
      language: CSharp
      name:
        CSharp: DumpPlan(Dictionary<Int32, PlanSpot>)
        VB: DumpPlan(Dictionary(Of Int32, PlanSpot))
      nameWithType:
        CSharp: TMClient.DumpPlan(Dictionary<Int32, PlanSpot>)
        VB: TMClient.DumpPlan(Dictionary(Of Int32, PlanSpot))
      qualifiedName:
        CSharp: TM.TMClient.DumpPlan(System.Collections.Generic.Dictionary<System.Int32, TM.PlanSpot>)
        VB: TM.TMClient.DumpPlan(System.Collections.Generic.Dictionary(Of System.Int32, TM.PlanSpot))
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DumpPlan
        path: ../TM/TMClient.cs
        startLine: 464
      summary: "\nDumps the plan data.\n"
      example: []
      syntax:
        content:
          CSharp: public static void DumpPlan(Dictionary<int, PlanSpot> plan)
          VB: Public Shared Sub DumpPlan(plan As Dictionary(Of Integer, PlanSpot))
        parameters:
        - id: plan
          type: System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot}
          description: The plan data.
      overload: TM.TMClient.DumpPlan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.TMClient.DumpPlanResults(System.Collections.Generic.List{TM.PlanSpotResult})
      commentId: M:TM.TMClient.DumpPlanResults(System.Collections.Generic.List{TM.PlanSpotResult})
      language: CSharp
      name:
        CSharp: DumpPlanResults(List<PlanSpotResult>)
        VB: DumpPlanResults(List(Of PlanSpotResult))
      nameWithType:
        CSharp: TMClient.DumpPlanResults(List<PlanSpotResult>)
        VB: TMClient.DumpPlanResults(List(Of PlanSpotResult))
      qualifiedName:
        CSharp: TM.TMClient.DumpPlanResults(System.Collections.Generic.List<TM.PlanSpotResult>)
        VB: TM.TMClient.DumpPlanResults(System.Collections.Generic.List(Of TM.PlanSpotResult))
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DumpPlanResults
        path: ../TM/TMClient.cs
        startLine: 479
      summary: "\nDumps the plan results.\n"
      example: []
      syntax:
        content:
          CSharp: public static void DumpPlanResults(List<PlanSpotResult> results)
          VB: Public Shared Sub DumpPlanResults(results As List(Of PlanSpotResult))
        parameters:
        - id: results
          type: System.Collections.Generic.List{TM.PlanSpotResult}
          description: The results.
      overload: TM.TMClient.DumpPlanResults*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.TMClient.LoadPlanData(System.String)
      commentId: M:TM.TMClient.LoadPlanData(System.String)
      language: CSharp
      name:
        CSharp: LoadPlanData(String)
        VB: LoadPlanData(String)
      nameWithType:
        CSharp: TMClient.LoadPlanData(String)
        VB: TMClient.LoadPlanData(String)
      qualifiedName:
        CSharp: TM.TMClient.LoadPlanData(System.String)
        VB: TM.TMClient.LoadPlanData(System.String)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LoadPlanData
        path: ../TM/TMClient.cs
        startLine: 499
      summary: "\nReads the file and loads the plan data.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<PlanSpot> LoadPlanData(string file)
          VB: Public Shared Function LoadPlanData(file As String) As List(Of PlanSpot)
        parameters:
        - id: file
          type: System.String
          description: The file with plan data.
        return:
          type: System.Collections.Generic.List{TM.PlanSpot}
          description: BufferChunk. The raw array of bytes
      overload: TM.TMClient.LoadPlanData*
      exceptions:
      - type: System.IO.FileNotFoundException
        commentId: T:System.IO.FileNotFoundException
      - type: System.IO.FileNotFoundException
        commentId: T:System.IO.FileNotFoundException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.IO.FileNotFoundException: 
    - id: TM.TMClient.SendPlan(TM.TMClient,System.Collections.Generic.List{TM.PlanSpot},System.UInt32)
      commentId: M:TM.TMClient.SendPlan(TM.TMClient,System.Collections.Generic.List{TM.PlanSpot},System.UInt32)
      language: CSharp
      name:
        CSharp: SendPlan(TMClient, List<PlanSpot>, UInt32)
        VB: SendPlan(TMClient, List(Of PlanSpot), UInt32)
      nameWithType:
        CSharp: TMClient.SendPlan(TMClient, List<PlanSpot>, UInt32)
        VB: TMClient.SendPlan(TMClient, List(Of PlanSpot), UInt32)
      qualifiedName:
        CSharp: TM.TMClient.SendPlan(TM.TMClient, System.Collections.Generic.List<TM.PlanSpot>, System.UInt32)
        VB: TM.TMClient.SendPlan(TM.TMClient, System.Collections.Generic.List(Of TM.PlanSpot), System.UInt32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendPlan
        path: ../TM/TMClient.cs
        startLine: 590
      summary: "\nSends the plan to server.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SendPlan(TMClient client, List<PlanSpot> spots, uint nblocks = 10U)
          VB: Public Shared Function SendPlan(client As TMClient, spots As List(Of PlanSpot), nblocks As UInteger = 10UI) As Boolean
        parameters:
        - id: client
          type: TM.TMClient
          description: The client.
        - id: spots
          type: System.Collections.Generic.List{TM.PlanSpot}
          description: The spots.
        - id: nblocks
          type: System.UInt32
          description: The nblocks.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.SendPlan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.TMClient.SendPlan(TM.TMClient,System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot},System.UInt32)
      commentId: M:TM.TMClient.SendPlan(TM.TMClient,System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot},System.UInt32)
      language: CSharp
      name:
        CSharp: SendPlan(TMClient, Dictionary<Int32, PlanSpot>, UInt32)
        VB: SendPlan(TMClient, Dictionary(Of Int32, PlanSpot), UInt32)
      nameWithType:
        CSharp: TMClient.SendPlan(TMClient, Dictionary<Int32, PlanSpot>, UInt32)
        VB: TMClient.SendPlan(TMClient, Dictionary(Of Int32, PlanSpot), UInt32)
      qualifiedName:
        CSharp: TM.TMClient.SendPlan(TM.TMClient, System.Collections.Generic.Dictionary<System.Int32, TM.PlanSpot>, System.UInt32)
        VB: TM.TMClient.SendPlan(TM.TMClient, System.Collections.Generic.Dictionary(Of System.Int32, TM.PlanSpot), System.UInt32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendPlan
        path: ../TM/TMClient.cs
        startLine: 650
      summary: "\nSends the plan data to server.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SendPlan(TMClient client, Dictionary<int, PlanSpot> spots, uint nblocks = 10U)
          VB: Public Shared Function SendPlan(client As TMClient, spots As Dictionary(Of Integer, PlanSpot), nblocks As UInteger = 10UI) As Boolean
        parameters:
        - id: client
          type: TM.TMClient
          description: The client.
        - id: spots
          type: System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot}
          description: The plan as list of spots.
        - id: nblocks
          type: System.UInt32
          description: The nblocks.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.SendPlan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.TMClient.AskServerState
      commentId: M:TM.TMClient.AskServerState
      language: CSharp
      name:
        CSharp: AskServerState()
        VB: AskServerState()
      nameWithType:
        CSharp: TMClient.AskServerState()
        VB: TMClient.AskServerState()
      qualifiedName:
        CSharp: TM.TMClient.AskServerState()
        VB: TM.TMClient.AskServerState()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: AskServerState
        path: ../TM/TMClient.cs
        startLine: 664
      summary: "\nSendCommand(EPlanCommand.GETSTATE); to the server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool AskServerState()
          VB: Public Function AskServerState As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.AskServerState*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.ClearPlan
      commentId: M:TM.TMClient.ClearPlan
      language: CSharp
      name:
        CSharp: ClearPlan()
        VB: ClearPlan()
      nameWithType:
        CSharp: TMClient.ClearPlan()
        VB: TMClient.ClearPlan()
      qualifiedName:
        CSharp: TM.TMClient.ClearPlan()
        VB: TM.TMClient.ClearPlan()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ClearPlan
        path: ../TM/TMClient.cs
        startLine: 673
      summary: "\nClears the plan.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ClearPlan()
          VB: Public Function ClearPlan As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.ClearPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.Connect(System.String,System.Int32)
      commentId: M:TM.TMClient.Connect(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Connect(String, Int32)
        VB: Connect(String, Int32)
      nameWithType:
        CSharp: TMClient.Connect(String, Int32)
        VB: TMClient.Connect(String, Int32)
      qualifiedName:
        CSharp: TM.TMClient.Connect(System.String, System.Int32)
        VB: TM.TMClient.Connect(System.String, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Connect
        path: ../TM/TMClient.cs
        startLine: 684
      summary: "\nConnects the specified ip.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Connect(string ip = null, int port = 0)
          VB: Public Function Connect(ip As String = Nothing, port As Integer = 0) As Boolean
        parameters:
        - id: ip
          type: System.String
          description: The ip.
        - id: port
          type: System.Int32
          description: The port.
        return:
          type: System.Boolean
          description: <code>true</code> if XXXX, <code>false</code> otherwise.
      overload: TM.TMClient.Connect*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.Disconnect
      commentId: M:TM.TMClient.Disconnect
      language: CSharp
      name:
        CSharp: Disconnect()
        VB: Disconnect()
      nameWithType:
        CSharp: TMClient.Disconnect()
        VB: TMClient.Disconnect()
      qualifiedName:
        CSharp: TM.TMClient.Disconnect()
        VB: TM.TMClient.Disconnect()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Disconnect
        path: ../TM/TMClient.cs
        startLine: 725
      summary: "\nDisconnects this TMClient.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Disconnect()
          VB: Public Function Disconnect As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if disconnect is OK, <code>false</code> otherwise.
      overload: TM.TMClient.Disconnect*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.DumpPlanResults
      commentId: M:TM.TMClient.DumpPlanResults
      language: CSharp
      name:
        CSharp: DumpPlanResults()
        VB: DumpPlanResults()
      nameWithType:
        CSharp: TMClient.DumpPlanResults()
        VB: TMClient.DumpPlanResults()
      qualifiedName:
        CSharp: TM.TMClient.DumpPlanResults()
        VB: TM.TMClient.DumpPlanResults()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DumpPlanResults
        path: ../TM/TMClient.cs
        startLine: 743
      summary: "\nDumps the plan results.\n"
      example: []
      syntax:
        content:
          CSharp: public void DumpPlanResults()
          VB: Public Sub DumpPlanResults
      overload: TM.TMClient.DumpPlanResults*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.ExecutePlan(System.String,System.String,System.Int32)
      commentId: M:TM.TMClient.ExecutePlan(System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: ExecutePlan(String, String, Int32)
        VB: ExecutePlan(String, String, Int32)
      nameWithType:
        CSharp: TMClient.ExecutePlan(String, String, Int32)
        VB: TMClient.ExecutePlan(String, String, Int32)
      qualifiedName:
        CSharp: TM.TMClient.ExecutePlan(System.String, System.String, System.Int32)
        VB: TM.TMClient.ExecutePlan(System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ExecutePlan
        path: ../TM/TMClient.cs
        startLine: 762
      summary: "\n<pre><code>LoadPlan(file) - loads the specified file with plan data.\nSendPlan()     - sends plan to the server specified by ip nad port\nStartPlan()    - starts plan processing on the server\nwhile (ProcessingIsOn) - waits for results of processing\nwhen results of plan processing received from server, fills PlanResults list\nif (ServerState == ECommandState.FINISHED) - execute PlanFinished() event</code></pre>\n"
      example: []
      syntax:
        content:
          CSharp: public List<PlanSpotFull> ExecutePlan(string file, string ip = null, int port = 0)
          VB: Public Function ExecutePlan(file As String, ip As String = Nothing, port As Integer = 0) As List(Of PlanSpotFull)
        parameters:
        - id: file
          type: System.String
          description: The file with plan data.
        - id: ip
          type: System.String
          description: The server IP.
        - id: port
          type: System.Int32
          description: The port.
        return:
          type: System.Collections.Generic.List{TM.PlanSpotFull}
          description: Dictionary&lt;System.Int32, PlanSpotFull>.
      overload: TM.TMClient.ExecutePlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.LoadPlan(System.String)
      commentId: M:TM.TMClient.LoadPlan(System.String)
      language: CSharp
      name:
        CSharp: LoadPlan(String)
        VB: LoadPlan(String)
      nameWithType:
        CSharp: TMClient.LoadPlan(String)
        VB: TMClient.LoadPlan(String)
      qualifiedName:
        CSharp: TM.TMClient.LoadPlan(System.String)
        VB: TM.TMClient.LoadPlan(System.String)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LoadPlan
        path: ../TM/TMClient.cs
        startLine: 846
      summary: "\nLoads the specified file with plan data.\n"
      example: []
      syntax:
        content:
          CSharp: public List<PlanSpot> LoadPlan(string file)
          VB: Public Function LoadPlan(file As String) As List(Of PlanSpot)
        parameters:
        - id: file
          type: System.String
          description: The file.
        return:
          type: System.Collections.Generic.List{TM.PlanSpot}
          description: Dictionary&lt;System.Int32, PlanSpot>.
      overload: TM.TMClient.LoadPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.PausePlan
      commentId: M:TM.TMClient.PausePlan
      language: CSharp
      name:
        CSharp: PausePlan()
        VB: PausePlan()
      nameWithType:
        CSharp: TMClient.PausePlan()
        VB: TMClient.PausePlan()
      qualifiedName:
        CSharp: TM.TMClient.PausePlan()
        VB: TM.TMClient.PausePlan()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PausePlan
        path: ../TM/TMClient.cs
        startLine: 865
      summary: "\nPauses the plan processing on server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PausePlan()
          VB: Public Function PausePlan As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.PausePlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.Reset
      commentId: M:TM.TMClient.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: TMClient.Reset()
        VB: TMClient.Reset()
      qualifiedName:
        CSharp: TM.TMClient.Reset()
        VB: TM.TMClient.Reset()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Reset
        path: ../TM/TMClient.cs
        startLine: 873
      summary: "\nResets this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: TM.TMClient.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendCommand(TM.EPlanCommand,TM.EServerType)
      commentId: M:TM.TMClient.SendCommand(TM.EPlanCommand,TM.EServerType)
      language: CSharp
      name:
        CSharp: SendCommand(EPlanCommand, EServerType)
        VB: SendCommand(EPlanCommand, EServerType)
      nameWithType:
        CSharp: TMClient.SendCommand(EPlanCommand, EServerType)
        VB: TMClient.SendCommand(EPlanCommand, EServerType)
      qualifiedName:
        CSharp: TM.TMClient.SendCommand(TM.EPlanCommand, TM.EServerType)
        VB: TM.TMClient.SendCommand(TM.EPlanCommand, TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendCommand
        path: ../TM/TMClient.cs
        startLine: 920
      summary: "\nSends the EPlanCommand to server.\n<pre><code>public enum EPlanCommand\n{\n[Description(&quot;запрос на статус сервера&quot;)]\nGETSTATE = 1,\n\n[Description(&quot;запрос на очистку плана &quot;)]\nCLEARPLAN = 2,\n\n[Description(&quot;запрос на старт плана &quot;)]\nSTARTPLAN = 3,\n\n[Description(&quot;запрос на паузу&quot;)]\nPAUSEPLAN = 4,\n\n[Description(&quot;запрос на останов&quot;)]\nSTOPPLAN = 5\n}</code></pre>\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendCommand(EPlanCommand cmd, EServerType server_type = EServerType.MCS)
          VB: Public Function SendCommand(cmd As EPlanCommand, server_type As EServerType = EServerType.MCS) As Boolean
        parameters:
        - id: cmd
          type: TM.EPlanCommand
          description: The EPlanCommand.
        - id: server_type
          type: TM.EServerType
          description: Type of the server.
        return:
          type: System.Boolean
          description: <code>true</code> on success, <code>false</code> otherwise.
      overload: TM.TMClient.SendCommand*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendData(System.Byte[],TM.EServerType)
      commentId: M:TM.TMClient.SendData(System.Byte[],TM.EServerType)
      language: CSharp
      name:
        CSharp: SendData(Byte[], EServerType)
        VB: SendData(Byte(), EServerType)
      nameWithType:
        CSharp: TMClient.SendData(Byte[], EServerType)
        VB: TMClient.SendData(Byte(), EServerType)
      qualifiedName:
        CSharp: TM.TMClient.SendData(System.Byte[], TM.EServerType)
        VB: TM.TMClient.SendData(System.Byte(), TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendData
        path: ../TM/TMClient.cs
        startLine: 962
      summary: "\nSends the plan as byte array to server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendData(byte[] data, EServerType server_type = EServerType.MCS)
          VB: Public Function SendData(data As Byte(), server_type As EServerType = EServerType.MCS) As Boolean
        parameters:
        - id: data
          type: System.Byte[]
          description: The data.
        - id: server_type
          type: TM.EServerType
          description: Type of the server.
        return:
          type: System.Boolean
          description: <code>true</code> on success, <code>false</code> otherwise.
      overload: TM.TMClient.SendData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendData(TM.BufferChunk,TM.EServerType)
      commentId: M:TM.TMClient.SendData(TM.BufferChunk,TM.EServerType)
      language: CSharp
      name:
        CSharp: SendData(BufferChunk, EServerType)
        VB: SendData(BufferChunk, EServerType)
      nameWithType:
        CSharp: TMClient.SendData(BufferChunk, EServerType)
        VB: TMClient.SendData(BufferChunk, EServerType)
      qualifiedName:
        CSharp: TM.TMClient.SendData(TM.BufferChunk, TM.EServerType)
        VB: TM.TMClient.SendData(TM.BufferChunk, TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendData
        path: ../TM/TMClient.cs
        startLine: 998
      summary: "\nSends the plan data as BufferChunk to server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendData(BufferChunk data, EServerType server_type = EServerType.MCS)
          VB: Public Function SendData(data As BufferChunk, server_type As EServerType = EServerType.MCS) As Boolean
        parameters:
        - id: data
          type: TM.BufferChunk
          description: The data.
        - id: server_type
          type: TM.EServerType
          description: Type of the server.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.SendData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendData(System.UInt32,System.Byte[],TM.EServerType)
      commentId: M:TM.TMClient.SendData(System.UInt32,System.Byte[],TM.EServerType)
      language: CSharp
      name:
        CSharp: SendData(UInt32, Byte[], EServerType)
        VB: SendData(UInt32, Byte(), EServerType)
      nameWithType:
        CSharp: TMClient.SendData(UInt32, Byte[], EServerType)
        VB: TMClient.SendData(UInt32, Byte(), EServerType)
      qualifiedName:
        CSharp: TM.TMClient.SendData(System.UInt32, System.Byte[], TM.EServerType)
        VB: TM.TMClient.SendData(System.UInt32, System.Byte(), TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendData
        path: ../TM/TMClient.cs
        startLine: 1011
      summary: "\nSends the byte array of data to server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendData(uint len, byte[] data, EServerType server_type = EServerType.MCS)
          VB: Public Function SendData(len As UInteger, data As Byte(), server_type As EServerType = EServerType.MCS) As Boolean
        parameters:
        - id: len
          type: System.UInt32
          description: The length.
        - id: data
          type: System.Byte[]
          description: The data.
        - id: server_type
          type: TM.EServerType
          description: Type of the server.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.SendData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendInfo(System.String,TM.EServerType)
      commentId: M:TM.TMClient.SendInfo(System.String,TM.EServerType)
      language: CSharp
      name:
        CSharp: SendInfo(String, EServerType)
        VB: SendInfo(String, EServerType)
      nameWithType:
        CSharp: TMClient.SendInfo(String, EServerType)
        VB: TMClient.SendInfo(String, EServerType)
      qualifiedName:
        CSharp: TM.TMClient.SendInfo(System.String, TM.EServerType)
        VB: TM.TMClient.SendInfo(System.String, TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendInfo
        path: ../TM/TMClient.cs
        startLine: 1049
      summary: "\nSends the information to server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendInfo(string info, EServerType server_type = EServerType.MCS)
          VB: Public Function SendInfo(info As String, server_type As EServerType = EServerType.MCS) As Boolean
        parameters:
        - id: info
          type: System.String
          description: The information.
        - id: server_type
          type: TM.EServerType
          description: Type of the server.
        return:
          type: System.Boolean
          description: <code>true</code> on success, <code>false</code> otherwise.
      overload: TM.TMClient.SendInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendPlan(System.Collections.Generic.List{TM.PlanSpot})
      commentId: M:TM.TMClient.SendPlan(System.Collections.Generic.List{TM.PlanSpot})
      language: CSharp
      name:
        CSharp: SendPlan(List<PlanSpot>)
        VB: SendPlan(List(Of PlanSpot))
      nameWithType:
        CSharp: TMClient.SendPlan(List<PlanSpot>)
        VB: TMClient.SendPlan(List(Of PlanSpot))
      qualifiedName:
        CSharp: TM.TMClient.SendPlan(System.Collections.Generic.List<TM.PlanSpot>)
        VB: TM.TMClient.SendPlan(System.Collections.Generic.List(Of TM.PlanSpot))
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendPlan
        path: ../TM/TMClient.cs
        startLine: 1082
      summary: "\nSends the loaded plan to server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendPlan(List<PlanSpot> plan = null)
          VB: Public Function SendPlan(plan As List(Of PlanSpot) = Nothing) As Boolean
        parameters:
        - id: plan
          type: System.Collections.Generic.List{TM.PlanSpot}
          description: The plan.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.SendPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendPlan(System.Collections.Generic.ICollection{TM.PlanSpot})
      commentId: M:TM.TMClient.SendPlan(System.Collections.Generic.ICollection{TM.PlanSpot})
      language: CSharp
      name:
        CSharp: SendPlan(ICollection<PlanSpot>)
        VB: SendPlan(ICollection(Of PlanSpot))
      nameWithType:
        CSharp: TMClient.SendPlan(ICollection<PlanSpot>)
        VB: TMClient.SendPlan(ICollection(Of PlanSpot))
      qualifiedName:
        CSharp: TM.TMClient.SendPlan(System.Collections.Generic.ICollection<TM.PlanSpot>)
        VB: TM.TMClient.SendPlan(System.Collections.Generic.ICollection(Of TM.PlanSpot))
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendPlan
        path: ../TM/TMClient.cs
        startLine: 1096
      summary: "\nSends the plan as collection of spots to server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendPlan(ICollection<PlanSpot> list)
          VB: Public Function SendPlan(list As ICollection(Of PlanSpot)) As Boolean
        parameters:
        - id: list
          type: System.Collections.Generic.ICollection{TM.PlanSpot}
          description: The list.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.SendPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.SendPlan(System.Object[])
      commentId: M:TM.TMClient.SendPlan(System.Object[])
      language: CSharp
      name:
        CSharp: SendPlan(Object[])
        VB: SendPlan(Object())
      nameWithType:
        CSharp: TMClient.SendPlan(Object[])
        VB: TMClient.SendPlan(Object())
      qualifiedName:
        CSharp: TM.TMClient.SendPlan(System.Object[])
        VB: TM.TMClient.SendPlan(System.Object())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: SendPlan
        path: ../TM/TMClient.cs
        startLine: 1112
      summary: "\nSends the plan as array of PSObjects to remote server\n"
      example: []
      syntax:
        content:
          CSharp: public bool SendPlan(object[] arr)
          VB: Public Function SendPlan(arr As Object()) As Boolean
        parameters:
        - id: arr
          type: System.Object[]
          description: The array of PSObjects.
        return:
          type: System.Boolean
          description: <code>true</code> if success, <code>false</code> otherwise.
      overload: TM.TMClient.SendPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.StartPlan
      commentId: M:TM.TMClient.StartPlan
      language: CSharp
      name:
        CSharp: StartPlan()
        VB: StartPlan()
      nameWithType:
        CSharp: TMClient.StartPlan()
        VB: TMClient.StartPlan()
      qualifiedName:
        CSharp: TM.TMClient.StartPlan()
        VB: TM.TMClient.StartPlan()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StartPlan
        path: ../TM/TMClient.cs
        startLine: 1129
      summary: "\nStarts the plan processing on remote server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool StartPlan()
          VB: Public Function StartPlan As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.StartPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMClient.StopPlan
      commentId: M:TM.TMClient.StopPlan
      language: CSharp
      name:
        CSharp: StopPlan()
        VB: StopPlan()
      nameWithType:
        CSharp: TMClient.StopPlan()
        VB: TMClient.StopPlan()
      qualifiedName:
        CSharp: TM.TMClient.StopPlan()
        VB: TM.TMClient.StopPlan()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StopPlan
        path: ../TM/TMClient.cs
        startLine: 1138
      summary: "\nStops the plan processing on remote server.\n"
      example: []
      syntax:
        content:
          CSharp: public bool StopPlan()
          VB: Public Function StopPlan As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMClient.StopPlan*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      System.IDisposable: 
  - id: TM.ReadPlanException
    commentId: T:TM.ReadPlanException
    language: CSharp
    name:
      CSharp: ReadPlanException
      VB: ReadPlanException
    nameWithType:
      CSharp: ReadPlanException
      VB: ReadPlanException
    qualifiedName:
      CSharp: TM.ReadPlanException
      VB: TM.ReadPlanException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ReadPlanException
      path: ../TM/TMClient.cs
      startLine: 1378
    summary: "\nException during reading plan from a file\n<br />Implements the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ReadPlanException : Exception, ISerializable'
        VB: >-
          Public Class ReadPlanException

              Inherits Exception

              Implements ISerializable
    seealso:
    - linkId: System.Exception
      commentId: T:System.Exception
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.ReadPlanException.#ctor(System.String)
      commentId: M:TM.ReadPlanException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: ReadPlanException(String)
        VB: ReadPlanException(String)
      nameWithType:
        CSharp: ReadPlanException.ReadPlanException(String)
        VB: ReadPlanException.ReadPlanException(String)
      qualifiedName:
        CSharp: TM.ReadPlanException.ReadPlanException(System.String)
        VB: TM.ReadPlanException.ReadPlanException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMClient.cs
        startLine: 1386
      summary: "\nInitializes a new instance of the <xref href=\"TM.ReadPlanException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public ReadPlanException(string file)
          VB: Public Sub New(file As String)
        parameters:
        - id: file
          type: System.String
          description: The file.
      overload: TM.ReadPlanException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.ReadPlanException: 
    references:
      System.Exception: 
  - id: TM.SendCommandException
    commentId: T:TM.SendCommandException
    language: CSharp
    name:
      CSharp: SendCommandException
      VB: SendCommandException
    nameWithType:
      CSharp: SendCommandException
      VB: SendCommandException
    qualifiedName:
      CSharp: TM.SendCommandException
      VB: TM.SendCommandException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendCommandException
      path: ../TM/TMClient.cs
      startLine: 1398
    summary: "\nException during sending command to server\n<br />Implements the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SendCommandException : Exception, ISerializable'
        VB: >-
          Public Class SendCommandException

              Inherits Exception

              Implements ISerializable
    seealso:
    - linkId: System.Exception
      commentId: T:System.Exception
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.SendCommandException.#ctor(System.String)
      commentId: M:TM.SendCommandException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: SendCommandException(String)
        VB: SendCommandException(String)
      nameWithType:
        CSharp: SendCommandException.SendCommandException(String)
        VB: SendCommandException.SendCommandException(String)
      qualifiedName:
        CSharp: TM.SendCommandException.SendCommandException(System.String)
        VB: TM.SendCommandException.SendCommandException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMClient.cs
        startLine: 1406
      summary: "\nInitializes a new instance of the <xref href=\"TM.SendCommandException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public SendCommandException(string msg)
          VB: Public Sub New(msg As String)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
      overload: TM.SendCommandException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.SendCommandException: 
    references:
      System.Exception: 
  - id: TM.SendDataException
    commentId: T:TM.SendDataException
    language: CSharp
    name:
      CSharp: SendDataException
      VB: SendDataException
    nameWithType:
      CSharp: SendDataException
      VB: SendDataException
    qualifiedName:
      CSharp: TM.SendDataException
      VB: TM.SendDataException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendDataException
      path: ../TM/TMClient.cs
      startLine: 1418
    summary: "\nException during sending DATA to server\n<br />Implements the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SendDataException : Exception, ISerializable'
        VB: >-
          Public Class SendDataException

              Inherits Exception

              Implements ISerializable
    seealso:
    - linkId: System.Exception
      commentId: T:System.Exception
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.SendDataException.#ctor(System.String)
      commentId: M:TM.SendDataException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: SendDataException(String)
        VB: SendDataException(String)
      nameWithType:
        CSharp: SendDataException.SendDataException(String)
        VB: SendDataException.SendDataException(String)
      qualifiedName:
        CSharp: TM.SendDataException.SendDataException(System.String)
        VB: TM.SendDataException.SendDataException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMClient.cs
        startLine: 1426
      summary: "\nInitializes a new instance of the <xref href=\"TM.SendDataException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public SendDataException(string msg)
          VB: Public Sub New(msg As String)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
      overload: TM.SendDataException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.SendDataException: 
    references:
      System.Exception: 
  - id: TM.SendInfoException
    commentId: T:TM.SendInfoException
    language: CSharp
    name:
      CSharp: SendInfoException
      VB: SendInfoException
    nameWithType:
      CSharp: SendInfoException
      VB: SendInfoException
    qualifiedName:
      CSharp: TM.SendInfoException
      VB: TM.SendInfoException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendInfoException
      path: ../TM/TMClient.cs
      startLine: 1438
    summary: "\nException during sending info to server\n<br />Implements the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SendInfoException : Exception, ISerializable'
        VB: >-
          Public Class SendInfoException

              Inherits Exception

              Implements ISerializable
    seealso:
    - linkId: System.Exception
      commentId: T:System.Exception
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.SendInfoException.#ctor(System.String)
      commentId: M:TM.SendInfoException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: SendInfoException(String)
        VB: SendInfoException(String)
      nameWithType:
        CSharp: SendInfoException.SendInfoException(String)
        VB: SendInfoException.SendInfoException(String)
      qualifiedName:
        CSharp: TM.SendInfoException.SendInfoException(System.String)
        VB: TM.SendInfoException.SendInfoException(System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMClient.cs
        startLine: 1446
      summary: "\nInitializes a new instance of the <xref href=\"TM.SendInfoException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public SendInfoException(string msg)
          VB: Public Sub New(msg As String)
        parameters:
        - id: msg
          type: System.String
          description: The MSG.
      overload: TM.SendInfoException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.SendInfoException: 
    references:
      System.Exception: 
  - id: TM.SendPlanException
    commentId: T:TM.SendPlanException
    language: CSharp
    name:
      CSharp: SendPlanException
      VB: SendPlanException
    nameWithType:
      CSharp: SendPlanException
      VB: SendPlanException
    qualifiedName:
      CSharp: TM.SendPlanException
      VB: TM.SendPlanException
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMClient.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendPlanException
      path: ../TM/TMClient.cs
      startLine: 1458
    summary: "\nException during sending plan to server\n<br />Implements the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SendPlanException : Exception, ISerializable'
        VB: >-
          Public Class SendPlanException

              Inherits Exception

              Implements ISerializable
    seealso:
    - linkId: System.Exception
      commentId: T:System.Exception
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.SendPlanException.#ctor
      commentId: M:TM.SendPlanException.#ctor
      language: CSharp
      name:
        CSharp: SendPlanException()
        VB: SendPlanException()
      nameWithType:
        CSharp: SendPlanException.SendPlanException()
        VB: SendPlanException.SendPlanException()
      qualifiedName:
        CSharp: TM.SendPlanException.SendPlanException()
        VB: TM.SendPlanException.SendPlanException()
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMClient.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMClient.cs
        startLine: 1465
      summary: "\nInitializes a new instance of the <xref href=\"TM.SendPlanException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public SendPlanException()
          VB: Public Sub New
      overload: TM.SendPlanException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.SendPlanException: 
    references:
      System.Exception: 
  - id: TM.TMPacketHeader
    commentId: T:TM.TMPacketHeader
    language: CSharp
    name:
      CSharp: TMPacketHeader
      VB: TMPacketHeader
    nameWithType:
      CSharp: TMPacketHeader
      VB: TMPacketHeader
    qualifiedName:
      CSharp: TM.TMPacketHeader
      VB: TM.TMPacketHeader
    type: Struct
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMPacket.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: TMPacketHeader
      path: ../TM/TMPacket.cs
      startLine: 20
    summary: "\nStruct TMPacketHeader\n"
    example: []
    syntax:
      content:
        CSharp: public struct TMPacketHeader
        VB: Public Structure TMPacketHeader
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TM.TMPacketHeader.Length
      commentId: F:TM.TMPacketHeader.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: TMPacketHeader.Length
        VB: TMPacketHeader.Length
      qualifiedName:
        CSharp: TM.TMPacketHeader.Length
        VB: TM.TMPacketHeader.Length
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/TMPacket.cs
        startLine: 26
      summary: "\nThe length\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.TMPacketHeader.sign
      commentId: F:TM.TMPacketHeader.sign
      language: CSharp
      name:
        CSharp: sign
        VB: sign
      nameWithType:
        CSharp: TMPacketHeader.sign
        VB: TMPacketHeader.sign
      qualifiedName:
        CSharp: TM.TMPacketHeader.sign
        VB: TM.TMPacketHeader.sign
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: sign
        path: ../TM/TMPacket.cs
        startLine: 33
      summary: "\nsignature: &quot;XRay&quot; | &quot;Ther&quot; | .\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] sign
          VB: Public sign As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacketHeader.type
      commentId: F:TM.TMPacketHeader.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: TMPacketHeader.type
        VB: TMPacketHeader.type
      qualifiedName:
        CSharp: TM.TMPacketHeader.type
        VB: TM.TMPacketHeader.type
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: type
        path: ../TM/TMPacket.cs
        startLine: 39
      summary: "\ntype: command, data, info\n"
      example: []
      syntax:
        content:
          CSharp: public byte type
          VB: Public type As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacketHeader.value
      commentId: F:TM.TMPacketHeader.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: TMPacketHeader.value
        VB: TMPacketHeader.value
      qualifiedName:
        CSharp: TM.TMPacketHeader.value
        VB: TM.TMPacketHeader.value
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: value
        path: ../TM/TMPacket.cs
        startLine: 45
      summary: "\ncommand number\n"
      example: []
      syntax:
        content:
          CSharp: public byte value
          VB: Public value As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacketHeader.reserved
      commentId: F:TM.TMPacketHeader.reserved
      language: CSharp
      name:
        CSharp: reserved
        VB: reserved
      nameWithType:
        CSharp: TMPacketHeader.reserved
        VB: TMPacketHeader.reserved
      qualifiedName:
        CSharp: TM.TMPacketHeader.reserved
        VB: TM.TMPacketHeader.reserved
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: reserved
        path: ../TM/TMPacket.cs
        startLine: 51
      summary: "\nThe reserved\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] reserved
          VB: Public reserved As Byte()
        return:
          type: System.Byte[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacketHeader.datalength
      commentId: F:TM.TMPacketHeader.datalength
      language: CSharp
      name:
        CSharp: datalength
        VB: datalength
      nameWithType:
        CSharp: TMPacketHeader.datalength
        VB: TMPacketHeader.datalength
      qualifiedName:
        CSharp: TM.TMPacketHeader.datalength
        VB: TM.TMPacketHeader.datalength
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: datalength
        path: ../TM/TMPacket.cs
        startLine: 57
      summary: "\nlength of data after this header (bytes)\n"
      example: []
      syntax:
        content:
          CSharp: public uint datalength
          VB: Public datalength As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacketHeader.packet_number
      commentId: F:TM.TMPacketHeader.packet_number
      language: CSharp
      name:
        CSharp: packet_number
        VB: packet_number
      nameWithType:
        CSharp: TMPacketHeader.packet_number
        VB: TMPacketHeader.packet_number
      qualifiedName:
        CSharp: TM.TMPacketHeader.packet_number
        VB: TM.TMPacketHeader.packet_number
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: packet_number
        path: ../TM/TMPacket.cs
        startLine: 63
      summary: "\nThe packet number\n"
      example: []
      syntax:
        content:
          CSharp: public int packet_number
          VB: Public packet_number As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacketHeader.#ctor(TM.EServerType)
      commentId: M:TM.TMPacketHeader.#ctor(TM.EServerType)
      language: CSharp
      name:
        CSharp: TMPacketHeader(EServerType)
        VB: TMPacketHeader(EServerType)
      nameWithType:
        CSharp: TMPacketHeader.TMPacketHeader(EServerType)
        VB: TMPacketHeader.TMPacketHeader(EServerType)
      qualifiedName:
        CSharp: TM.TMPacketHeader.TMPacketHeader(TM.EServerType)
        VB: TM.TMPacketHeader.TMPacketHeader(TM.EServerType)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMPacket.cs
        startLine: 68
      summary: "\nInitializes a new instance of the <xref href=\"TM.TMPacketHeader\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacketHeader(EServerType server_type = EServerType.MCS)
          VB: Public Sub New(server_type As EServerType = EServerType.MCS)
        parameters:
        - id: server_type
          type: TM.EServerType
      overload: TM.TMPacketHeader.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.TMPacketHeader: 
    - id: TM.TMPacketHeader.ToString
      commentId: M:TM.TMPacketHeader.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: TMPacketHeader.ToString()
        VB: TMPacketHeader.ToString()
      qualifiedName:
        CSharp: TM.TMPacketHeader.ToString()
        VB: TM.TMPacketHeader.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/TMPacket.cs
        startLine: 81
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TM.TMPacketHeader.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
  - id: TM.TMPacket
    commentId: T:TM.TMPacket
    language: CSharp
    name:
      CSharp: TMPacket
      VB: TMPacket
    nameWithType:
      CSharp: TMPacket
      VB: TMPacket
    qualifiedName:
      CSharp: TM.TMPacket
      VB: TM.TMPacket
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TMPacket.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: TMPacket
      path: ../TM/TMPacket.cs
      startLine: 98
    summary: "\nImplements the exchange packet<xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TMPacket : IDisposable'
        VB: >-
          Public Class TMPacket

              Implements IDisposable
    seealso:
    - linkId: System.IDisposable
      commentId: T:System.IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.Byte)
      commentId: M:TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.Byte)
      language: CSharp
      name:
        CSharp: TMPacket(EServerType, EPacketType, Byte)
        VB: TMPacket(EServerType, EPacketType, Byte)
      nameWithType:
        CSharp: TMPacket.TMPacket(EServerType, EPacketType, Byte)
        VB: TMPacket.TMPacket(EServerType, EPacketType, Byte)
      qualifiedName:
        CSharp: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.Byte)
        VB: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.Byte)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMPacket.cs
        startLine: 113
      summary: "\nInitializes a new instance of the <xref href=\"TM.TMPacket\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacket(EServerType server_type, EPacketType type, byte cmd)
          VB: Public Sub New(server_type As EServerType, type As EPacketType, cmd As Byte)
        parameters:
        - id: server_type
          type: TM.EServerType
        - id: type
          type: TM.EPacketType
        - id: cmd
          type: System.Byte
      overload: TM.TMPacket.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.TMPacket: 
    - id: TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.Byte,System.Byte,System.Byte[])
      commentId: M:TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.Byte,System.Byte,System.Byte[])
      language: CSharp
      name:
        CSharp: TMPacket(EServerType, EPacketType, Byte, Byte, Byte[])
        VB: TMPacket(EServerType, EPacketType, Byte, Byte, Byte())
      nameWithType:
        CSharp: TMPacket.TMPacket(EServerType, EPacketType, Byte, Byte, Byte[])
        VB: TMPacket.TMPacket(EServerType, EPacketType, Byte, Byte, Byte())
      qualifiedName:
        CSharp: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.Byte, System.Byte, System.Byte[])
        VB: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.Byte, System.Byte, System.Byte())
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMPacket.cs
        startLine: 133
      summary: "\nInitializes a new instance of the <xref href=\"TM.TMPacket\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacket(EServerType server_type, EPacketType type, byte cmd, byte value = 0, byte[] data = null)
          VB: Public Sub New(server_type As EServerType, type As EPacketType, cmd As Byte, value As Byte = 0, data As Byte() = Nothing)
        parameters:
        - id: server_type
          type: TM.EServerType
        - id: type
          type: TM.EPacketType
        - id: cmd
          type: System.Byte
        - id: value
          type: System.Byte
        - id: data
          type: System.Byte[]
      overload: TM.TMPacket.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.TMPacket: 
    - id: TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.Byte,System.UInt32,System.Byte[])
      commentId: M:TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.Byte,System.UInt32,System.Byte[])
      language: CSharp
      name:
        CSharp: TMPacket(EServerType, EPacketType, Byte, UInt32, Byte[])
        VB: TMPacket(EServerType, EPacketType, Byte, UInt32, Byte())
      nameWithType:
        CSharp: TMPacket.TMPacket(EServerType, EPacketType, Byte, UInt32, Byte[])
        VB: TMPacket.TMPacket(EServerType, EPacketType, Byte, UInt32, Byte())
      qualifiedName:
        CSharp: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.Byte, System.UInt32, System.Byte[])
        VB: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.Byte, System.UInt32, System.Byte())
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMPacket.cs
        startLine: 172
      summary: "\nInitializes a new instance of the <xref href=\"TM.TMPacket\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacket(EServerType server_type, EPacketType type, byte value, uint length, byte[] data)
          VB: Public Sub New(server_type As EServerType, type As EPacketType, value As Byte, length As UInteger, data As Byte())
        parameters:
        - id: server_type
          type: TM.EServerType
        - id: type
          type: TM.EPacketType
        - id: value
          type: System.Byte
        - id: length
          type: System.UInt32
        - id: data
          type: System.Byte[]
      overload: TM.TMPacket.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.TMPacket: 
    - id: TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.String)
      commentId: M:TM.TMPacket.#ctor(TM.EServerType,TM.EPacketType,System.String)
      language: CSharp
      name:
        CSharp: TMPacket(EServerType, EPacketType, String)
        VB: TMPacket(EServerType, EPacketType, String)
      nameWithType:
        CSharp: TMPacket.TMPacket(EServerType, EPacketType, String)
        VB: TMPacket.TMPacket(EServerType, EPacketType, String)
      qualifiedName:
        CSharp: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.String)
        VB: TM.TMPacket.TMPacket(TM.EServerType, TM.EPacketType, System.String)
      type: Constructor
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: .ctor
        path: ../TM/TMPacket.cs
        startLine: 203
      summary: "\nInitializes a new instance of the <xref href=\"TM.TMPacket\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacket(EServerType server_type, EPacketType type, string data)
          VB: Public Sub New(server_type As EServerType, type As EPacketType, data As String)
        parameters:
        - id: server_type
          type: TM.EServerType
        - id: type
          type: TM.EPacketType
        - id: data
          type: System.String
      overload: TM.TMPacket.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        TM.TMPacket: 
    - id: TM.TMPacket.Header
      commentId: F:TM.TMPacket.Header
      language: CSharp
      name:
        CSharp: Header
        VB: Header
      nameWithType:
        CSharp: TMPacket.Header
        VB: TMPacket.Header
      qualifiedName:
        CSharp: TM.TMPacket.Header
        VB: TM.TMPacket.Header
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Header
        path: ../TM/TMPacket.cs
        startLine: 246
      summary: "\nThe packet header\n"
      example: []
      syntax:
        content:
          CSharp: public TMPacketHeader Header
          VB: Public Header As TMPacketHeader
        return:
          type: TM.TMPacketHeader
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacket.PacketNumber
      commentId: P:TM.TMPacket.PacketNumber
      language: CSharp
      name:
        CSharp: PacketNumber
        VB: PacketNumber
      nameWithType:
        CSharp: TMPacket.PacketNumber
        VB: TMPacket.PacketNumber
      qualifiedName:
        CSharp: TM.TMPacket.PacketNumber
        VB: TM.TMPacket.PacketNumber
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PacketNumber
        path: ../TM/TMPacket.cs
        startLine: 260
      summary: "\nThe absolute counter of packets\n"
      example: []
      syntax:
        content:
          CSharp: public static int PacketNumber { get; }
          VB: Public Shared ReadOnly Property PacketNumber As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.TMPacket.PacketNumber*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacket.Data
      commentId: P:TM.TMPacket.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: TMPacket.Data
        VB: TMPacket.Data
      qualifiedName:
        CSharp: TM.TMPacket.Data
        VB: TM.TMPacket.Data
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Data
        path: ../TM/TMPacket.cs
        startLine: 269
      summary: "\nThe array byte of TotalSize\n"
      example: []
      syntax:
        content:
          CSharp: public BufferChunk Data { get; }
          VB: Public ReadOnly Property Data As BufferChunk
        parameters: []
        return:
          type: TM.BufferChunk
      overload: TM.TMPacket.Data*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMPacket.ServerType
      commentId: P:TM.TMPacket.ServerType
      language: CSharp
      name:
        CSharp: ServerType
        VB: ServerType
      nameWithType:
        CSharp: TMPacket.ServerType
        VB: TMPacket.ServerType
      qualifiedName:
        CSharp: TM.TMPacket.ServerType
        VB: TM.TMPacket.ServerType
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerType
        path: ../TM/TMPacket.cs
        startLine: 278
      summary: "\nGets the type of the server.\n"
      example: []
      syntax:
        content:
          CSharp: public EServerType ServerType { get; }
          VB: Public ReadOnly Property ServerType As EServerType
        parameters: []
        return:
          type: TM.EServerType
      overload: TM.TMPacket.ServerType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMPacket.TotalSize
      commentId: P:TM.TMPacket.TotalSize
      language: CSharp
      name:
        CSharp: TotalSize
        VB: TotalSize
      nameWithType:
        CSharp: TMPacket.TotalSize
        VB: TMPacket.TotalSize
      qualifiedName:
        CSharp: TM.TMPacket.TotalSize
        VB: TM.TMPacket.TotalSize
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TotalSize
        path: ../TM/TMPacket.cs
        startLine: 289
      summary: "\nThe Total Size = sizeof(header) + sizeof(Data) + checksum\n"
      example: []
      syntax:
        content:
          CSharp: public int TotalSize { get; }
          VB: Public ReadOnly Property TotalSize As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.TMPacket.TotalSize*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: TM.TMPacket.Dispose
      commentId: M:TM.TMPacket.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: TMPacket.Dispose()
        VB: TMPacket.Dispose()
      qualifiedName:
        CSharp: TM.TMPacket.Dispose()
        VB: TM.TMPacket.Dispose()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Dispose
        path: ../TM/TMPacket.cs
        startLine: 305
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: TM.TMPacket.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacket.IsChecksumOK(System.Byte[])
      commentId: M:TM.TMPacket.IsChecksumOK(System.Byte[])
      language: CSharp
      name:
        CSharp: IsChecksumOK(Byte[])
        VB: IsChecksumOK(Byte())
      nameWithType:
        CSharp: TMPacket.IsChecksumOK(Byte[])
        VB: TMPacket.IsChecksumOK(Byte())
      qualifiedName:
        CSharp: TM.TMPacket.IsChecksumOK(System.Byte[])
        VB: TM.TMPacket.IsChecksumOK(System.Byte())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IsChecksumOK
        path: ../TM/TMPacket.cs
        startLine: 324
      summary: "\nChecks the checksum.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsChecksumOK(byte[] pdata)
          VB: Public Function IsChecksumOK(pdata As Byte()) As Boolean
        parameters:
        - id: pdata
          type: System.Byte[]
          description: The pdata.
        return:
          type: System.Boolean
          description: <code>true</code> if OK, <code>false</code> otherwise.
      overload: TM.TMPacket.IsChecksumOK*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.TMPacket.ToString
      commentId: M:TM.TMPacket.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: TMPacket.ToString()
        VB: TMPacket.ToString()
      qualifiedName:
        CSharp: TM.TMPacket.ToString()
        VB: TM.TMPacket.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TMPacket.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/TMPacket.cs
        startLine: 347
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TM.TMPacket.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
    references:
      System.IDisposable: 
  - id: TM.EConfigTag
    commentId: T:TM.EConfigTag
    language: CSharp
    name:
      CSharp: EConfigTag
      VB: EConfigTag
    nameWithType:
      CSharp: EConfigTag
      VB: EConfigTag
    qualifiedName:
      CSharp: TM.EConfigTag
      VB: TM.EConfigTag
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EConfigTag
      path: ../TM/TM_protocol.cs
      startLine: 26
    summary: "\nтеги пакета конфигурации устройства\n"
    example: []
    syntax:
      content:
        CSharp: public enum EConfigTag
        VB: Public Enum EConfigTag
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EConfigTag.VER
      commentId: F:TM.EConfigTag.VER
      language: CSharp
      name:
        CSharp: VER
        VB: VER
      nameWithType:
        CSharp: EConfigTag.VER
        VB: EConfigTag.VER
      qualifiedName:
        CSharp: TM.EConfigTag.VER
        VB: TM.EConfigTag.VER
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: VER
        path: ../TM/TM_protocol.cs
        startLine: 31
      summary: "\nверсия пакета, строка PACKET_VERTION_STR\n"
      example: []
      syntax:
        content:
          CSharp: VER = 1
          VB: VER = 1
        return:
          type: TM.EConfigTag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EConfigTag.CONNECT
      commentId: F:TM.EConfigTag.CONNECT
      language: CSharp
      name:
        CSharp: CONNECT
        VB: CONNECT
      nameWithType:
        CSharp: EConfigTag.CONNECT
        VB: EConfigTag.CONNECT
      qualifiedName:
        CSharp: TM.EConfigTag.CONNECT
        VB: TM.EConfigTag.CONNECT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CONNECT
        path: ../TM/TM_protocol.cs
        startLine: 37
      summary: "\nконнект, ParceCfgPacket_GetLinkData\n"
      example: []
      syntax:
        content:
          CSharp: CONNECT = 2
          VB: CONNECT = 2
        return:
          type: TM.EConfigTag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EConfigTag.DEVICE
      commentId: F:TM.EConfigTag.DEVICE
      language: CSharp
      name:
        CSharp: DEVICE
        VB: DEVICE
      nameWithType:
        CSharp: EConfigTag.DEVICE
        VB: EConfigTag.DEVICE
      qualifiedName:
        CSharp: TM.EConfigTag.DEVICE
        VB: TM.EConfigTag.DEVICE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DEVICE
        path: ../TM/TM_protocol.cs
        startLine: 43
      summary: "\nподключенное железо: \n"
      example: []
      syntax:
        content:
          CSharp: DEVICE = 3
          VB: DEVICE = 3
        return:
          type: TM.EConfigTag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EConfigTag.RTLINK
      commentId: F:TM.EConfigTag.RTLINK
      language: CSharp
      name:
        CSharp: RTLINK
        VB: RTLINK
      nameWithType:
        CSharp: EConfigTag.RTLINK
        VB: EConfigTag.RTLINK
      qualifiedName:
        CSharp: TM.EConfigTag.RTLINK
        VB: TM.EConfigTag.RTLINK
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RTLINK
        path: ../TM/TM_protocol.cs
        startLine: 49
      summary: "\nлинк ретранслятора (для NetRT -> TmNetScan)\n"
      example: []
      syntax:
        content:
          CSharp: RTLINK = 4
          VB: RTLINK = 4
        return:
          type: TM.EConfigTag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EConfigTag.TXTINFO
      commentId: F:TM.EConfigTag.TXTINFO
      language: CSharp
      name:
        CSharp: TXTINFO
        VB: TXTINFO
      nameWithType:
        CSharp: EConfigTag.TXTINFO
        VB: EConfigTag.TXTINFO
      qualifiedName:
        CSharp: TM.EConfigTag.TXTINFO
        VB: TM.EConfigTag.TXTINFO
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TXTINFO
        path: ../TM/TM_protocol.cs
        startLine: 55
      summary: "\nтекстовая информация в свободном виде\n"
      example: []
      syntax:
        content:
          CSharp: TXTINFO = 5
          VB: TXTINFO = 5
        return:
          type: TM.EConfigTag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EConfigTag.DEVCONFIG
      commentId: F:TM.EConfigTag.DEVCONFIG
      language: CSharp
      name:
        CSharp: DEVCONFIG
        VB: DEVCONFIG
      nameWithType:
        CSharp: EConfigTag.DEVCONFIG
        VB: EConfigTag.DEVCONFIG
      qualifiedName:
        CSharp: TM.EConfigTag.DEVCONFIG
        VB: TM.EConfigTag.DEVCONFIG
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DEVCONFIG
        path: ../TM/TM_protocol.cs
        startLine: 61
      summary: "\nбайт конфигурации устройства, зависит от устройства\n"
      example: []
      syntax:
        content:
          CSharp: DEVCONFIG = 6
          VB: DEVCONFIG = 6
        return:
          type: TM.EConfigTag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EDevErrorStatus
    commentId: T:TM.EDevErrorStatus
    language: CSharp
    name:
      CSharp: EDevErrorStatus
      VB: EDevErrorStatus
    nameWithType:
      CSharp: EDevErrorStatus
      VB: EDevErrorStatus
    qualifiedName:
      CSharp: TM.EDevErrorStatus
      VB: TM.EDevErrorStatus
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EDevErrorStatus
      path: ../TM/TM_protocol.cs
      startLine: 68
    summary: "\nстатус аппаратной ошибки, сгенеренной устройством\n"
    example: []
    syntax:
      content:
        CSharp: public enum EDevErrorStatus
        VB: Public Enum EDevErrorStatus
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EDevErrorStatus.INFORMATION
      commentId: F:TM.EDevErrorStatus.INFORMATION
      language: CSharp
      name:
        CSharp: INFORMATION
        VB: INFORMATION
      nameWithType:
        CSharp: EDevErrorStatus.INFORMATION
        VB: EDevErrorStatus.INFORMATION
      qualifiedName:
        CSharp: TM.EDevErrorStatus.INFORMATION
        VB: TM.EDevErrorStatus.INFORMATION
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: INFORMATION
        path: ../TM/TM_protocol.cs
        startLine: 73
      summary: "\nнесерьезная ошибка\n"
      example: []
      syntax:
        content:
          CSharp: INFORMATION = 0
          VB: INFORMATION = 0
        return:
          type: TM.EDevErrorStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDevErrorStatus.WARNING
      commentId: F:TM.EDevErrorStatus.WARNING
      language: CSharp
      name:
        CSharp: WARNING
        VB: WARNING
      nameWithType:
        CSharp: EDevErrorStatus.WARNING
        VB: EDevErrorStatus.WARNING
      qualifiedName:
        CSharp: TM.EDevErrorStatus.WARNING
        VB: TM.EDevErrorStatus.WARNING
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WARNING
        path: ../TM/TM_protocol.cs
        startLine: 79
      summary: "\nпредупреждение\n"
      example: []
      syntax:
        content:
          CSharp: WARNING = 1
          VB: WARNING = 1
        return:
          type: TM.EDevErrorStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDevErrorStatus.PROBLEM
      commentId: F:TM.EDevErrorStatus.PROBLEM
      language: CSharp
      name:
        CSharp: PROBLEM
        VB: PROBLEM
      nameWithType:
        CSharp: EDevErrorStatus.PROBLEM
        VB: EDevErrorStatus.PROBLEM
      qualifiedName:
        CSharp: TM.EDevErrorStatus.PROBLEM
        VB: TM.EDevErrorStatus.PROBLEM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PROBLEM
        path: ../TM/TM_protocol.cs
        startLine: 85
      summary: "\naппаратная проблема\n"
      example: []
      syntax:
        content:
          CSharp: PROBLEM = 2
          VB: PROBLEM = 2
        return:
          type: TM.EDevErrorStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EDeviceStatus
    commentId: T:TM.EDeviceStatus
    language: CSharp
    name:
      CSharp: EDeviceStatus
      VB: EDeviceStatus
    nameWithType:
      CSharp: EDeviceStatus
      VB: EDeviceStatus
    qualifiedName:
      CSharp: TM.EDeviceStatus
      VB: TM.EDeviceStatus
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EDeviceStatus
      path: ../TM/TM_protocol.cs
      startLine: 92
    summary: "\nсостояние устройства\n"
    example: []
    syntax:
      content:
        CSharp: public enum EDeviceStatus
        VB: Public Enum EDeviceStatus
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EDeviceStatus.OFF
      commentId: F:TM.EDeviceStatus.OFF
      language: CSharp
      name:
        CSharp: OFF
        VB: OFF
      nameWithType:
        CSharp: EDeviceStatus.OFF
        VB: EDeviceStatus.OFF
      qualifiedName:
        CSharp: TM.EDeviceStatus.OFF
        VB: TM.EDeviceStatus.OFF
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OFF
        path: ../TM/TM_protocol.cs
        startLine: 97
      summary: "\nвыключено или неотконфигурировано\n"
      example: []
      syntax:
        content:
          CSharp: OFF = 0
          VB: OFF = 0
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.OK
      commentId: F:TM.EDeviceStatus.OK
      language: CSharp
      name:
        CSharp: OK
        VB: OK
      nameWithType:
        CSharp: EDeviceStatus.OK
        VB: EDeviceStatus.OK
      qualifiedName:
        CSharp: TM.EDeviceStatus.OK
        VB: TM.EDeviceStatus.OK
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OK
        path: ../TM/TM_protocol.cs
        startLine: 103
      summary: "\nработает\n"
      example: []
      syntax:
        content:
          CSharp: OK = 1
          VB: OK = 1
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.ATTENTION
      commentId: F:TM.EDeviceStatus.ATTENTION
      language: CSharp
      name:
        CSharp: ATTENTION
        VB: ATTENTION
      nameWithType:
        CSharp: EDeviceStatus.ATTENTION
        VB: EDeviceStatus.ATTENTION
      qualifiedName:
        CSharp: TM.EDeviceStatus.ATTENTION
        VB: TM.EDeviceStatus.ATTENTION
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ATTENTION
        path: ../TM/TM_protocol.cs
        startLine: 109
      summary: "\nпредупреждение\n"
      example: []
      syntax:
        content:
          CSharp: ATTENTION = 2
          VB: ATTENTION = 2
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.HOT
      commentId: F:TM.EDeviceStatus.HOT
      language: CSharp
      name:
        CSharp: HOT
        VB: HOT
      nameWithType:
        CSharp: EDeviceStatus.HOT
        VB: EDeviceStatus.HOT
      qualifiedName:
        CSharp: TM.EDeviceStatus.HOT
        VB: TM.EDeviceStatus.HOT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: HOT
        path: ../TM/TM_protocol.cs
        startLine: 115
      summary: "\nактивно\n"
      example: []
      syntax:
        content:
          CSharp: HOT = 3
          VB: HOT = 3
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.OPEN
      commentId: F:TM.EDeviceStatus.OPEN
      language: CSharp
      name:
        CSharp: OPEN
        VB: OPEN
      nameWithType:
        CSharp: EDeviceStatus.OPEN
        VB: EDeviceStatus.OPEN
      qualifiedName:
        CSharp: TM.EDeviceStatus.OPEN
        VB: TM.EDeviceStatus.OPEN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OPEN
        path: ../TM/TM_protocol.cs
        startLine: 121
      summary: "\nдля двери\n"
      example: []
      syntax:
        content:
          CSharp: OPEN = 3
          VB: OPEN = 3
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.CRACKED
      commentId: F:TM.EDeviceStatus.CRACKED
      language: CSharp
      name:
        CSharp: CRACKED
        VB: CRACKED
      nameWithType:
        CSharp: EDeviceStatus.CRACKED
        VB: EDeviceStatus.CRACKED
      qualifiedName:
        CSharp: TM.EDeviceStatus.CRACKED
        VB: TM.EDeviceStatus.CRACKED
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CRACKED
        path: ../TM/TM_protocol.cs
        startLine: 127
      summary: "\nнеисправно\n"
      example: []
      syntax:
        content:
          CSharp: CRACKED = 4
          VB: CRACKED = 4
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.MOVING
      commentId: F:TM.EDeviceStatus.MOVING
      language: CSharp
      name:
        CSharp: MOVING
        VB: MOVING
      nameWithType:
        CSharp: EDeviceStatus.MOVING
        VB: EDeviceStatus.MOVING
      qualifiedName:
        CSharp: TM.EDeviceStatus.MOVING
        VB: TM.EDeviceStatus.MOVING
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MOVING
        path: ../TM/TM_protocol.cs
        startLine: 133
      summary: "\nв движении - перемещение кресла, детектора и т.д.\n"
      example: []
      syntax:
        content:
          CSharp: MOVING = 5
          VB: MOVING = 5
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceStatus.IN_WORK
      commentId: F:TM.EDeviceStatus.IN_WORK
      language: CSharp
      name:
        CSharp: IN_WORK
        VB: IN_WORK
      nameWithType:
        CSharp: EDeviceStatus.IN_WORK
        VB: EDeviceStatus.IN_WORK
      qualifiedName:
        CSharp: TM.EDeviceStatus.IN_WORK
        VB: TM.EDeviceStatus.IN_WORK
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IN_WORK
        path: ../TM/TM_protocol.cs
        startLine: 139
      summary: "\nв работе, но не блокирующей устройство, например для цилиндра фарадея\n"
      example: []
      syntax:
        content:
          CSharp: IN_WORK = 6
          VB: IN_WORK = 6
        return:
          type: TM.EDeviceStatus
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EPacketSettings
    commentId: T:TM.EPacketSettings
    language: CSharp
    name:
      CSharp: EPacketSettings
      VB: EPacketSettings
    nameWithType:
      CSharp: EPacketSettings
      VB: EPacketSettings
    qualifiedName:
      CSharp: TM.EPacketSettings
      VB: TM.EPacketSettings
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EPacketSettings
      path: ../TM/TM_protocol.cs
      startLine: 147
    summary: "\nбитовое поле TCPSrvServer::TMSettings или\nTCPSrvServer::TMSettings, настройки протокола взаимодействия\n"
    example: []
    syntax:
      content:
        CSharp: public enum EPacketSettings
        VB: Public Enum EPacketSettings
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EPacketSettings.NULL
      commentId: F:TM.EPacketSettings.NULL
      language: CSharp
      name:
        CSharp: "NULL"
        VB: "NULL"
      nameWithType:
        CSharp: EPacketSettings.NULL
        VB: EPacketSettings.NULL
      qualifiedName:
        CSharp: TM.EPacketSettings.NULL
        VB: TM.EPacketSettings.NULL
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: "NULL"
        path: ../TM/TM_protocol.cs
        startLine: 152
      summary: "\nникаких доп. настроек\n"
      example: []
      syntax:
        content:
          CSharp: NULL = 0
          VB: NULL = 0
        return:
          type: TM.EPacketSettings
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPacketSettings.AddCheckSumm
      commentId: F:TM.EPacketSettings.AddCheckSumm
      language: CSharp
      name:
        CSharp: AddCheckSumm
        VB: AddCheckSumm
      nameWithType:
        CSharp: EPacketSettings.AddCheckSumm
        VB: EPacketSettings.AddCheckSumm
      qualifiedName:
        CSharp: TM.EPacketSettings.AddCheckSumm
        VB: TM.EPacketSettings.AddCheckSumm
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: AddCheckSumm
        path: ../TM/TM_protocol.cs
        startLine: 158
      summary: "\nдобавлять контрольную сумму в пакетак к клиенту\n"
      example: []
      syntax:
        content:
          CSharp: AddCheckSumm = 1
          VB: AddCheckSumm = 1
        return:
          type: TM.EPacketSettings
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPacketSettings.ExpectCheckSumm
      commentId: F:TM.EPacketSettings.ExpectCheckSumm
      language: CSharp
      name:
        CSharp: ExpectCheckSumm
        VB: ExpectCheckSumm
      nameWithType:
        CSharp: EPacketSettings.ExpectCheckSumm
        VB: EPacketSettings.ExpectCheckSumm
      qualifiedName:
        CSharp: TM.EPacketSettings.ExpectCheckSumm
        VB: TM.EPacketSettings.ExpectCheckSumm
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ExpectCheckSumm
        path: ../TM/TM_protocol.cs
        startLine: 164
      summary: "\nожидать и проверять контрольную сумму в пакетах от клиента\n"
      example: []
      syntax:
        content:
          CSharp: ExpectCheckSumm = 2
          VB: ExpectCheckSumm = 2
        return:
          type: TM.EPacketSettings
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPacketSettings.CheckPacketSize
      commentId: F:TM.EPacketSettings.CheckPacketSize
      language: CSharp
      name:
        CSharp: CheckPacketSize
        VB: CheckPacketSize
      nameWithType:
        CSharp: EPacketSettings.CheckPacketSize
        VB: EPacketSettings.CheckPacketSize
      qualifiedName:
        CSharp: TM.EPacketSettings.CheckPacketSize
        VB: TM.EPacketSettings.CheckPacketSize
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CheckPacketSize
        path: ../TM/TM_protocol.cs
        startLine: 170
      summary: "\nпроверять входящий размер пакета (значение поля TMpacketSizeLimit)\n"
      example: []
      syntax:
        content:
          CSharp: CheckPacketSize = 4
          VB: CheckPacketSize = 4
        return:
          type: TM.EPacketSettings
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EPacketType
    commentId: T:TM.EPacketType
    language: CSharp
    name:
      CSharp: EPacketType
      VB: EPacketType
    nameWithType:
      CSharp: EPacketType
      VB: EPacketType
    qualifiedName:
      CSharp: TM.EPacketType
      VB: TM.EPacketType
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EPacketType
      path: ../TM/TM_protocol.cs
      startLine: 178
    summary: "\nEnum EPacketType\n"
    example: []
    syntax:
      content:
        CSharp: public enum EPacketType
        VB: Public Enum EPacketType
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EPacketType.Command
      commentId: F:TM.EPacketType.Command
      language: CSharp
      name:
        CSharp: Command
        VB: Command
      nameWithType:
        CSharp: EPacketType.Command
        VB: EPacketType.Command
      qualifiedName:
        CSharp: TM.EPacketType.Command
        VB: TM.EPacketType.Command
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Command
        path: ../TM/TM_protocol.cs
        startLine: 183
      summary: "\nThe command\n"
      example: []
      syntax:
        content:
          CSharp: Command = 1
          VB: Command = 1
        return:
          type: TM.EPacketType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPacketType.Data
      commentId: F:TM.EPacketType.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: EPacketType.Data
        VB: EPacketType.Data
      qualifiedName:
        CSharp: TM.EPacketType.Data
        VB: TM.EPacketType.Data
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Data
        path: ../TM/TM_protocol.cs
        startLine: 188
      summary: "\nThe data\n"
      example: []
      syntax:
        content:
          CSharp: Data = 2
          VB: Data = 2
        return:
          type: TM.EPacketType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPacketType.Info
      commentId: F:TM.EPacketType.Info
      language: CSharp
      name:
        CSharp: Info
        VB: Info
      nameWithType:
        CSharp: EPacketType.Info
        VB: EPacketType.Info
      qualifiedName:
        CSharp: TM.EPacketType.Info
        VB: TM.EPacketType.Info
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Info
        path: ../TM/TM_protocol.cs
        startLine: 193
      summary: "\nThe information\n"
      example: []
      syntax:
        content:
          CSharp: Info = 3
          VB: Info = 3
        return:
          type: TM.EPacketType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPacketType.Error
      commentId: F:TM.EPacketType.Error
      language: CSharp
      name:
        CSharp: Error
        VB: Error
      nameWithType:
        CSharp: EPacketType.Error
        VB: EPacketType.Error
      qualifiedName:
        CSharp: TM.EPacketType.Error
        VB: TM.EPacketType.Error
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Error
        path: ../TM/TM_protocol.cs
        startLine: 198
      summary: "\nThe error\n"
      example: []
      syntax:
        content:
          CSharp: Error = 4
          VB: Error = 4
        return:
          type: TM.EPacketType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.PlanSpot
    commentId: T:TM.PlanSpot
    language: CSharp
    name:
      CSharp: PlanSpot
      VB: PlanSpot
    nameWithType:
      CSharp: PlanSpot
      VB: PlanSpot
    qualifiedName:
      CSharp: TM.PlanSpot
      VB: TM.PlanSpot
    type: Struct
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PlanSpot
      path: ../TM/TM_protocol.cs
      startLine: 204
    summary: "\nодин &quot;выстрел&quot; для пересылки (направление+энергия+интенсивность)\n"
    example: []
    syntax:
      content:
        CSharp: public struct PlanSpot
        VB: Public Structure PlanSpot
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TM.PlanSpot.Length
      commentId: F:TM.PlanSpot.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: PlanSpot.Length
        VB: PlanSpot.Length
      qualifiedName:
        CSharp: TM.PlanSpot.Length
        VB: TM.PlanSpot.Length
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/TM_protocol.cs
        startLine: 210
      summary: "\nThe length of structure\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.PlanSpot.id
      commentId: P:TM.PlanSpot.id
      language: CSharp
      name:
        CSharp: id
        VB: id
      nameWithType:
        CSharp: PlanSpot.id
        VB: PlanSpot.id
      qualifiedName:
        CSharp: TM.PlanSpot.id
        VB: TM.PlanSpot.id
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: id
        path: ../TM/TM_protocol.cs
        startLine: 217
      summary: "\nуникальный идентификатор записи (напр. счетчик)\n"
      example: []
      syntax:
        content:
          CSharp: public int id { get; set; }
          VB: Public Property id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpot.id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpot.xangle
      commentId: P:TM.PlanSpot.xangle
      language: CSharp
      name:
        CSharp: xangle
        VB: xangle
      nameWithType:
        CSharp: PlanSpot.xangle
        VB: PlanSpot.xangle
      qualifiedName:
        CSharp: TM.PlanSpot.xangle
        VB: TM.PlanSpot.xangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: xangle
        path: ../TM/TM_protocol.cs
        startLine: 227
      summary: "\nугол по горизонтали\n"
      example: []
      syntax:
        content:
          CSharp: public float xangle { get; set; }
          VB: Public Property xangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpot.xangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpot.zangle
      commentId: P:TM.PlanSpot.zangle
      language: CSharp
      name:
        CSharp: zangle
        VB: zangle
      nameWithType:
        CSharp: PlanSpot.zangle
        VB: PlanSpot.zangle
      qualifiedName:
        CSharp: TM.PlanSpot.zangle
        VB: TM.PlanSpot.zangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: zangle
        path: ../TM/TM_protocol.cs
        startLine: 237
      summary: "\nугол по вертикали\n"
      example: []
      syntax:
        content:
          CSharp: public float zangle { get; set; }
          VB: Public Property zangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpot.zangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpot.energy
      commentId: P:TM.PlanSpot.energy
      language: CSharp
      name:
        CSharp: energy
        VB: energy
      nameWithType:
        CSharp: PlanSpot.energy
        VB: PlanSpot.energy
      qualifiedName:
        CSharp: TM.PlanSpot.energy
        VB: TM.PlanSpot.energy
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: energy
        path: ../TM/TM_protocol.cs
        startLine: 247
      summary: "\nэнергия, MeV\n"
      example: []
      syntax:
        content:
          CSharp: public float energy { get; set; }
          VB: Public Property energy As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpot.energy*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpot.pcount
      commentId: P:TM.PlanSpot.pcount
      language: CSharp
      name:
        CSharp: pcount
        VB: pcount
      nameWithType:
        CSharp: PlanSpot.pcount
        VB: PlanSpot.pcount
      qualifiedName:
        CSharp: TM.PlanSpot.pcount
        VB: TM.PlanSpot.pcount
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: pcount
        path: ../TM/TM_protocol.cs
        startLine: 257
      summary: "\nколичество протонов\n"
      example: []
      syntax:
        content:
          CSharp: public float pcount { get; set; }
          VB: Public Property pcount As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpot.pcount*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpot.ToString
      commentId: M:TM.PlanSpot.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PlanSpot.ToString()
        VB: PlanSpot.ToString()
      qualifiedName:
        CSharp: TM.PlanSpot.ToString()
        VB: TM.PlanSpot.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/TM_protocol.cs
        startLine: 269
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TM.PlanSpot.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
  - id: TM.PlanSpotFull
    commentId: T:TM.PlanSpotFull
    language: CSharp
    name:
      CSharp: PlanSpotFull
      VB: PlanSpotFull
    nameWithType:
      CSharp: PlanSpotFull
      VB: PlanSpotFull
    qualifiedName:
      CSharp: TM.PlanSpotFull
      VB: TM.PlanSpotFull
    type: Struct
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PlanSpotFull
      path: ../TM/TM_protocol.cs
      startLine: 281
    summary: "\nОбъединённая структура <xref href=\"TM.PlanSpot\" data-throw-if-not-resolved=\"false\"></xref> + <xref href=\"TM.PlanSpotResult\" data-throw-if-not-resolved=\"false\"></xref> \n"
    example: []
    syntax:
      content:
        CSharp: public struct PlanSpotFull
        VB: Public Structure PlanSpotFull
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TM.PlanSpotFull.Length
      commentId: F:TM.PlanSpotFull.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: PlanSpotFull.Length
        VB: PlanSpotFull.Length
      qualifiedName:
        CSharp: TM.PlanSpotFull.Length
        VB: TM.PlanSpotFull.Length
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/TM_protocol.cs
        startLine: 287
      summary: "\nThe length\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.PlanSpotFull.id
      commentId: P:TM.PlanSpotFull.id
      language: CSharp
      name:
        CSharp: id
        VB: id
      nameWithType:
        CSharp: PlanSpotFull.id
        VB: PlanSpotFull.id
      qualifiedName:
        CSharp: TM.PlanSpotFull.id
        VB: TM.PlanSpotFull.id
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: id
        path: ../TM/TM_protocol.cs
        startLine: 294
      summary: "\nуникальный идентификатор записи (напр. счетчик)\n"
      example: []
      syntax:
        content:
          CSharp: public int id { get; set; }
          VB: Public Property id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotFull.id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.xangle
      commentId: P:TM.PlanSpotFull.xangle
      language: CSharp
      name:
        CSharp: xangle
        VB: xangle
      nameWithType:
        CSharp: PlanSpotFull.xangle
        VB: PlanSpotFull.xangle
      qualifiedName:
        CSharp: TM.PlanSpotFull.xangle
        VB: TM.PlanSpotFull.xangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: xangle
        path: ../TM/TM_protocol.cs
        startLine: 304
      summary: "\nугол по горизонтали\n"
      example: []
      syntax:
        content:
          CSharp: public float xangle { get; set; }
          VB: Public Property xangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.xangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.zangle
      commentId: P:TM.PlanSpotFull.zangle
      language: CSharp
      name:
        CSharp: zangle
        VB: zangle
      nameWithType:
        CSharp: PlanSpotFull.zangle
        VB: PlanSpotFull.zangle
      qualifiedName:
        CSharp: TM.PlanSpotFull.zangle
        VB: TM.PlanSpotFull.zangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: zangle
        path: ../TM/TM_protocol.cs
        startLine: 314
      summary: "\nугол по вертикали\n"
      example: []
      syntax:
        content:
          CSharp: public float zangle { get; set; }
          VB: Public Property zangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.zangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.energy
      commentId: P:TM.PlanSpotFull.energy
      language: CSharp
      name:
        CSharp: energy
        VB: energy
      nameWithType:
        CSharp: PlanSpotFull.energy
        VB: PlanSpotFull.energy
      qualifiedName:
        CSharp: TM.PlanSpotFull.energy
        VB: TM.PlanSpotFull.energy
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: energy
        path: ../TM/TM_protocol.cs
        startLine: 324
      summary: "\nэнергия, MeV\n"
      example: []
      syntax:
        content:
          CSharp: public float energy { get; set; }
          VB: Public Property energy As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.energy*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.pcount
      commentId: P:TM.PlanSpotFull.pcount
      language: CSharp
      name:
        CSharp: pcount
        VB: pcount
      nameWithType:
        CSharp: PlanSpotFull.pcount
        VB: PlanSpotFull.pcount
      qualifiedName:
        CSharp: TM.PlanSpotFull.pcount
        VB: TM.PlanSpotFull.pcount
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: pcount
        path: ../TM/TM_protocol.cs
        startLine: 334
      summary: "\nколичество протонов\n"
      example: []
      syntax:
        content:
          CSharp: public float pcount { get; set; }
          VB: Public Property pcount As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.pcount*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.done
      commentId: P:TM.PlanSpotFull.done
      language: CSharp
      name:
        CSharp: done
        VB: done
      nameWithType:
        CSharp: PlanSpotFull.done
        VB: PlanSpotFull.done
      qualifiedName:
        CSharp: TM.PlanSpotFull.done
        VB: TM.PlanSpotFull.done
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: done
        path: ../TM/TM_protocol.cs
        startLine: 344
      summary: "\nвыстрел сделан\n"
      example: []
      syntax:
        content:
          CSharp: public int done { get; set; }
          VB: Public Property done As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotFull.done*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.result_xangle
      commentId: P:TM.PlanSpotFull.result_xangle
      language: CSharp
      name:
        CSharp: result_xangle
        VB: result_xangle
      nameWithType:
        CSharp: PlanSpotFull.result_xangle
        VB: PlanSpotFull.result_xangle
      qualifiedName:
        CSharp: TM.PlanSpotFull.result_xangle
        VB: TM.PlanSpotFull.result_xangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: result_xangle
        path: ../TM/TM_protocol.cs
        startLine: 354
      summary: "\nрезультат угол по горизонтали\n"
      example: []
      syntax:
        content:
          CSharp: public float result_xangle { get; set; }
          VB: Public Property result_xangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.result_xangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.result_zangle
      commentId: P:TM.PlanSpotFull.result_zangle
      language: CSharp
      name:
        CSharp: result_zangle
        VB: result_zangle
      nameWithType:
        CSharp: PlanSpotFull.result_zangle
        VB: PlanSpotFull.result_zangle
      qualifiedName:
        CSharp: TM.PlanSpotFull.result_zangle
        VB: TM.PlanSpotFull.result_zangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: result_zangle
        path: ../TM/TM_protocol.cs
        startLine: 364
      summary: "\nрезультат угол по вертикали\n"
      example: []
      syntax:
        content:
          CSharp: public float result_zangle { get; set; }
          VB: Public Property result_zangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.result_zangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.result_pcount
      commentId: P:TM.PlanSpotFull.result_pcount
      language: CSharp
      name:
        CSharp: result_pcount
        VB: result_pcount
      nameWithType:
        CSharp: PlanSpotFull.result_pcount
        VB: PlanSpotFull.result_pcount
      qualifiedName:
        CSharp: TM.PlanSpotFull.result_pcount
        VB: TM.PlanSpotFull.result_pcount
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: result_pcount
        path: ../TM/TM_protocol.cs
        startLine: 374
      summary: "\nрезультат количество протонов\n"
      example: []
      syntax:
        content:
          CSharp: public float result_pcount { get; set; }
          VB: Public Property result_pcount As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotFull.result_pcount*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.changed
      commentId: P:TM.PlanSpotFull.changed
      language: CSharp
      name:
        CSharp: changed
        VB: changed
      nameWithType:
        CSharp: PlanSpotFull.changed
        VB: PlanSpotFull.changed
      qualifiedName:
        CSharp: TM.PlanSpotFull.changed
        VB: TM.PlanSpotFull.changed
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: changed
        path: ../TM/TM_protocol.cs
        startLine: 384
      summary: "\nсостояние изменилось\n"
      example: []
      syntax:
        content:
          CSharp: public int changed { get; set; }
          VB: Public Property changed As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotFull.changed*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.need_to_sent
      commentId: P:TM.PlanSpotFull.need_to_sent
      language: CSharp
      name:
        CSharp: need_to_sent
        VB: need_to_sent
      nameWithType:
        CSharp: PlanSpotFull.need_to_sent
        VB: PlanSpotFull.need_to_sent
      qualifiedName:
        CSharp: TM.PlanSpotFull.need_to_sent
        VB: TM.PlanSpotFull.need_to_sent
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: need_to_sent
        path: ../TM/TM_protocol.cs
        startLine: 394
      summary: "\nнадо отослать изменения клиенту\n"
      example: []
      syntax:
        content:
          CSharp: public int need_to_sent { get; set; }
          VB: Public Property need_to_sent As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotFull.need_to_sent*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotFull.ToString
      commentId: M:TM.PlanSpotFull.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PlanSpotFull.ToString()
        VB: PlanSpotFull.ToString()
      qualifiedName:
        CSharp: TM.PlanSpotFull.ToString()
        VB: TM.PlanSpotFull.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/TM_protocol.cs
        startLine: 406
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TM.PlanSpotFull.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
    references:
      TM.PlanSpot: 
      TM.PlanSpotResult: 
  - id: TM.PlanSpotTopass
    commentId: T:TM.PlanSpotTopass
    language: CSharp
    name:
      CSharp: PlanSpotTopass
      VB: PlanSpotTopass
    nameWithType:
      CSharp: PlanSpotTopass
      VB: PlanSpotTopass
    qualifiedName:
      CSharp: TM.PlanSpotTopass
      VB: TM.PlanSpotTopass
    type: Struct
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PlanSpotTopass
      path: ../TM/TM_protocol.cs
      startLine: 422
    summary: "\nодин &quot;выстрел&quot; для пересылки (направление+энергия+интенсивность)\n"
    example: []
    syntax:
      content:
        CSharp: public struct PlanSpotTopass
        VB: Public Structure PlanSpotTopass
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TM.PlanSpotTopass.Length
      commentId: F:TM.PlanSpotTopass.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: PlanSpotTopass.Length
        VB: PlanSpotTopass.Length
      qualifiedName:
        CSharp: TM.PlanSpotTopass.Length
        VB: TM.PlanSpotTopass.Length
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/TM_protocol.cs
        startLine: 428
      summary: "\nThe length\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.PlanSpotTopass.id
      commentId: P:TM.PlanSpotTopass.id
      language: CSharp
      name:
        CSharp: id
        VB: id
      nameWithType:
        CSharp: PlanSpotTopass.id
        VB: PlanSpotTopass.id
      qualifiedName:
        CSharp: TM.PlanSpotTopass.id
        VB: TM.PlanSpotTopass.id
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: id
        path: ../TM/TM_protocol.cs
        startLine: 433
      summary: "\nуникальный идентификатор записи (напр. счетчик)\n"
      example: []
      syntax:
        content:
          CSharp: public int id { get; set; }
          VB: Public Property id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotTopass.id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotTopass.xangle
      commentId: P:TM.PlanSpotTopass.xangle
      language: CSharp
      name:
        CSharp: xangle
        VB: xangle
      nameWithType:
        CSharp: PlanSpotTopass.xangle
        VB: PlanSpotTopass.xangle
      qualifiedName:
        CSharp: TM.PlanSpotTopass.xangle
        VB: TM.PlanSpotTopass.xangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: xangle
        path: ../TM/TM_protocol.cs
        startLine: 443
      summary: "\nугол по горизонтали\n"
      example: []
      syntax:
        content:
          CSharp: public float xangle { get; set; }
          VB: Public Property xangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotTopass.xangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotTopass.zangle
      commentId: P:TM.PlanSpotTopass.zangle
      language: CSharp
      name:
        CSharp: zangle
        VB: zangle
      nameWithType:
        CSharp: PlanSpotTopass.zangle
        VB: PlanSpotTopass.zangle
      qualifiedName:
        CSharp: TM.PlanSpotTopass.zangle
        VB: TM.PlanSpotTopass.zangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: zangle
        path: ../TM/TM_protocol.cs
        startLine: 453
      summary: "\nугол по вертикали\n"
      example: []
      syntax:
        content:
          CSharp: public float zangle { get; set; }
          VB: Public Property zangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotTopass.zangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotTopass.energy
      commentId: F:TM.PlanSpotTopass.energy
      language: CSharp
      name:
        CSharp: energy
        VB: energy
      nameWithType:
        CSharp: PlanSpotTopass.energy
        VB: PlanSpotTopass.energy
      qualifiedName:
        CSharp: TM.PlanSpotTopass.energy
        VB: TM.PlanSpotTopass.energy
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: energy
        path: ../TM/TM_protocol.cs
        startLine: 464
      summary: "\nэнергия, MeV\n"
      example: []
      syntax:
        content:
          CSharp: public float energy
          VB: Public energy As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: TM.PlanSpotTopass.pcount
      commentId: P:TM.PlanSpotTopass.pcount
      language: CSharp
      name:
        CSharp: pcount
        VB: pcount
      nameWithType:
        CSharp: PlanSpotTopass.pcount
        VB: PlanSpotTopass.pcount
      qualifiedName:
        CSharp: TM.PlanSpotTopass.pcount
        VB: TM.PlanSpotTopass.pcount
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: pcount
        path: ../TM/TM_protocol.cs
        startLine: 469
      summary: "\nколичество протонов\n"
      example: []
      syntax:
        content:
          CSharp: public float pcount { get; set; }
          VB: Public Property pcount As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotTopass.pcount*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotTopass.ToString
      commentId: M:TM.PlanSpotTopass.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PlanSpotTopass.ToString()
        VB: PlanSpotTopass.ToString()
      qualifiedName:
        CSharp: TM.PlanSpotTopass.ToString()
        VB: TM.PlanSpotTopass.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/TM_protocol.cs
        startLine: 479
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TM.PlanSpotTopass.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
  - id: TM.PlanSpotResult
    commentId: T:TM.PlanSpotResult
    language: CSharp
    name:
      CSharp: PlanSpotResult
      VB: PlanSpotResult
    nameWithType:
      CSharp: PlanSpotResult
      VB: PlanSpotResult
    qualifiedName:
      CSharp: TM.PlanSpotResult
      VB: TM.PlanSpotResult
    type: Struct
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PlanSpotResult
      path: ../TM/TM_protocol.cs
      startLine: 492
    summary: "\nСтруктура с результатами выполнения плана облучения\n"
    example: []
    syntax:
      content:
        CSharp: public struct PlanSpotResult
        VB: Public Structure PlanSpotResult
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: TM.PlanSpotResult.Length
      commentId: F:TM.PlanSpotResult.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: PlanSpotResult.Length
        VB: PlanSpotResult.Length
      qualifiedName:
        CSharp: TM.PlanSpotResult.Length
        VB: TM.PlanSpotResult.Length
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Length
        path: ../TM/TM_protocol.cs
        startLine: 498
      summary: "\nThe length\n"
      example: []
      syntax:
        content:
          CSharp: public static uint Length
          VB: Public Shared Length As UInteger
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: TM.PlanSpotResult.id
      commentId: P:TM.PlanSpotResult.id
      language: CSharp
      name:
        CSharp: id
        VB: id
      nameWithType:
        CSharp: PlanSpotResult.id
        VB: PlanSpotResult.id
      qualifiedName:
        CSharp: TM.PlanSpotResult.id
        VB: TM.PlanSpotResult.id
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: id
        path: ../TM/TM_protocol.cs
        startLine: 505
      summary: "\nуникальный идентификатор записи (напр. счетчик)\n"
      example: []
      syntax:
        content:
          CSharp: public int id { get; set; }
          VB: Public Property id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotResult.id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotResult.result_xangle
      commentId: P:TM.PlanSpotResult.result_xangle
      language: CSharp
      name:
        CSharp: result_xangle
        VB: result_xangle
      nameWithType:
        CSharp: PlanSpotResult.result_xangle
        VB: PlanSpotResult.result_xangle
      qualifiedName:
        CSharp: TM.PlanSpotResult.result_xangle
        VB: TM.PlanSpotResult.result_xangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: result_xangle
        path: ../TM/TM_protocol.cs
        startLine: 515
      summary: "\nугол по горизонтали\n"
      example: []
      syntax:
        content:
          CSharp: public float result_xangle { get; set; }
          VB: Public Property result_xangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotResult.result_xangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotResult.result_zangle
      commentId: P:TM.PlanSpotResult.result_zangle
      language: CSharp
      name:
        CSharp: result_zangle
        VB: result_zangle
      nameWithType:
        CSharp: PlanSpotResult.result_zangle
        VB: PlanSpotResult.result_zangle
      qualifiedName:
        CSharp: TM.PlanSpotResult.result_zangle
        VB: TM.PlanSpotResult.result_zangle
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: result_zangle
        path: ../TM/TM_protocol.cs
        startLine: 525
      summary: "\nугол по вертикали\n"
      example: []
      syntax:
        content:
          CSharp: public float result_zangle { get; set; }
          VB: Public Property result_zangle As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotResult.result_zangle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotResult.result_pcount
      commentId: P:TM.PlanSpotResult.result_pcount
      language: CSharp
      name:
        CSharp: result_pcount
        VB: result_pcount
      nameWithType:
        CSharp: PlanSpotResult.result_pcount
        VB: PlanSpotResult.result_pcount
      qualifiedName:
        CSharp: TM.PlanSpotResult.result_pcount
        VB: TM.PlanSpotResult.result_pcount
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: result_pcount
        path: ../TM/TM_protocol.cs
        startLine: 535
      summary: "\nколичество протонов\n"
      example: []
      syntax:
        content:
          CSharp: public float result_pcount { get; set; }
          VB: Public Property result_pcount As Single
        parameters: []
        return:
          type: System.Single
      overload: TM.PlanSpotResult.result_pcount*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotResult.done
      commentId: P:TM.PlanSpotResult.done
      language: CSharp
      name:
        CSharp: done
        VB: done
      nameWithType:
        CSharp: PlanSpotResult.done
        VB: PlanSpotResult.done
      qualifiedName:
        CSharp: TM.PlanSpotResult.done
        VB: TM.PlanSpotResult.done
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: done
        path: ../TM/TM_protocol.cs
        startLine: 545
      summary: "\nрезультат выполнения MCS_SHOT_RESULT_DONE\n"
      example: []
      syntax:
        content:
          CSharp: public int done { get; set; }
          VB: Public Property done As Integer
        parameters: []
        return:
          type: System.Int32
      overload: TM.PlanSpotResult.done*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TM.PlanSpotResult.ToString
      commentId: M:TM.PlanSpotResult.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PlanSpotResult.ToString()
        VB: PlanSpotResult.ToString()
      qualifiedName:
        CSharp: TM.PlanSpotResult.ToString()
        VB: TM.PlanSpotResult.ToString()
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ToString
        path: ../TM/TM_protocol.cs
        startLine: 557
      summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: TM.PlanSpotResult.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.String: 
  - id: TM.EServerType
    commentId: T:TM.EServerType
    language: CSharp
    name:
      CSharp: EServerType
      VB: EServerType
    nameWithType:
      CSharp: EServerType
      VB: EServerType
    qualifiedName:
      CSharp: TM.EServerType
      VB: TM.EServerType
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EServerType
      path: ../TM/TM_protocol.cs
      startLine: 571
    summary: "\nEnum EServerType\n"
    example: []
    syntax:
      content:
        CSharp: public enum EServerType
        VB: Public Enum EServerType
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    - TM.EServerType.TM.TMPacketSignature.Signature
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EServerType.UNKNOWN
      commentId: F:TM.EServerType.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: EServerType.UNKNOWN
        VB: EServerType.UNKNOWN
      qualifiedName:
        CSharp: TM.EServerType.UNKNOWN
        VB: TM.EServerType.UNKNOWN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWN
        path: ../TM/TM_protocol.cs
        startLine: 576
      summary: "\nнеизвестный тип. Только для пинг-запросов\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWN = 0
          VB: UNKNOWN = 0
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.TEMPERATURE
      commentId: F:TM.EServerType.TEMPERATURE
      language: CSharp
      name:
        CSharp: TEMPERATURE
        VB: TEMPERATURE
      nameWithType:
        CSharp: EServerType.TEMPERATURE
        VB: EServerType.TEMPERATURE
      qualifiedName:
        CSharp: TM.EServerType.TEMPERATURE
        VB: TM.EServerType.TEMPERATURE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TEMPERATURE
        path: ../TM/TM_protocol.cs
        startLine: 582
      summary: "\nтемпературный сервер активный TM, пассивный Linklib\n"
      example: []
      syntax:
        content:
          CSharp: TEMPERATURE = 1
          VB: TEMPERATURE = 1
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.XRAY
      commentId: F:TM.EServerType.XRAY
      language: CSharp
      name:
        CSharp: XRAY
        VB: XRAY
      nameWithType:
        CSharp: EServerType.XRAY
        VB: EServerType.XRAY
      qualifiedName:
        CSharp: TM.EServerType.XRAY
        VB: TM.EServerType.XRAY
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XRAY
        path: ../TM/TM_protocol.cs
        startLine: 588
      summary: "\nрентгеновский сервер активный TM, пассивный Linklib\n"
      example: []
      syntax:
        content:
          CSharp: XRAY = 2
          VB: XRAY = 2
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.PFS
      commentId: F:TM.EServerType.PFS
      language: CSharp
      name:
        CSharp: PFS
        VB: PFS
      nameWithType:
        CSharp: EServerType.PFS
        VB: EServerType.PFS
      qualifiedName:
        CSharp: TM.EServerType.PFS
        VB: TM.EServerType.PFS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS
        path: ../TM/TM_protocol.cs
        startLine: 594
      summary: "\nсервер системы фиксации пациента - TM протокол не использует пассивный\n"
      example: []
      syntax:
        content:
          CSharp: PFS = 3
          VB: PFS = 3
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.TMC
      commentId: F:TM.EServerType.TMC
      language: CSharp
      name:
        CSharp: TMC
        VB: TMC
      nameWithType:
        CSharp: EServerType.TMC
        VB: EServerType.TMC
      qualifiedName:
        CSharp: TM.EServerType.TMC
        VB: TM.EServerType.TMC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMC
        path: ../TM/TM_protocol.cs
        startLine: 600
      summary: "\nсервер - программы управления томографом TMC, активный TM\n"
      example: []
      syntax:
        content:
          CSharp: TMC = 4
          VB: TMC = 4
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.DACADC
      commentId: F:TM.EServerType.DACADC
      language: CSharp
      name:
        CSharp: DACADC
        VB: DACADC
      nameWithType:
        CSharp: EServerType.DACADC
        VB: EServerType.DACADC
      qualifiedName:
        CSharp: TM.EServerType.DACADC
        VB: TM.EServerType.DACADC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DACADC
        path: ../TM/TM_protocol.cs
        startLine: 606
      summary: "\nсервер ЦАП/АЦП- TM протокол не использует, пассивный\n"
      example: []
      syntax:
        content:
          CSharp: DACADC = 5
          VB: DACADC = 5
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.ACC
      commentId: F:TM.EServerType.ACC
      language: CSharp
      name:
        CSharp: ACC
        VB: ACC
      nameWithType:
        CSharp: EServerType.ACC
        VB: EServerType.ACC
      qualifiedName:
        CSharp: TM.EServerType.ACC
        VB: TM.EServerType.ACC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ACC
        path: ../TM/TM_protocol.cs
        startLine: 612
      summary: "\nускоряющий сервер - TM протокол не использует, пассивный\n"
      example: []
      syntax:
        content:
          CSharp: ACC = 6
          VB: ACC = 6
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.PFS_PROXY
      commentId: F:TM.EServerType.PFS_PROXY
      language: CSharp
      name:
        CSharp: PFS_PROXY
        VB: PFS_PROXY
      nameWithType:
        CSharp: EServerType.PFS_PROXY
        VB: EServerType.PFS_PROXY
      qualifiedName:
        CSharp: TM.EServerType.PFS_PROXY
        VB: TM.EServerType.PFS_PROXY
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS_PROXY
        path: ../TM/TM_protocol.cs
        startLine: 618
      summary: "\nкресло-контроль - прокси-сервер системы фиксации пациента, активный\n"
      example: []
      syntax:
        content:
          CSharp: PFS_PROXY = 7
          VB: PFS_PROXY = 7
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.TERMLITE
      commentId: F:TM.EServerType.TERMLITE
      language: CSharp
      name:
        CSharp: TERMLITE
        VB: TERMLITE
      nameWithType:
        CSharp: EServerType.TERMLITE
        VB: EServerType.TERMLITE
      qualifiedName:
        CSharp: TM.EServerType.TERMLITE
        VB: TM.EServerType.TERMLITE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TERMLITE
        path: ../TM/TM_protocol.cs
        startLine: 624
      summary: "\nупрощенный температурный сервер (один слэйв, пассивный DIRECT. пассивный Linklib\n"
      example: []
      syntax:
        content:
          CSharp: TERMLITE = 8
          VB: TERMLITE = 8
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.NETRT
      commentId: F:TM.EServerType.NETRT
      language: CSharp
      name:
        CSharp: NETRT
        VB: NETRT
      nameWithType:
        CSharp: EServerType.NETRT
        VB: EServerType.NETRT
      qualifiedName:
        CSharp: TM.EServerType.NETRT
        VB: TM.EServerType.NETRT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NETRT
        path: ../TM/TM_protocol.cs
        startLine: 630
      summary: "\nретранслятор (конфигурация), пассивный TM\n"
      example: []
      syntax:
        content:
          CSharp: NETRT = 9
          VB: NETRT = 9
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.GT
      commentId: F:TM.EServerType.GT
      language: CSharp
      name:
        CSharp: GT
        VB: GT
      nameWithType:
        CSharp: EServerType.GT
        VB: EServerType.GT
      qualifiedName:
        CSharp: TM.EServerType.GT
        VB: TM.EServerType.GT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GT
        path: ../TM/TM_protocol.cs
        startLine: 636
      summary: "\nглобал-тест, пассивный TM\n"
      example: []
      syntax:
        content:
          CSharp: GT = 10
          VB: GT = 10
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.NETSCAN
      commentId: F:TM.EServerType.NETSCAN
      language: CSharp
      name:
        CSharp: NETSCAN
        VB: NETSCAN
      nameWithType:
        CSharp: EServerType.NETSCAN
        VB: EServerType.NETSCAN
      qualifiedName:
        CSharp: TM.EServerType.NETSCAN
        VB: TM.EServerType.NETSCAN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NETSCAN
        path: ../TM/TM_protocol.cs
        startLine: 642
      summary: "\nдля сканера - только от клиента к неизвестному серверу, TM\n"
      example: []
      syntax:
        content:
          CSharp: NETSCAN = 11
          VB: NETSCAN = 11
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.ASH
      commentId: F:TM.EServerType.ASH
      language: CSharp
      name:
        CSharp: ASH
        VB: ASH
      nameWithType:
        CSharp: EServerType.ASH
        VB: EServerType.ASH
      qualifiedName:
        CSharp: TM.EServerType.ASH
        VB: TM.EServerType.ASH
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ASH
        path: ../TM/TM_protocol.cs
        startLine: 648
      summary: "\nустройство на AT-Mega, пассивный DIRECT, пассивный Linklib\n"
      example: []
      syntax:
        content:
          CSharp: ASH = 12
          VB: ASH = 12
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.MCS
      commentId: F:TM.EServerType.MCS
      language: CSharp
      name:
        CSharp: MCS
        VB: MCS
      nameWithType:
        CSharp: EServerType.MCS
        VB: EServerType.MCS
      qualifiedName:
        CSharp: TM.EServerType.MCS
        VB: TM.EServerType.MCS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MCS
        path: ../TM/TM_protocol.cs
        startLine: 654
      summary: "\nMainControl-упр.ускорителем как сервер, активный TM\n"
      example: []
      syntax:
        content:
          CSharp: MCS = 14
          VB: MCS = 14
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.AUTONICS
      commentId: F:TM.EServerType.AUTONICS
      language: CSharp
      name:
        CSharp: AUTONICS
        VB: AUTONICS
      nameWithType:
        CSharp: EServerType.AUTONICS
        VB: EServerType.AUTONICS
      qualifiedName:
        CSharp: TM.EServerType.AUTONICS
        VB: TM.EServerType.AUTONICS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: AUTONICS
        path: ../TM/TM_protocol.cs
        startLine: 660
      summary: "\nперемещатель Autonics пассивный RS232, активный TM\n"
      example: []
      syntax:
        content:
          CSharp: AUTONICS = 15
          VB: AUTONICS = 15
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.CAMSRV
      commentId: F:TM.EServerType.CAMSRV
      language: CSharp
      name:
        CSharp: CAMSRV
        VB: CAMSRV
      nameWithType:
        CSharp: EServerType.CAMSRV
        VB: EServerType.CAMSRV
      qualifiedName:
        CSharp: TM.EServerType.CAMSRV
        VB: TM.EServerType.CAMSRV
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CAMSRV
        path: ../TM/TM_protocol.cs
        startLine: 666
      summary: "\nкамеры (П.Лунев) активный Linklib\n"
      example: []
      syntax:
        content:
          CSharp: CAMSRV = 16
          VB: CAMSRV = 16
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerType.ECS
      commentId: F:TM.EServerType.ECS
      language: CSharp
      name:
        CSharp: ECS
        VB: ECS
      nameWithType:
        CSharp: EServerType.ECS
        VB: EServerType.ECS
      qualifiedName:
        CSharp: TM.EServerType.ECS
        VB: TM.EServerType.ECS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ECS
        path: ../TM/TM_protocol.cs
        startLine: 672
      summary: "\nконтроль выпуска - камера+фарадей пассивный CUSTOM, активный TM\n"
      example: []
      syntax:
        content:
          CSharp: ECS = 17
          VB: ECS = 17
        return:
          type: TM.EServerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EPlanCommand
    commentId: T:TM.EPlanCommand
    language: CSharp
    name:
      CSharp: EPlanCommand
      VB: EPlanCommand
    nameWithType:
      CSharp: EPlanCommand
      VB: EPlanCommand
    qualifiedName:
      CSharp: TM.EPlanCommand
      VB: TM.EPlanCommand
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EPlanCommand
      path: ../TM/TM_protocol.cs
      startLine: 679
    summary: "\nкоманды на выполнение CMD в пакете пересылки клиент->сервер\n"
    example: []
    syntax:
      content:
        CSharp: public enum EPlanCommand
        VB: Public Enum EPlanCommand
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EPlanCommand.GETSTATE
      commentId: F:TM.EPlanCommand.GETSTATE
      language: CSharp
      name:
        CSharp: GETSTATE
        VB: GETSTATE
      nameWithType:
        CSharp: EPlanCommand.GETSTATE
        VB: EPlanCommand.GETSTATE
      qualifiedName:
        CSharp: TM.EPlanCommand.GETSTATE
        VB: TM.EPlanCommand.GETSTATE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: GETSTATE
        path: ../TM/TM_protocol.cs
        startLine: 684
      summary: "\nзапрос на статус сервера\n"
      example: []
      syntax:
        content:
          CSharp: GETSTATE = 1
          VB: GETSTATE = 1
        return:
          type: TM.EPlanCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPlanCommand.CLEARPLAN
      commentId: F:TM.EPlanCommand.CLEARPLAN
      language: CSharp
      name:
        CSharp: CLEARPLAN
        VB: CLEARPLAN
      nameWithType:
        CSharp: EPlanCommand.CLEARPLAN
        VB: EPlanCommand.CLEARPLAN
      qualifiedName:
        CSharp: TM.EPlanCommand.CLEARPLAN
        VB: TM.EPlanCommand.CLEARPLAN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CLEARPLAN
        path: ../TM/TM_protocol.cs
        startLine: 690
      summary: "\nзапрос на очистку плана\n"
      example: []
      syntax:
        content:
          CSharp: CLEARPLAN = 2
          VB: CLEARPLAN = 2
        return:
          type: TM.EPlanCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPlanCommand.STARTPLAN
      commentId: F:TM.EPlanCommand.STARTPLAN
      language: CSharp
      name:
        CSharp: STARTPLAN
        VB: STARTPLAN
      nameWithType:
        CSharp: EPlanCommand.STARTPLAN
        VB: EPlanCommand.STARTPLAN
      qualifiedName:
        CSharp: TM.EPlanCommand.STARTPLAN
        VB: TM.EPlanCommand.STARTPLAN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: STARTPLAN
        path: ../TM/TM_protocol.cs
        startLine: 696
      summary: "\nзапрос на старт плана\n"
      example: []
      syntax:
        content:
          CSharp: STARTPLAN = 3
          VB: STARTPLAN = 3
        return:
          type: TM.EPlanCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPlanCommand.PAUSEPLAN
      commentId: F:TM.EPlanCommand.PAUSEPLAN
      language: CSharp
      name:
        CSharp: PAUSEPLAN
        VB: PAUSEPLAN
      nameWithType:
        CSharp: EPlanCommand.PAUSEPLAN
        VB: EPlanCommand.PAUSEPLAN
      qualifiedName:
        CSharp: TM.EPlanCommand.PAUSEPLAN
        VB: TM.EPlanCommand.PAUSEPLAN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PAUSEPLAN
        path: ../TM/TM_protocol.cs
        startLine: 702
      summary: "\nзапрос на паузу\n"
      example: []
      syntax:
        content:
          CSharp: PAUSEPLAN = 4
          VB: PAUSEPLAN = 4
        return:
          type: TM.EPlanCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EPlanCommand.STOPPLAN
      commentId: F:TM.EPlanCommand.STOPPLAN
      language: CSharp
      name:
        CSharp: STOPPLAN
        VB: STOPPLAN
      nameWithType:
        CSharp: EPlanCommand.STOPPLAN
        VB: EPlanCommand.STOPPLAN
      qualifiedName:
        CSharp: TM.EPlanCommand.STOPPLAN
        VB: TM.EPlanCommand.STOPPLAN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: STOPPLAN
        path: ../TM/TM_protocol.cs
        startLine: 708
      summary: "\nзапрос на останов\n"
      example: []
      syntax:
        content:
          CSharp: STOPPLAN = 5
          VB: STOPPLAN = 5
        return:
          type: TM.EPlanCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EComPortErr
    commentId: T:TM.EComPortErr
    language: CSharp
    name:
      CSharp: EComPortErr
      VB: EComPortErr
    nameWithType:
      CSharp: EComPortErr
      VB: EComPortErr
    qualifiedName:
      CSharp: TM.EComPortErr
      VB: TM.EComPortErr
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EComPortErr
      path: ../TM/TM_protocol.cs
      startLine: 717
    summary: "\nошибки, выбираемые RS485_GetErrorMessage\n"
    example: []
    syntax:
      content:
        CSharp: public enum EComPortErr
        VB: Public Enum EComPortErr
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EComPortErr.NOT
      commentId: F:TM.EComPortErr.NOT
      language: CSharp
      name:
        CSharp: NOT
        VB: NOT
      nameWithType:
        CSharp: EComPortErr.NOT
        VB: EComPortErr.NOT
      qualifiedName:
        CSharp: TM.EComPortErr.NOT
        VB: TM.EComPortErr.NOT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NOT
        path: ../TM/TM_protocol.cs
        startLine: 722
      summary: "\nНет ошибок\n"
      example: []
      syntax:
        content:
          CSharp: NOT = 0
          VB: NOT = 0
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.CS
      commentId: F:TM.EComPortErr.CS
      language: CSharp
      name:
        CSharp: CS
        VB: CS
      nameWithType:
        CSharp: EComPortErr.CS
        VB: EComPortErr.CS
      qualifiedName:
        CSharp: TM.EComPortErr.CS
        VB: TM.EComPortErr.CS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CS
        path: ../TM/TM_protocol.cs
        startLine: 728
      summary: "\nОшибка контрольной суммы\n"
      example: []
      syntax:
        content:
          CSharp: CS = 1
          VB: CS = 1
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.EEPROM
      commentId: F:TM.EComPortErr.EEPROM
      language: CSharp
      name:
        CSharp: EEPROM
        VB: EEPROM
      nameWithType:
        CSharp: EComPortErr.EEPROM
        VB: EComPortErr.EEPROM
      qualifiedName:
        CSharp: TM.EComPortErr.EEPROM
        VB: TM.EComPortErr.EEPROM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: EEPROM
        path: ../TM/TM_protocol.cs
        startLine: 734
      summary: "\nОшибка операции с EEPROM\n"
      example: []
      syntax:
        content:
          CSharp: EEPROM = 2
          VB: EEPROM = 2
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.CNT
      commentId: F:TM.EComPortErr.CNT
      language: CSharp
      name:
        CSharp: CNT
        VB: CNT
      nameWithType:
        CSharp: EComPortErr.CNT
        VB: EComPortErr.CNT
      qualifiedName:
        CSharp: TM.EComPortErr.CNT
        VB: TM.EComPortErr.CNT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CNT
        path: ../TM/TM_protocol.cs
        startLine: 740
      summary: "\nОшибка значения счётчика байт записи\n"
      example: []
      syntax:
        content:
          CSharp: CNT = 3
          VB: CNT = 3
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.CMD
      commentId: F:TM.EComPortErr.CMD
      language: CSharp
      name:
        CSharp: CMD
        VB: CMD
      nameWithType:
        CSharp: EComPortErr.CMD
        VB: EComPortErr.CMD
      qualifiedName:
        CSharp: TM.EComPortErr.CMD
        VB: TM.EComPortErr.CMD
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CMD
        path: ../TM/TM_protocol.cs
        startLine: 746
      summary: "\nКод команды не поддерживается\n"
      example: []
      syntax:
        content:
          CSharp: CMD = 4
          VB: CMD = 4
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.CID
      commentId: F:TM.EComPortErr.CID
      language: CSharp
      name:
        CSharp: CID
        VB: CID
      nameWithType:
        CSharp: EComPortErr.CID
        VB: EComPortErr.CID
      qualifiedName:
        CSharp: TM.EComPortErr.CID
        VB: TM.EComPortErr.CID
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CID
        path: ../TM/TM_protocol.cs
        startLine: 752
      summary: "\nОшибка номера канала\n"
      example: []
      syntax:
        content:
          CSharp: CID = 5
          VB: CID = 5
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.PID
      commentId: F:TM.EComPortErr.PID
      language: CSharp
      name:
        CSharp: PID
        VB: PID
      nameWithType:
        CSharp: EComPortErr.PID
        VB: EComPortErr.PID
      qualifiedName:
        CSharp: TM.EComPortErr.PID
        VB: TM.EComPortErr.PID
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PID
        path: ../TM/TM_protocol.cs
        startLine: 758
      summary: "\nОшибка номера параметра\n"
      example: []
      syntax:
        content:
          CSharp: PID = 6
          VB: PID = 6
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.PRM
      commentId: F:TM.EComPortErr.PRM
      language: CSharp
      name:
        CSharp: PRM
        VB: PRM
      nameWithType:
        CSharp: EComPortErr.PRM
        VB: EComPortErr.PRM
      qualifiedName:
        CSharp: TM.EComPortErr.PRM
        VB: TM.EComPortErr.PRM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PRM
        path: ../TM/TM_protocol.cs
        startLine: 764
      summary: "\nОшибка количества параметров\n"
      example: []
      syntax:
        content:
          CSharp: PRM = 7
          VB: PRM = 7
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.VAL
      commentId: F:TM.EComPortErr.VAL
      language: CSharp
      name:
        CSharp: VAL
        VB: VAL
      nameWithType:
        CSharp: EComPortErr.VAL
        VB: EComPortErr.VAL
      qualifiedName:
        CSharp: TM.EComPortErr.VAL
        VB: TM.EComPortErr.VAL
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: VAL
        path: ../TM/TM_protocol.cs
        startLine: 770
      summary: "\nОшибка значения параметра\n"
      example: []
      syntax:
        content:
          CSharp: VAL = 8
          VB: VAL = 8
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.TO
      commentId: F:TM.EComPortErr.TO
      language: CSharp
      name:
        CSharp: TO
        VB: TO
      nameWithType:
        CSharp: EComPortErr.TO
        VB: EComPortErr.TO
      qualifiedName:
        CSharp: TM.EComPortErr.TO
        VB: TM.EComPortErr.TO
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TO
        path: ../TM/TM_protocol.cs
        startLine: 776
      summary: "\nОшибка времени ожидания\n"
      example: []
      syntax:
        content:
          CSharp: TO = 9
          VB: TO = 9
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.BUSY
      commentId: F:TM.EComPortErr.BUSY
      language: CSharp
      name:
        CSharp: BUSY
        VB: BUSY
      nameWithType:
        CSharp: EComPortErr.BUSY
        VB: EComPortErr.BUSY
      qualifiedName:
        CSharp: TM.EComPortErr.BUSY
        VB: TM.EComPortErr.BUSY
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: BUSY
        path: ../TM/TM_protocol.cs
        startLine: 782
      summary: "\nУстройство занято\n"
      example: []
      syntax:
        content:
          CSharp: BUSY = 10
          VB: BUSY = 10
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.ANQ
      commentId: F:TM.EComPortErr.ANQ
      language: CSharp
      name:
        CSharp: ANQ
        VB: ANQ
      nameWithType:
        CSharp: EComPortErr.ANQ
        VB: EComPortErr.ANQ
      qualifiedName:
        CSharp: TM.EComPortErr.ANQ
        VB: TM.EComPortErr.ANQ
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ANQ
        path: ../TM/TM_protocol.cs
        startLine: 789
      summary: "\nНе совпали адреса запрашиваемого и ответившего устройства <br />\nили код запроса не равен коду ответа\n"
      example: []
      syntax:
        content:
          CSharp: ANQ = 11
          VB: ANQ = 11
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.TO_RO
      commentId: F:TM.EComPortErr.TO_RO
      language: CSharp
      name:
        CSharp: TO_RO
        VB: TO_RO
      nameWithType:
        CSharp: EComPortErr.TO_RO
        VB: EComPortErr.TO_RO
      qualifiedName:
        CSharp: TM.EComPortErr.TO_RO
        VB: TM.EComPortErr.TO_RO
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TO_RO
        path: ../TM/TM_protocol.cs
        startLine: 795
      summary: "\nИстекло время ожидания в канале приёма USART0\n"
      example: []
      syntax:
        content:
          CSharp: TO_RO = 12
          VB: TO_RO = 12
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.UPE0
      commentId: F:TM.EComPortErr.UPE0
      language: CSharp
      name:
        CSharp: UPE0
        VB: UPE0
      nameWithType:
        CSharp: EComPortErr.UPE0
        VB: EComPortErr.UPE0
      qualifiedName:
        CSharp: TM.EComPortErr.UPE0
        VB: TM.EComPortErr.UPE0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UPE0
        path: ../TM/TM_protocol.cs
        startLine: 801
      summary: "\nUART Parity Error USART0\n"
      example: []
      syntax:
        content:
          CSharp: UPE0 = 13
          VB: UPE0 = 13
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR0
      commentId: F:TM.EComPortErr.DOR0
      language: CSharp
      name:
        CSharp: DOR0
        VB: DOR0
      nameWithType:
        CSharp: EComPortErr.DOR0
        VB: EComPortErr.DOR0
      qualifiedName:
        CSharp: TM.EComPortErr.DOR0
        VB: TM.EComPortErr.DOR0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR0
        path: ../TM/TM_protocol.cs
        startLine: 807
      summary: "\nData Overrun USART0\n"
      example: []
      syntax:
        content:
          CSharp: DOR0 = 14
          VB: DOR0 = 14
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR0_UPE0
      commentId: F:TM.EComPortErr.DOR0_UPE0
      language: CSharp
      name:
        CSharp: DOR0_UPE0
        VB: DOR0_UPE0
      nameWithType:
        CSharp: EComPortErr.DOR0_UPE0
        VB: EComPortErr.DOR0_UPE0
      qualifiedName:
        CSharp: TM.EComPortErr.DOR0_UPE0
        VB: TM.EComPortErr.DOR0_UPE0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR0_UPE0
        path: ../TM/TM_protocol.cs
        startLine: 813
      summary: "\nDOR0_UPE0\n"
      example: []
      syntax:
        content:
          CSharp: DOR0_UPE0 = 15
          VB: DOR0_UPE0 = 15
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE0
      commentId: F:TM.EComPortErr.FE0
      language: CSharp
      name:
        CSharp: FE0
        VB: FE0
      nameWithType:
        CSharp: EComPortErr.FE0
        VB: EComPortErr.FE0
      qualifiedName:
        CSharp: TM.EComPortErr.FE0
        VB: TM.EComPortErr.FE0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE0
        path: ../TM/TM_protocol.cs
        startLine: 819
      summary: "\nFrame Error USART0\n"
      example: []
      syntax:
        content:
          CSharp: FE0 = 16
          VB: FE0 = 16
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE0_UPE0
      commentId: F:TM.EComPortErr.FE0_UPE0
      language: CSharp
      name:
        CSharp: FE0_UPE0
        VB: FE0_UPE0
      nameWithType:
        CSharp: EComPortErr.FE0_UPE0
        VB: EComPortErr.FE0_UPE0
      qualifiedName:
        CSharp: TM.EComPortErr.FE0_UPE0
        VB: TM.EComPortErr.FE0_UPE0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE0_UPE0
        path: ../TM/TM_protocol.cs
        startLine: 825
      summary: "\nFE0_UPE0\n"
      example: []
      syntax:
        content:
          CSharp: FE0_UPE0 = 17
          VB: FE0_UPE0 = 17
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE0_DOR0
      commentId: F:TM.EComPortErr.FE0_DOR0
      language: CSharp
      name:
        CSharp: FE0_DOR0
        VB: FE0_DOR0
      nameWithType:
        CSharp: EComPortErr.FE0_DOR0
        VB: EComPortErr.FE0_DOR0
      qualifiedName:
        CSharp: TM.EComPortErr.FE0_DOR0
        VB: TM.EComPortErr.FE0_DOR0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE0_DOR0
        path: ../TM/TM_protocol.cs
        startLine: 831
      summary: "\nFE0_DOR0\n"
      example: []
      syntax:
        content:
          CSharp: FE0_DOR0 = 18
          VB: FE0_DOR0 = 18
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE0_DOR0_UPE0
      commentId: F:TM.EComPortErr.FE0_DOR0_UPE0
      language: CSharp
      name:
        CSharp: FE0_DOR0_UPE0
        VB: FE0_DOR0_UPE0
      nameWithType:
        CSharp: EComPortErr.FE0_DOR0_UPE0
        VB: EComPortErr.FE0_DOR0_UPE0
      qualifiedName:
        CSharp: TM.EComPortErr.FE0_DOR0_UPE0
        VB: TM.EComPortErr.FE0_DOR0_UPE0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE0_DOR0_UPE0
        path: ../TM/TM_protocol.cs
        startLine: 837
      summary: "\nFE0_DOR0_UPE0\n"
      example: []
      syntax:
        content:
          CSharp: FE0_DOR0_UPE0 = 19
          VB: FE0_DOR0_UPE0 = 19
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.TO_R1
      commentId: F:TM.EComPortErr.TO_R1
      language: CSharp
      name:
        CSharp: TO_R1
        VB: TO_R1
      nameWithType:
        CSharp: EComPortErr.TO_R1
        VB: EComPortErr.TO_R1
      qualifiedName:
        CSharp: TM.EComPortErr.TO_R1
        VB: TM.EComPortErr.TO_R1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TO_R1
        path: ../TM/TM_protocol.cs
        startLine: 843
      summary: "\nИстекло время ожидания в канале приёма USART1\n"
      example: []
      syntax:
        content:
          CSharp: TO_R1 = 20
          VB: TO_R1 = 20
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.UPE1
      commentId: F:TM.EComPortErr.UPE1
      language: CSharp
      name:
        CSharp: UPE1
        VB: UPE1
      nameWithType:
        CSharp: EComPortErr.UPE1
        VB: EComPortErr.UPE1
      qualifiedName:
        CSharp: TM.EComPortErr.UPE1
        VB: TM.EComPortErr.UPE1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UPE1
        path: ../TM/TM_protocol.cs
        startLine: 849
      summary: "\nUART Parity Error USART1\n"
      example: []
      syntax:
        content:
          CSharp: UPE1 = 21
          VB: UPE1 = 21
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR1
      commentId: F:TM.EComPortErr.DOR1
      language: CSharp
      name:
        CSharp: DOR1
        VB: DOR1
      nameWithType:
        CSharp: EComPortErr.DOR1
        VB: EComPortErr.DOR1
      qualifiedName:
        CSharp: TM.EComPortErr.DOR1
        VB: TM.EComPortErr.DOR1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR1
        path: ../TM/TM_protocol.cs
        startLine: 855
      summary: "\nData Overrun USART1\n"
      example: []
      syntax:
        content:
          CSharp: DOR1 = 22
          VB: DOR1 = 22
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR1_UPE1
      commentId: F:TM.EComPortErr.DOR1_UPE1
      language: CSharp
      name:
        CSharp: DOR1_UPE1
        VB: DOR1_UPE1
      nameWithType:
        CSharp: EComPortErr.DOR1_UPE1
        VB: EComPortErr.DOR1_UPE1
      qualifiedName:
        CSharp: TM.EComPortErr.DOR1_UPE1
        VB: TM.EComPortErr.DOR1_UPE1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR1_UPE1
        path: ../TM/TM_protocol.cs
        startLine: 861
      summary: "\nDOR1_UPE1\n"
      example: []
      syntax:
        content:
          CSharp: DOR1_UPE1 = 23
          VB: DOR1_UPE1 = 23
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE1
      commentId: F:TM.EComPortErr.FE1
      language: CSharp
      name:
        CSharp: FE1
        VB: FE1
      nameWithType:
        CSharp: EComPortErr.FE1
        VB: EComPortErr.FE1
      qualifiedName:
        CSharp: TM.EComPortErr.FE1
        VB: TM.EComPortErr.FE1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE1
        path: ../TM/TM_protocol.cs
        startLine: 867
      summary: "\nFrame Error USART1\n"
      example: []
      syntax:
        content:
          CSharp: FE1 = 24
          VB: FE1 = 24
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE1_UPE1
      commentId: F:TM.EComPortErr.FE1_UPE1
      language: CSharp
      name:
        CSharp: FE1_UPE1
        VB: FE1_UPE1
      nameWithType:
        CSharp: EComPortErr.FE1_UPE1
        VB: EComPortErr.FE1_UPE1
      qualifiedName:
        CSharp: TM.EComPortErr.FE1_UPE1
        VB: TM.EComPortErr.FE1_UPE1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE1_UPE1
        path: ../TM/TM_protocol.cs
        startLine: 873
      summary: "\nFE1_UPE1\n"
      example: []
      syntax:
        content:
          CSharp: FE1_UPE1 = 25
          VB: FE1_UPE1 = 25
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE1_DOR1
      commentId: F:TM.EComPortErr.FE1_DOR1
      language: CSharp
      name:
        CSharp: FE1_DOR1
        VB: FE1_DOR1
      nameWithType:
        CSharp: EComPortErr.FE1_DOR1
        VB: EComPortErr.FE1_DOR1
      qualifiedName:
        CSharp: TM.EComPortErr.FE1_DOR1
        VB: TM.EComPortErr.FE1_DOR1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE1_DOR1
        path: ../TM/TM_protocol.cs
        startLine: 879
      summary: "\nFE1_DOR1\n"
      example: []
      syntax:
        content:
          CSharp: FE1_DOR1 = 26
          VB: FE1_DOR1 = 26
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE1_DOR1_UPE1
      commentId: F:TM.EComPortErr.FE1_DOR1_UPE1
      language: CSharp
      name:
        CSharp: FE1_DOR1_UPE1
        VB: FE1_DOR1_UPE1
      nameWithType:
        CSharp: EComPortErr.FE1_DOR1_UPE1
        VB: EComPortErr.FE1_DOR1_UPE1
      qualifiedName:
        CSharp: TM.EComPortErr.FE1_DOR1_UPE1
        VB: TM.EComPortErr.FE1_DOR1_UPE1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE1_DOR1_UPE1
        path: ../TM/TM_protocol.cs
        startLine: 885
      summary: "\nFE1_DOR1_UPE1\n"
      example: []
      syntax:
        content:
          CSharp: FE1_DOR1_UPE1 = 27
          VB: FE1_DOR1_UPE1 = 27
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.TO_R2
      commentId: F:TM.EComPortErr.TO_R2
      language: CSharp
      name:
        CSharp: TO_R2
        VB: TO_R2
      nameWithType:
        CSharp: EComPortErr.TO_R2
        VB: EComPortErr.TO_R2
      qualifiedName:
        CSharp: TM.EComPortErr.TO_R2
        VB: TM.EComPortErr.TO_R2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TO_R2
        path: ../TM/TM_protocol.cs
        startLine: 891
      summary: "\nИстекло время ожидания в канале приёма USART2\n"
      example: []
      syntax:
        content:
          CSharp: TO_R2 = 28
          VB: TO_R2 = 28
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.UPE2
      commentId: F:TM.EComPortErr.UPE2
      language: CSharp
      name:
        CSharp: UPE2
        VB: UPE2
      nameWithType:
        CSharp: EComPortErr.UPE2
        VB: EComPortErr.UPE2
      qualifiedName:
        CSharp: TM.EComPortErr.UPE2
        VB: TM.EComPortErr.UPE2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UPE2
        path: ../TM/TM_protocol.cs
        startLine: 897
      summary: "\nUART Parity Error USART2\n"
      example: []
      syntax:
        content:
          CSharp: UPE2 = 29
          VB: UPE2 = 29
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR2
      commentId: F:TM.EComPortErr.DOR2
      language: CSharp
      name:
        CSharp: DOR2
        VB: DOR2
      nameWithType:
        CSharp: EComPortErr.DOR2
        VB: EComPortErr.DOR2
      qualifiedName:
        CSharp: TM.EComPortErr.DOR2
        VB: TM.EComPortErr.DOR2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR2
        path: ../TM/TM_protocol.cs
        startLine: 903
      summary: "\nData Overrun USART2\n"
      example: []
      syntax:
        content:
          CSharp: DOR2 = 30
          VB: DOR2 = 30
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR2_UPE2
      commentId: F:TM.EComPortErr.DOR2_UPE2
      language: CSharp
      name:
        CSharp: DOR2_UPE2
        VB: DOR2_UPE2
      nameWithType:
        CSharp: EComPortErr.DOR2_UPE2
        VB: EComPortErr.DOR2_UPE2
      qualifiedName:
        CSharp: TM.EComPortErr.DOR2_UPE2
        VB: TM.EComPortErr.DOR2_UPE2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR2_UPE2
        path: ../TM/TM_protocol.cs
        startLine: 909
      summary: "\nDOR2_UPE2\n"
      example: []
      syntax:
        content:
          CSharp: DOR2_UPE2 = 31
          VB: DOR2_UPE2 = 31
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE2
      commentId: F:TM.EComPortErr.FE2
      language: CSharp
      name:
        CSharp: FE2
        VB: FE2
      nameWithType:
        CSharp: EComPortErr.FE2
        VB: EComPortErr.FE2
      qualifiedName:
        CSharp: TM.EComPortErr.FE2
        VB: TM.EComPortErr.FE2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE2
        path: ../TM/TM_protocol.cs
        startLine: 915
      summary: "\nFrame Error USART2\n"
      example: []
      syntax:
        content:
          CSharp: FE2 = 32
          VB: FE2 = 32
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.TO_R3
      commentId: F:TM.EComPortErr.TO_R3
      language: CSharp
      name:
        CSharp: TO_R3
        VB: TO_R3
      nameWithType:
        CSharp: EComPortErr.TO_R3
        VB: EComPortErr.TO_R3
      qualifiedName:
        CSharp: TM.EComPortErr.TO_R3
        VB: TM.EComPortErr.TO_R3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TO_R3
        path: ../TM/TM_protocol.cs
        startLine: 921
      summary: "\nИстекло время ожидания в канале приёма USART3\n"
      example: []
      syntax:
        content:
          CSharp: TO_R3 = 33
          VB: TO_R3 = 33
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.UPE3
      commentId: F:TM.EComPortErr.UPE3
      language: CSharp
      name:
        CSharp: UPE3
        VB: UPE3
      nameWithType:
        CSharp: EComPortErr.UPE3
        VB: EComPortErr.UPE3
      qualifiedName:
        CSharp: TM.EComPortErr.UPE3
        VB: TM.EComPortErr.UPE3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UPE3
        path: ../TM/TM_protocol.cs
        startLine: 927
      summary: "\nUART Parity Error USART3\n"
      example: []
      syntax:
        content:
          CSharp: UPE3 = 34
          VB: UPE3 = 34
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR3
      commentId: F:TM.EComPortErr.DOR3
      language: CSharp
      name:
        CSharp: DOR3
        VB: DOR3
      nameWithType:
        CSharp: EComPortErr.DOR3
        VB: EComPortErr.DOR3
      qualifiedName:
        CSharp: TM.EComPortErr.DOR3
        VB: TM.EComPortErr.DOR3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR3
        path: ../TM/TM_protocol.cs
        startLine: 933
      summary: "\nDOR3\n"
      example: []
      syntax:
        content:
          CSharp: DOR3 = 35
          VB: DOR3 = 35
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.DOR3_UPE3
      commentId: F:TM.EComPortErr.DOR3_UPE3
      language: CSharp
      name:
        CSharp: DOR3_UPE3
        VB: DOR3_UPE3
      nameWithType:
        CSharp: EComPortErr.DOR3_UPE3
        VB: EComPortErr.DOR3_UPE3
      qualifiedName:
        CSharp: TM.EComPortErr.DOR3_UPE3
        VB: TM.EComPortErr.DOR3_UPE3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOR3_UPE3
        path: ../TM/TM_protocol.cs
        startLine: 939
      summary: "\nUPE3\n"
      example: []
      syntax:
        content:
          CSharp: DOR3_UPE3 = 36
          VB: DOR3_UPE3 = 36
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE3
      commentId: F:TM.EComPortErr.FE3
      language: CSharp
      name:
        CSharp: FE3
        VB: FE3
      nameWithType:
        CSharp: EComPortErr.FE3
        VB: EComPortErr.FE3
      qualifiedName:
        CSharp: TM.EComPortErr.FE3
        VB: TM.EComPortErr.FE3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE3
        path: ../TM/TM_protocol.cs
        startLine: 945
      summary: "\nFE3\n"
      example: []
      syntax:
        content:
          CSharp: FE3 = 37
          VB: FE3 = 37
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE3_UPE3
      commentId: F:TM.EComPortErr.FE3_UPE3
      language: CSharp
      name:
        CSharp: FE3_UPE3
        VB: FE3_UPE3
      nameWithType:
        CSharp: EComPortErr.FE3_UPE3
        VB: EComPortErr.FE3_UPE3
      qualifiedName:
        CSharp: TM.EComPortErr.FE3_UPE3
        VB: TM.EComPortErr.FE3_UPE3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE3_UPE3
        path: ../TM/TM_protocol.cs
        startLine: 951
      summary: "\nUPE3\n"
      example: []
      syntax:
        content:
          CSharp: FE3_UPE3 = 38
          VB: FE3_UPE3 = 38
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE3_DOR3
      commentId: F:TM.EComPortErr.FE3_DOR3
      language: CSharp
      name:
        CSharp: FE3_DOR3
        VB: FE3_DOR3
      nameWithType:
        CSharp: EComPortErr.FE3_DOR3
        VB: EComPortErr.FE3_DOR3
      qualifiedName:
        CSharp: TM.EComPortErr.FE3_DOR3
        VB: TM.EComPortErr.FE3_DOR3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE3_DOR3
        path: ../TM/TM_protocol.cs
        startLine: 957
      summary: "\nDOR3\n"
      example: []
      syntax:
        content:
          CSharp: FE3_DOR3 = 39
          VB: FE3_DOR3 = 39
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.FE3_DOR3_UPE3
      commentId: F:TM.EComPortErr.FE3_DOR3_UPE3
      language: CSharp
      name:
        CSharp: FE3_DOR3_UPE3
        VB: FE3_DOR3_UPE3
      nameWithType:
        CSharp: EComPortErr.FE3_DOR3_UPE3
        VB: EComPortErr.FE3_DOR3_UPE3
      qualifiedName:
        CSharp: TM.EComPortErr.FE3_DOR3_UPE3
        VB: TM.EComPortErr.FE3_DOR3_UPE3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FE3_DOR3_UPE3
        path: ../TM/TM_protocol.cs
        startLine: 963
      summary: "\nFE3_DOR3_UPE3\n"
      example: []
      syntax:
        content:
          CSharp: FE3_DOR3_UPE3 = 40
          VB: FE3_DOR3_UPE3 = 40
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_R0
      commentId: F:TM.EComPortErr.OVF_R0
      language: CSharp
      name:
        CSharp: OVF_R0
        VB: OVF_R0
      nameWithType:
        CSharp: EComPortErr.OVF_R0
        VB: EComPortErr.OVF_R0
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_R0
        VB: TM.EComPortErr.OVF_R0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_R0
        path: ../TM/TM_protocol.cs
        startLine: 968
      summary: "\nПереполнение буфера приёма USART0\n"
      example: []
      syntax:
        content:
          CSharp: OVF_R0 = 41
          VB: OVF_R0 = 41
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_R1
      commentId: F:TM.EComPortErr.OVF_R1
      language: CSharp
      name:
        CSharp: OVF_R1
        VB: OVF_R1
      nameWithType:
        CSharp: EComPortErr.OVF_R1
        VB: EComPortErr.OVF_R1
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_R1
        VB: TM.EComPortErr.OVF_R1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_R1
        path: ../TM/TM_protocol.cs
        startLine: 974
      summary: "\nПереполнение буфера приёма USART1\n"
      example: []
      syntax:
        content:
          CSharp: OVF_R1 = 42
          VB: OVF_R1 = 42
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_R2
      commentId: F:TM.EComPortErr.OVF_R2
      language: CSharp
      name:
        CSharp: OVF_R2
        VB: OVF_R2
      nameWithType:
        CSharp: EComPortErr.OVF_R2
        VB: EComPortErr.OVF_R2
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_R2
        VB: TM.EComPortErr.OVF_R2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_R2
        path: ../TM/TM_protocol.cs
        startLine: 980
      summary: "\nПереполнение буфера приёма USART2&quot;\n"
      example: []
      syntax:
        content:
          CSharp: OVF_R2 = 43
          VB: OVF_R2 = 43
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_R3
      commentId: F:TM.EComPortErr.OVF_R3
      language: CSharp
      name:
        CSharp: OVF_R3
        VB: OVF_R3
      nameWithType:
        CSharp: EComPortErr.OVF_R3
        VB: EComPortErr.OVF_R3
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_R3
        VB: TM.EComPortErr.OVF_R3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_R3
        path: ../TM/TM_protocol.cs
        startLine: 986
      summary: "\nПереполнение буфера приёма USART3\n"
      example: []
      syntax:
        content:
          CSharp: OVF_R3 = 44
          VB: OVF_R3 = 44
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_T0
      commentId: F:TM.EComPortErr.OVF_T0
      language: CSharp
      name:
        CSharp: OVF_T0
        VB: OVF_T0
      nameWithType:
        CSharp: EComPortErr.OVF_T0
        VB: EComPortErr.OVF_T0
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_T0
        VB: TM.EComPortErr.OVF_T0
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_T0
        path: ../TM/TM_protocol.cs
        startLine: 992
      summary: "\nПереполнение буфера приёма USART0\n"
      example: []
      syntax:
        content:
          CSharp: OVF_T0 = 45
          VB: OVF_T0 = 45
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_T1
      commentId: F:TM.EComPortErr.OVF_T1
      language: CSharp
      name:
        CSharp: OVF_T1
        VB: OVF_T1
      nameWithType:
        CSharp: EComPortErr.OVF_T1
        VB: EComPortErr.OVF_T1
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_T1
        VB: TM.EComPortErr.OVF_T1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_T1
        path: ../TM/TM_protocol.cs
        startLine: 998
      summary: "\nПереполнение буфера приёма USART1\n"
      example: []
      syntax:
        content:
          CSharp: OVF_T1 = 46
          VB: OVF_T1 = 46
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_T2
      commentId: F:TM.EComPortErr.OVF_T2
      language: CSharp
      name:
        CSharp: OVF_T2
        VB: OVF_T2
      nameWithType:
        CSharp: EComPortErr.OVF_T2
        VB: EComPortErr.OVF_T2
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_T2
        VB: TM.EComPortErr.OVF_T2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_T2
        path: ../TM/TM_protocol.cs
        startLine: 1004
      summary: "\nПереполнение буфера приёма USART2\n"
      example: []
      syntax:
        content:
          CSharp: OVF_T2 = 47
          VB: OVF_T2 = 47
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.OVF_T3
      commentId: F:TM.EComPortErr.OVF_T3
      language: CSharp
      name:
        CSharp: OVF_T3
        VB: OVF_T3
      nameWithType:
        CSharp: EComPortErr.OVF_T3
        VB: EComPortErr.OVF_T3
      qualifiedName:
        CSharp: TM.EComPortErr.OVF_T3
        VB: TM.EComPortErr.OVF_T3
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OVF_T3
        path: ../TM/TM_protocol.cs
        startLine: 1010
      summary: "\nПереполнение буфера приёма USART3\n"
      example: []
      syntax:
        content:
          CSharp: OVF_T3 = 48
          VB: OVF_T3 = 48
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.ERR_1
      commentId: F:TM.EComPortErr.ERR_1
      language: CSharp
      name:
        CSharp: ERR_1
        VB: ERR_1
      nameWithType:
        CSharp: EComPortErr.ERR_1
        VB: EComPortErr.ERR_1
      qualifiedName:
        CSharp: TM.EComPortErr.ERR_1
        VB: TM.EComPortErr.ERR_1
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ERR_1
        path: ../TM/TM_protocol.cs
        startLine: 1016
      summary: "\nThe error 1\n"
      example: []
      syntax:
        content:
          CSharp: ERR_1 = 49
          VB: ERR_1 = 49
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.ERR_2
      commentId: F:TM.EComPortErr.ERR_2
      language: CSharp
      name:
        CSharp: ERR_2
        VB: ERR_2
      nameWithType:
        CSharp: EComPortErr.ERR_2
        VB: EComPortErr.ERR_2
      qualifiedName:
        CSharp: TM.EComPortErr.ERR_2
        VB: TM.EComPortErr.ERR_2
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ERR_2
        path: ../TM/TM_protocol.cs
        startLine: 1021
      summary: "\nThe error 2\n"
      example: []
      syntax:
        content:
          CSharp: ERR_2 = 50
          VB: ERR_2 = 50
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EComPortErr.COUNT
      commentId: F:TM.EComPortErr.COUNT
      language: CSharp
      name:
        CSharp: COUNT
        VB: COUNT
      nameWithType:
        CSharp: EComPortErr.COUNT
        VB: EComPortErr.COUNT
      qualifiedName:
        CSharp: TM.EComPortErr.COUNT
        VB: TM.EComPortErr.COUNT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: COUNT
        path: ../TM/TM_protocol.cs
        startLine: 1026
      summary: "\nThe count\n"
      example: []
      syntax:
        content:
          CSharp: COUNT = 51
          VB: COUNT = 51
        return:
          type: TM.EComPortErr
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EControlType
    commentId: T:TM.EControlType
    language: CSharp
    name:
      CSharp: EControlType
      VB: EControlType
    nameWithType:
      CSharp: EControlType
      VB: EControlType
    qualifiedName:
      CSharp: TM.EControlType
      VB: TM.EControlType
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EControlType
      path: ../TM/TM_protocol.cs
      startLine: 1032
    summary: "\nEnum EControlType\n"
    example: []
    syntax:
      content:
        CSharp: public enum EControlType
        VB: Public Enum EControlType
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EControlType.UNKNOWN
      commentId: F:TM.EControlType.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: EControlType.UNKNOWN
        VB: EControlType.UNKNOWN
      qualifiedName:
        CSharp: TM.EControlType.UNKNOWN
        VB: TM.EControlType.UNKNOWN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWN
        path: ../TM/TM_protocol.cs
        startLine: 1037
      summary: "\n&quot;Неопределённый тип\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWN = 0
          VB: UNKNOWN = 0
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.TEMPSET
      commentId: F:TM.EControlType.TEMPSET
      language: CSharp
      name:
        CSharp: TEMPSET
        VB: TEMPSET
      nameWithType:
        CSharp: EControlType.TEMPSET
        VB: EControlType.TEMPSET
      qualifiedName:
        CSharp: TM.EControlType.TEMPSET
        VB: TM.EControlType.TEMPSET
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TEMPSET
        path: ../TM/TM_protocol.cs
        startLine: 1043
      summary: "\nнабор датчиков (температурных)\n"
      example: []
      syntax:
        content:
          CSharp: TEMPSET = 1
          VB: TEMPSET = 1
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.TEMPSINGLE
      commentId: F:TM.EControlType.TEMPSINGLE
      language: CSharp
      name:
        CSharp: TEMPSINGLE
        VB: TEMPSINGLE
      nameWithType:
        CSharp: EControlType.TEMPSINGLE
        VB: EControlType.TEMPSINGLE
      qualifiedName:
        CSharp: TM.EControlType.TEMPSINGLE
        VB: TM.EControlType.TEMPSINGLE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TEMPSINGLE
        path: ../TM/TM_protocol.cs
        startLine: 1049
      summary: "\nодин датчик из набора\n"
      example: []
      syntax:
        content:
          CSharp: TEMPSINGLE = 2
          VB: TEMPSINGLE = 2
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.TEMPSTATUS
      commentId: F:TM.EControlType.TEMPSTATUS
      language: CSharp
      name:
        CSharp: TEMPSTATUS
        VB: TEMPSTATUS
      nameWithType:
        CSharp: EControlType.TEMPSTATUS
        VB: EControlType.TEMPSTATUS
      qualifiedName:
        CSharp: TM.EControlType.TEMPSTATUS
        VB: TM.EControlType.TEMPSTATUS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TEMPSTATUS
        path: ../TM/TM_protocol.cs
        startLine: 1055
      summary: "\nкартинка блокировок/состояний\n"
      example: []
      syntax:
        content:
          CSharp: TEMPSTATUS = 3
          VB: TEMPSTATUS = 3
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.DOOR
      commentId: F:TM.EControlType.DOOR
      language: CSharp
      name:
        CSharp: DOOR
        VB: DOOR
      nameWithType:
        CSharp: EControlType.DOOR
        VB: EControlType.DOOR
      qualifiedName:
        CSharp: TM.EControlType.DOOR
        VB: TM.EControlType.DOOR
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DOOR
        path: ../TM/TM_protocol.cs
        startLine: 1061
      summary: "\nкартинка \\&quot;дверь\\&quot;\n"
      example: []
      syntax:
        content:
          CSharp: DOOR = 4
          VB: DOOR = 4
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.ATTENTION
      commentId: F:TM.EControlType.ATTENTION
      language: CSharp
      name:
        CSharp: ATTENTION
        VB: ATTENTION
      nameWithType:
        CSharp: EControlType.ATTENTION
        VB: EControlType.ATTENTION
      qualifiedName:
        CSharp: TM.EControlType.ATTENTION
        VB: TM.EControlType.ATTENTION
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ATTENTION
        path: ../TM/TM_protocol.cs
        startLine: 1067
      summary: "\nкартинка с восклицательным знаком  как и блокировка состояний\n"
      example: []
      syntax:
        content:
          CSharp: ATTENTION = 5
          VB: ATTENTION = 5
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.IRRADIATION
      commentId: F:TM.EControlType.IRRADIATION
      language: CSharp
      name:
        CSharp: IRRADIATION
        VB: IRRADIATION
      nameWithType:
        CSharp: EControlType.IRRADIATION
        VB: EControlType.IRRADIATION
      qualifiedName:
        CSharp: TM.EControlType.IRRADIATION
        VB: TM.EControlType.IRRADIATION
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IRRADIATION
        path: ../TM/TM_protocol.cs
        startLine: 1073
      summary: "\nкартинка с символом радиации - не используется пока\n"
      example: []
      syntax:
        content:
          CSharp: IRRADIATION = 6
          VB: IRRADIATION = 6
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.WATERFLOW
      commentId: F:TM.EControlType.WATERFLOW
      language: CSharp
      name:
        CSharp: WATERFLOW
        VB: WATERFLOW
      nameWithType:
        CSharp: EControlType.WATERFLOW
        VB: EControlType.WATERFLOW
      qualifiedName:
        CSharp: TM.EControlType.WATERFLOW
        VB: TM.EControlType.WATERFLOW
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WATERFLOW
        path: ../TM/TM_protocol.cs
        startLine: 1079
      summary: "\nпроток воды\n"
      example: []
      syntax:
        content:
          CSharp: WATERFLOW = 7
          VB: WATERFLOW = 7
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XRAY
      commentId: F:TM.EControlType.XRAY
      language: CSharp
      name:
        CSharp: XRAY
        VB: XRAY
      nameWithType:
        CSharp: EControlType.XRAY
        VB: EControlType.XRAY
      qualifiedName:
        CSharp: TM.EControlType.XRAY
        VB: TM.EControlType.XRAY
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XRAY
        path: ../TM/TM_protocol.cs
        startLine: 1085
      summary: "\nвключено излучение\n"
      example: []
      syntax:
        content:
          CSharp: XRAY = 8
          VB: XRAY = 8
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XRAYMODE
      commentId: F:TM.EControlType.XRAYMODE
      language: CSharp
      name:
        CSharp: XRAYMODE
        VB: XRAYMODE
      nameWithType:
        CSharp: EControlType.XRAYMODE
        VB: EControlType.XRAYMODE
      qualifiedName:
        CSharp: TM.EControlType.XRAYMODE
        VB: TM.EControlType.XRAYMODE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XRAYMODE
        path: ../TM/TM_protocol.cs
        startLine: 1091
      summary: "\nтекущий режим сервера XRay\n"
      example: []
      syntax:
        content:
          CSharp: XRAYMODE = 9
          VB: XRAYMODE = 9
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.TEXTLABEL
      commentId: F:TM.EControlType.TEXTLABEL
      language: CSharp
      name:
        CSharp: TEXTLABEL
        VB: TEXTLABEL
      nameWithType:
        CSharp: EControlType.TEXTLABEL
        VB: EControlType.TEXTLABEL
      qualifiedName:
        CSharp: TM.EControlType.TEXTLABEL
        VB: TM.EControlType.TEXTLABEL
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TEXTLABEL
        path: ../TM/TM_protocol.cs
        startLine: 1097
      summary: "\nтекстовая подпись\n"
      example: []
      syntax:
        content:
          CSharp: TEXTLABEL = 10
          VB: TEXTLABEL = 10
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.ANGLE
      commentId: F:TM.EControlType.ANGLE
      language: CSharp
      name:
        CSharp: ANGLE
        VB: ANGLE
      nameWithType:
        CSharp: EControlType.ANGLE
        VB: EControlType.ANGLE
      qualifiedName:
        CSharp: TM.EControlType.ANGLE
        VB: TM.EControlType.ANGLE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ANGLE
        path: ../TM/TM_protocol.cs
        startLine: 1103
      summary: "\nугол поворота кресла, градусы\n"
      example: []
      syntax:
        content:
          CSharp: ANGLE = 11
          VB: ANGLE = 11
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.ANGLE_PIC
      commentId: F:TM.EControlType.ANGLE_PIC
      language: CSharp
      name:
        CSharp: ANGLE_PIC
        VB: ANGLE_PIC
      nameWithType:
        CSharp: EControlType.ANGLE_PIC
        VB: EControlType.ANGLE_PIC
      qualifiedName:
        CSharp: TM.EControlType.ANGLE_PIC
        VB: TM.EControlType.ANGLE_PIC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ANGLE_PIC
        path: ../TM/TM_protocol.cs
        startLine: 1109
      summary: "\nугол поворота кресла, изображение\n"
      example: []
      syntax:
        content:
          CSharp: ANGLE_PIC = 12
          VB: ANGLE_PIC = 12
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.ALTITUDE
      commentId: F:TM.EControlType.ALTITUDE
      language: CSharp
      name:
        CSharp: ALTITUDE
        VB: ALTITUDE
      nameWithType:
        CSharp: EControlType.ALTITUDE
        VB: EControlType.ALTITUDE
      qualifiedName:
        CSharp: TM.EControlType.ALTITUDE
        VB: TM.EControlType.ALTITUDE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ALTITUDE
        path: ../TM/TM_protocol.cs
        startLine: 1115
      summary: "\nвысота полъема\n"
      example: []
      syntax:
        content:
          CSharp: ALTITUDE = 13
          VB: ALTITUDE = 13
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.MOVING
      commentId: F:TM.EControlType.MOVING
      language: CSharp
      name:
        CSharp: MOVING
        VB: MOVING
      nameWithType:
        CSharp: EControlType.MOVING
        VB: EControlType.MOVING
      qualifiedName:
        CSharp: TM.EControlType.MOVING
        VB: TM.EControlType.MOVING
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MOVING
        path: ../TM/TM_protocol.cs
        startLine: 1121
      summary: "\nкресло в движении (круглая желтая лампочка)\n"
      example: []
      syntax:
        content:
          CSharp: MOVING = 14
          VB: MOVING = 14
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.DETECTOR
      commentId: F:TM.EControlType.DETECTOR
      language: CSharp
      name:
        CSharp: DETECTOR
        VB: DETECTOR
      nameWithType:
        CSharp: EControlType.DETECTOR
        VB: EControlType.DETECTOR
      qualifiedName:
        CSharp: TM.EControlType.DETECTOR
        VB: TM.EControlType.DETECTOR
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DETECTOR
        path: ../TM/TM_protocol.cs
        startLine: 1127
      summary: "\nположение детектора\n"
      example: []
      syntax:
        content:
          CSharp: DETECTOR = 15
          VB: DETECTOR = 15
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XR_IHV
      commentId: F:TM.EControlType.XR_IHV
      language: CSharp
      name:
        CSharp: XR_IHV
        VB: XR_IHV
      nameWithType:
        CSharp: EControlType.XR_IHV
        VB: EControlType.XR_IHV
      qualifiedName:
        CSharp: TM.EControlType.XR_IHV
        VB: TM.EControlType.XR_IHV
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XR_IHV
        path: ../TM/TM_protocol.cs
        startLine: 1133
      summary: "\nрентген - ток в трубке\n"
      example: []
      syntax:
        content:
          CSharp: XR_IHV = 16
          VB: XR_IHV = 16
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XR_UHV
      commentId: F:TM.EControlType.XR_UHV
      language: CSharp
      name:
        CSharp: XR_UHV
        VB: XR_UHV
      nameWithType:
        CSharp: EControlType.XR_UHV
        VB: EControlType.XR_UHV
      qualifiedName:
        CSharp: TM.EControlType.XR_UHV
        VB: TM.EControlType.XR_UHV
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XR_UHV
        path: ../TM/TM_protocol.cs
        startLine: 1139
      summary: "\nрентген - напряжение в трубке\n"
      example: []
      syntax:
        content:
          CSharp: XR_UHV = 17
          VB: XR_UHV = 17
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XR_IVAC
      commentId: F:TM.EControlType.XR_IVAC
      language: CSharp
      name:
        CSharp: XR_IVAC
        VB: XR_IVAC
      nameWithType:
        CSharp: EControlType.XR_IVAC
        VB: EControlType.XR_IVAC
      qualifiedName:
        CSharp: TM.EControlType.XR_IVAC
        VB: TM.EControlType.XR_IVAC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XR_IVAC
        path: ../TM/TM_protocol.cs
        startLine: 1145
      summary: "\nрентген - ток насоса\n"
      example: []
      syntax:
        content:
          CSharp: XR_IVAC = 18
          VB: XR_IVAC = 18
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XR_HEAT
      commentId: F:TM.EControlType.XR_HEAT
      language: CSharp
      name:
        CSharp: XR_HEAT
        VB: XR_HEAT
      nameWithType:
        CSharp: EControlType.XR_HEAT
        VB: EControlType.XR_HEAT
      qualifiedName:
        CSharp: TM.EControlType.XR_HEAT
        VB: TM.EControlType.XR_HEAT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XR_HEAT
        path: ../TM/TM_protocol.cs
        startLine: 1151
      summary: "\nрентген - накал\n"
      example: []
      syntax:
        content:
          CSharp: XR_HEAT = 19
          VB: XR_HEAT = 19
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XR_HV
      commentId: F:TM.EControlType.XR_HV
      language: CSharp
      name:
        CSharp: XR_HV
        VB: XR_HV
      nameWithType:
        CSharp: EControlType.XR_HV
        VB: EControlType.XR_HV
      qualifiedName:
        CSharp: TM.EControlType.XR_HV
        VB: TM.EControlType.XR_HV
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XR_HV
        path: ../TM/TM_protocol.cs
        startLine: 1157
      summary: "\nрентген - высокое\n"
      example: []
      syntax:
        content:
          CSharp: XR_HV = 20
          VB: XR_HV = 20
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.PFS_HAND
      commentId: F:TM.EControlType.PFS_HAND
      language: CSharp
      name:
        CSharp: PFS_HAND
        VB: PFS_HAND
      nameWithType:
        CSharp: EControlType.PFS_HAND
        VB: EControlType.PFS_HAND
      qualifiedName:
        CSharp: TM.EControlType.PFS_HAND
        VB: TM.EControlType.PFS_HAND
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS_HAND
        path: ../TM/TM_protocol.cs
        startLine: 1163
      summary: "\nкресло - ручное управление\n"
      example: []
      syntax:
        content:
          CSharp: PFS_HAND = 21
          VB: PFS_HAND = 21
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.DAC
      commentId: F:TM.EControlType.DAC
      language: CSharp
      name:
        CSharp: DAC
        VB: DAC
      nameWithType:
        CSharp: EControlType.DAC
        VB: EControlType.DAC
      qualifiedName:
        CSharp: TM.EControlType.DAC
        VB: TM.EControlType.DAC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DAC
        path: ../TM/TM_protocol.cs
        startLine: 1169
      summary: "\nканал ЦАП\n"
      example: []
      syntax:
        content:
          CSharp: DAC = 22
          VB: DAC = 22
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.ADC
      commentId: F:TM.EControlType.ADC
      language: CSharp
      name:
        CSharp: ADC
        VB: ADC
      nameWithType:
        CSharp: EControlType.ADC
        VB: EControlType.ADC
      qualifiedName:
        CSharp: TM.EControlType.ADC
        VB: TM.EControlType.ADC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ADC
        path: ../TM/TM_protocol.cs
        startLine: 1175
      summary: "\nканал АЦП\n"
      example: []
      syntax:
        content:
          CSharp: ADC = 23
          VB: ADC = 23
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.UPDATE_NUM
      commentId: F:TM.EControlType.UPDATE_NUM
      language: CSharp
      name:
        CSharp: UPDATE_NUM
        VB: UPDATE_NUM
      nameWithType:
        CSharp: EControlType.UPDATE_NUM
        VB: EControlType.UPDATE_NUM
      qualifiedName:
        CSharp: TM.EControlType.UPDATE_NUM
        VB: TM.EControlType.UPDATE_NUM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UPDATE_NUM
        path: ../TM/TM_protocol.cs
        startLine: 1181
      summary: "\nномер апдейта дата-сервера (доступно для всех типов)\n"
      example: []
      syntax:
        content:
          CSharp: UPDATE_NUM = 24
          VB: UPDATE_NUM = 24
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.PFS_DETECTORLR
      commentId: F:TM.EControlType.PFS_DETECTORLR
      language: CSharp
      name:
        CSharp: PFS_DETECTORLR
        VB: PFS_DETECTORLR
      nameWithType:
        CSharp: EControlType.PFS_DETECTORLR
        VB: EControlType.PFS_DETECTORLR
      qualifiedName:
        CSharp: TM.EControlType.PFS_DETECTORLR
        VB: TM.EControlType.PFS_DETECTORLR
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS_DETECTORLR
        path: ../TM/TM_protocol.cs
        startLine: 1187
      syntax:
        content:
          CSharp: PFS_DETECTORLR = 25
          VB: PFS_DETECTORLR = 25
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.ANGLE_IENC
      commentId: F:TM.EControlType.ANGLE_IENC
      language: CSharp
      name:
        CSharp: ANGLE_IENC
        VB: ANGLE_IENC
      nameWithType:
        CSharp: EControlType.ANGLE_IENC
        VB: EControlType.ANGLE_IENC
      qualifiedName:
        CSharp: TM.EControlType.ANGLE_IENC
        VB: TM.EControlType.ANGLE_IENC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ANGLE_IENC
        path: ../TM/TM_protocol.cs
        startLine: 1193
      summary: "\nугол поворота - значение энкодера\n"
      example: []
      syntax:
        content:
          CSharp: ANGLE_IENC = 26
          VB: ANGLE_IENC = 26
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.STATUS
      commentId: F:TM.EControlType.STATUS
      language: CSharp
      name:
        CSharp: STATUS
        VB: STATUS
      nameWithType:
        CSharp: EControlType.STATUS
        VB: EControlType.STATUS
      qualifiedName:
        CSharp: TM.EControlType.STATUS
        VB: TM.EControlType.STATUS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: STATUS
        path: ../TM/TM_protocol.cs
        startLine: 1199
      summary: "\nкартинка круглая лампочка - статус сервера\n"
      example: []
      syntax:
        content:
          CSharp: STATUS = 27
          VB: STATUS = 27
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.PFS_HORMOVE
      commentId: F:TM.EControlType.PFS_HORMOVE
      language: CSharp
      name:
        CSharp: PFS_HORMOVE
        VB: PFS_HORMOVE
      nameWithType:
        CSharp: EControlType.PFS_HORMOVE
        VB: EControlType.PFS_HORMOVE
      qualifiedName:
        CSharp: TM.EControlType.PFS_HORMOVE
        VB: TM.EControlType.PFS_HORMOVE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS_HORMOVE
        path: ../TM/TM_protocol.cs
        startLine: 1205
      summary: "\nкресло - горизонтальное перемещение, мм\n"
      example: []
      syntax:
        content:
          CSharp: PFS_HORMOVE = 28
          VB: PFS_HORMOVE = 28
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.MESSAGE_LIST
      commentId: F:TM.EControlType.MESSAGE_LIST
      language: CSharp
      name:
        CSharp: MESSAGE_LIST
        VB: MESSAGE_LIST
      nameWithType:
        CSharp: EControlType.MESSAGE_LIST
        VB: EControlType.MESSAGE_LIST
      qualifiedName:
        CSharp: TM.EControlType.MESSAGE_LIST
        VB: TM.EControlType.MESSAGE_LIST
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MESSAGE_LIST
        path: ../TM/TM_protocol.cs
        startLine: 1212
      summary: "\nблок для вывода сообщений. Не входит в сервера данных,\nотносится к общему интерфейсу App VisualControl\n"
      example: []
      syntax:
        content:
          CSharp: MESSAGE_LIST = 29
          VB: MESSAGE_LIST = 29
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.PFS_STATUS
      commentId: F:TM.EControlType.PFS_STATUS
      language: CSharp
      name:
        CSharp: PFS_STATUS
        VB: PFS_STATUS
      nameWithType:
        CSharp: EControlType.PFS_STATUS
        VB: EControlType.PFS_STATUS
      qualifiedName:
        CSharp: TM.EControlType.PFS_STATUS
        VB: TM.EControlType.PFS_STATUS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS_STATUS
        path: ../TM/TM_protocol.cs
        startLine: 1218
      summary: "\nкартинка прямоугольная лампочка - статус устройства\n"
      example: []
      syntax:
        content:
          CSharp: PFS_STATUS = 30
          VB: PFS_STATUS = 30
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.FARADAY_STATUS
      commentId: F:TM.EControlType.FARADAY_STATUS
      language: CSharp
      name:
        CSharp: FARADAY_STATUS
        VB: FARADAY_STATUS
      nameWithType:
        CSharp: EControlType.FARADAY_STATUS
        VB: EControlType.FARADAY_STATUS
      qualifiedName:
        CSharp: TM.EControlType.FARADAY_STATUS
        VB: TM.EControlType.FARADAY_STATUS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FARADAY_STATUS
        path: ../TM/TM_protocol.cs
        startLine: 1224
      summary: "\nкартинка прямоугольная лампочка - статус устройства\n"
      example: []
      syntax:
        content:
          CSharp: FARADAY_STATUS = 31
          VB: FARADAY_STATUS = 31
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.FARADAY_POS
      commentId: F:TM.EControlType.FARADAY_POS
      language: CSharp
      name:
        CSharp: FARADAY_POS
        VB: FARADAY_POS
      nameWithType:
        CSharp: EControlType.FARADAY_POS
        VB: EControlType.FARADAY_POS
      qualifiedName:
        CSharp: TM.EControlType.FARADAY_POS
        VB: TM.EControlType.FARADAY_POS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FARADAY_POS
        path: ../TM/TM_protocol.cs
        startLine: 1230
      summary: "\nположение цилиндра фарадея - круглая кнопка, цветом отображает активное положение\n"
      example: []
      syntax:
        content:
          CSharp: FARADAY_POS = 32
          VB: FARADAY_POS = 32
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.FARADAY_LOCAL
      commentId: F:TM.EControlType.FARADAY_LOCAL
      language: CSharp
      name:
        CSharp: FARADAY_LOCAL
        VB: FARADAY_LOCAL
      nameWithType:
        CSharp: EControlType.FARADAY_LOCAL
        VB: EControlType.FARADAY_LOCAL
      qualifiedName:
        CSharp: TM.EControlType.FARADAY_LOCAL
        VB: TM.EControlType.FARADAY_LOCAL
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FARADAY_LOCAL
        path: ../TM/TM_protocol.cs
        startLine: 1236
      summary: "\nкартинка прямоугольная лампочка - локальный режим управления цилиндром фарадея\n"
      example: []
      syntax:
        content:
          CSharp: FARADAY_LOCAL = 33
          VB: FARADAY_LOCAL = 33
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.PFS_MODE
      commentId: F:TM.EControlType.PFS_MODE
      language: CSharp
      name:
        CSharp: PFS_MODE
        VB: PFS_MODE
      nameWithType:
        CSharp: EControlType.PFS_MODE
        VB: EControlType.PFS_MODE
      qualifiedName:
        CSharp: TM.EControlType.PFS_MODE
        VB: TM.EControlType.PFS_MODE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS_MODE
        path: ../TM/TM_protocol.cs
        startLine: 1242
      summary: "\nкресло - текущий режим терапии - текстовая подпись\n"
      example: []
      syntax:
        content:
          CSharp: PFS_MODE = 34
          VB: PFS_MODE = 34
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.HOST
      commentId: F:TM.EControlType.HOST
      language: CSharp
      name:
        CSharp: HOST
        VB: HOST
      nameWithType:
        CSharp: EControlType.HOST
        VB: EControlType.HOST
      qualifiedName:
        CSharp: TM.EControlType.HOST
        VB: TM.EControlType.HOST
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: HOST
        path: ../TM/TM_protocol.cs
        startLine: 1248
      summary: "\nкартинка - компьютер, цветом отображает успушное или нет подключение\n"
      example: []
      syntax:
        content:
          CSharp: HOST = 35
          VB: HOST = 35
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.XR_SHOTMODE
      commentId: F:TM.EControlType.XR_SHOTMODE
      language: CSharp
      name:
        CSharp: XR_SHOTMODE
        VB: XR_SHOTMODE
      nameWithType:
        CSharp: EControlType.XR_SHOTMODE
        VB: EControlType.XR_SHOTMODE
      qualifiedName:
        CSharp: TM.EControlType.XR_SHOTMODE
        VB: TM.EControlType.XR_SHOTMODE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XR_SHOTMODE
        path: ../TM/TM_protocol.cs
        startLine: 1254
      summary: "\nтекущий режим сервера XRay - номер набора настроек\n"
      example: []
      syntax:
        content:
          CSharp: XR_SHOTMODE = 36
          VB: XR_SHOTMODE = 36
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EControlType.MODE_TXT
      commentId: F:TM.EControlType.MODE_TXT
      language: CSharp
      name:
        CSharp: MODE_TXT
        VB: MODE_TXT
      nameWithType:
        CSharp: EControlType.MODE_TXT
        VB: EControlType.MODE_TXT
      qualifiedName:
        CSharp: TM.EControlType.MODE_TXT
        VB: TM.EControlType.MODE_TXT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MODE_TXT
        path: ../TM/TM_protocol.cs
        startLine: 1260
      summary: "\nтекущий режим сервера ECS - ECS_MODE_READY\n"
      example: []
      syntax:
        content:
          CSharp: MODE_TXT = 37
          VB: MODE_TXT = 37
        return:
          type: TM.EControlType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EDeviceType
    commentId: T:TM.EDeviceType
    language: CSharp
    name:
      CSharp: EDeviceType
      VB: EDeviceType
    nameWithType:
      CSharp: EDeviceType
      VB: EDeviceType
    qualifiedName:
      CSharp: TM.EDeviceType
      VB: TM.EDeviceType
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EDeviceType
      path: ../TM/TM_protocol.cs
      startLine: 1271
    summary: "\nтипы устройств-микроконтроллеров	для структуры DevDescr\n"
    example: []
    syntax:
      content:
        CSharp: public enum EDeviceType
        VB: Public Enum EDeviceType
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EDeviceType.UNKNOWN
      commentId: F:TM.EDeviceType.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: EDeviceType.UNKNOWN
        VB: EDeviceType.UNKNOWN
      qualifiedName:
        CSharp: TM.EDeviceType.UNKNOWN
        VB: TM.EDeviceType.UNKNOWN
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWN
        path: ../TM/TM_protocol.cs
        startLine: 1276
      summary: "\nНеопределённый тип\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWN = 0
          VB: UNKNOWN = 0
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.MBPS
      commentId: F:TM.EDeviceType.MBPS
      language: CSharp
      name:
        CSharp: MBPS
        VB: MBPS
      nameWithType:
        CSharp: EDeviceType.MBPS
        VB: EDeviceType.MBPS
      qualifiedName:
        CSharp: TM.EDeviceType.MBPS
        VB: TM.EDeviceType.MBPS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MBPS
        path: ../TM/TM_protocol.cs
        startLine: 1282
      summary: "\nблок линз, например\n"
      example: []
      syntax:
        content:
          CSharp: MBPS = 1
          VB: MBPS = 1
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.XRAYC
      commentId: F:TM.EDeviceType.XRAYC
      language: CSharp
      name:
        CSharp: XRAYC
        VB: XRAYC
      nameWithType:
        CSharp: EDeviceType.XRAYC
        VB: EDeviceType.XRAYC
      qualifiedName:
        CSharp: TM.EDeviceType.XRAYC
        VB: TM.EDeviceType.XRAYC
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XRAYC
        path: ../TM/TM_protocol.cs
        startLine: 1288
      summary: "\nблок электроники для старой модели рентгеновского сервера (до 2016 года в терапии)\n"
      example: []
      syntax:
        content:
          CSharp: XRAYC = 2
          VB: XRAYC = 2
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.DIMS
      commentId: F:TM.EDeviceType.DIMS
      language: CSharp
      name:
        CSharp: DIMS
        VB: DIMS
      nameWithType:
        CSharp: EDeviceType.DIMS
        VB: EDeviceType.DIMS
      qualifiedName:
        CSharp: TM.EDeviceType.DIMS
        VB: TM.EDeviceType.DIMS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DIMS
        path: ../TM/TM_protocol.cs
        startLine: 1294
      summary: "\nвакуум, высокое, сетка. накал\n"
      example: []
      syntax:
        content:
          CSharp: DIMS = 3
          VB: DIMS = 3
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.TERMO_S
      commentId: F:TM.EDeviceType.TERMO_S
      language: CSharp
      name:
        CSharp: TERMO_S
        VB: TERMO_S
      nameWithType:
        CSharp: EDeviceType.TERMO_S
        VB: EDeviceType.TERMO_S
      qualifiedName:
        CSharp: TM.EDeviceType.TERMO_S
        VB: TM.EDeviceType.TERMO_S
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TERMO_S
        path: ../TM/TM_protocol.cs
        startLine: 1300
      summary: "\nтермо, слэйв-контроллер 8 датчиков\n"
      example: []
      syntax:
        content:
          CSharp: TERMO_S = 4
          VB: TERMO_S = 4
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.TERMO_M
      commentId: F:TM.EDeviceType.TERMO_M
      language: CSharp
      name:
        CSharp: TERMO_M
        VB: TERMO_M
      nameWithType:
        CSharp: EDeviceType.TERMO_M
        VB: EDeviceType.TERMO_M
      qualifiedName:
        CSharp: TM.EDeviceType.TERMO_M
        VB: TM.EDeviceType.TERMO_M
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TERMO_M
        path: ../TM/TM_protocol.cs
        startLine: 1306
      summary: "\nтермо, мастер-контроллер 8 слэйвов\n"
      example: []
      syntax:
        content:
          CSharp: TERMO_M = 5
          VB: TERMO_M = 5
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.PFS
      commentId: F:TM.EDeviceType.PFS
      language: CSharp
      name:
        CSharp: PFS
        VB: PFS
      nameWithType:
        CSharp: EDeviceType.PFS
        VB: EDeviceType.PFS
      qualifiedName:
        CSharp: TM.EDeviceType.PFS
        VB: TM.EDeviceType.PFS
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: PFS
        path: ../TM/TM_protocol.cs
        startLine: 1312
      summary: "\nконтроллер кресла\n"
      example: []
      syntax:
        content:
          CSharp: PFS = 6
          VB: PFS = 6
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.FDCY
      commentId: F:TM.EDeviceType.FDCY
      language: CSharp
      name:
        CSharp: FDCY
        VB: FDCY
      nameWithType:
        CSharp: EDeviceType.FDCY
        VB: EDeviceType.FDCY
      qualifiedName:
        CSharp: TM.EDeviceType.FDCY
        VB: TM.EDeviceType.FDCY
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: FDCY
        path: ../TM/TM_protocol.cs
        startLine: 1318
      summary: "\nконтроллер цилиндра фарадея\n"
      example: []
      syntax:
        content:
          CSharp: FDCY = 7
          VB: FDCY = 7
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.ASH_ST
      commentId: F:TM.EDeviceType.ASH_ST
      language: CSharp
      name:
        CSharp: ASH_ST
        VB: ASH_ST
      nameWithType:
        CSharp: EDeviceType.ASH_ST
        VB: EDeviceType.ASH_ST
      qualifiedName:
        CSharp: TM.EDeviceType.ASH_ST
        VB: TM.EDeviceType.ASH_ST
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ASH_ST
        path: ../TM/TM_protocol.cs
        startLine: 1324
      summary: "\nуниверсальный контроллер на атмега для SERVER_TYPE_ASH\n"
      example: []
      syntax:
        content:
          CSharp: ASH_ST = 8
          VB: ASH_ST = 8
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.ANCSXY
      commentId: F:TM.EDeviceType.ANCSXY
      language: CSharp
      name:
        CSharp: ANCSXY
        VB: ANCSXY
      nameWithType:
        CSharp: EDeviceType.ANCSXY
        VB: EDeviceType.ANCSXY
      qualifiedName:
        CSharp: TM.EDeviceType.ANCSXY
        VB: TM.EDeviceType.ANCSXY
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ANCSXY
        path: ../TM/TM_protocol.cs
        startLine: 1330
      summary: "\nконтроллер перемещателя AUTONICS\n"
      example: []
      syntax:
        content:
          CSharp: ANCSXY = 9
          VB: ANCSXY = 9
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EDeviceType.MVCAM
      commentId: F:TM.EDeviceType.MVCAM
      language: CSharp
      name:
        CSharp: MVCAM
        VB: MVCAM
      nameWithType:
        CSharp: EDeviceType.MVCAM
        VB: EDeviceType.MVCAM
      qualifiedName:
        CSharp: TM.EDeviceType.MVCAM
        VB: TM.EDeviceType.MVCAM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MVCAM
        path: ../TM/TM_protocol.cs
        startLine: 1336
      summary: "\nвидеокамера MV\n"
      example: []
      syntax:
        content:
          CSharp: MVCAM = 10
          VB: MVCAM = 10
        return:
          type: TM.EDeviceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EServerConnectSignature
    commentId: T:TM.EServerConnectSignature
    language: CSharp
    name:
      CSharp: EServerConnectSignature
      VB: EServerConnectSignature
    nameWithType:
      CSharp: EServerConnectSignature
      VB: EServerConnectSignature
    qualifiedName:
      CSharp: TM.EServerConnectSignature
      VB: TM.EServerConnectSignature
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EServerConnectSignature
      path: ../TM/TM_protocol.cs
      startLine: 1343
    summary: "\nEnum EServerConnectSignature\n"
    example: []
    syntax:
      content:
        CSharp: public enum EServerConnectSignature
        VB: Public Enum EServerConnectSignature
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EServerConnectSignature.LNKLIB
      commentId: F:TM.EServerConnectSignature.LNKLIB
      language: CSharp
      name:
        CSharp: LNKLIB
        VB: LNKLIB
      nameWithType:
        CSharp: EServerConnectSignature.LNKLIB
        VB: EServerConnectSignature.LNKLIB
      qualifiedName:
        CSharp: TM.EServerConnectSignature.LNKLIB
        VB: TM.EServerConnectSignature.LNKLIB
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LNKLIB
        path: ../TM/TM_protocol.cs
        startLine: 1348
      summary: "\nлинклиб\n"
      example: []
      syntax:
        content:
          CSharp: LNKLIB = 0
          VB: LNKLIB = 0
        return:
          type: TM.EServerConnectSignature
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectSignature.TMPROTOCOL
      commentId: F:TM.EServerConnectSignature.TMPROTOCOL
      language: CSharp
      name:
        CSharp: TMPROTOCOL
        VB: TMPROTOCOL
      nameWithType:
        CSharp: EServerConnectSignature.TMPROTOCOL
        VB: EServerConnectSignature.TMPROTOCOL
      qualifiedName:
        CSharp: TM.EServerConnectSignature.TMPROTOCOL
        VB: TM.EServerConnectSignature.TMPROTOCOL
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMPROTOCOL
        path: ../TM/TM_protocol.cs
        startLine: 1354
      summary: "\nпротокол TM_Protocol\n"
      example: []
      syntax:
        content:
          CSharp: TMPROTOCOL = 1
          VB: TMPROTOCOL = 1
        return:
          type: TM.EServerConnectSignature
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectSignature.DIRECT
      commentId: F:TM.EServerConnectSignature.DIRECT
      language: CSharp
      name:
        CSharp: DIRECT
        VB: DIRECT
      nameWithType:
        CSharp: EServerConnectSignature.DIRECT
        VB: EServerConnectSignature.DIRECT
      qualifiedName:
        CSharp: TM.EServerConnectSignature.DIRECT
        VB: TM.EServerConnectSignature.DIRECT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DIRECT
        path: ../TM/TM_protocol.cs
        startLine: 1360
      summary: "\nпрямое подключение к COM порту c оберткой для 485\n"
      example: []
      syntax:
        content:
          CSharp: DIRECT = 2
          VB: DIRECT = 2
        return:
          type: TM.EServerConnectSignature
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectSignature.IMITATION
      commentId: F:TM.EServerConnectSignature.IMITATION
      language: CSharp
      name:
        CSharp: IMITATION
        VB: IMITATION
      nameWithType:
        CSharp: EServerConnectSignature.IMITATION
        VB: EServerConnectSignature.IMITATION
      qualifiedName:
        CSharp: TM.EServerConnectSignature.IMITATION
        VB: TM.EServerConnectSignature.IMITATION
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IMITATION
        path: ../TM/TM_protocol.cs
        startLine: 1366
      summary: "\nимитация подключения\n"
      example: []
      syntax:
        content:
          CSharp: IMITATION = 3
          VB: IMITATION = 3
        return:
          type: TM.EServerConnectSignature
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectSignature.TCPCUSTOM
      commentId: F:TM.EServerConnectSignature.TCPCUSTOM
      language: CSharp
      name:
        CSharp: TCPCUSTOM
        VB: TCPCUSTOM
      nameWithType:
        CSharp: EServerConnectSignature.TCPCUSTOM
        VB: EServerConnectSignature.TCPCUSTOM
      qualifiedName:
        CSharp: TM.EServerConnectSignature.TCPCUSTOM
        VB: TM.EServerConnectSignature.TCPCUSTOM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TCPCUSTOM
        path: ../TM/TM_protocol.cs
        startLine: 1372
      summary: "\nпростое TCP\n"
      example: []
      syntax:
        content:
          CSharp: TCPCUSTOM = 4
          VB: TCPCUSTOM = 4
        return:
          type: TM.EServerConnectSignature
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectSignature.RS232
      commentId: F:TM.EServerConnectSignature.RS232
      language: CSharp
      name:
        CSharp: RS232
        VB: RS232
      nameWithType:
        CSharp: EServerConnectSignature.RS232
        VB: EServerConnectSignature.RS232
      qualifiedName:
        CSharp: TM.EServerConnectSignature.RS232
        VB: TM.EServerConnectSignature.RS232
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RS232
        path: ../TM/TM_protocol.cs
        startLine: 1378
      summary: "\nпрямое подключение к COM порту\n"
      example: []
      syntax:
        content:
          CSharp: RS232 = 5
          VB: RS232 = 5
        return:
          type: TM.EServerConnectSignature
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.EServerConnectType
    commentId: T:TM.EServerConnectType
    language: CSharp
    name:
      CSharp: EServerConnectType
      VB: EServerConnectType
    nameWithType:
      CSharp: EServerConnectType
      VB: EServerConnectType
    qualifiedName:
      CSharp: TM.EServerConnectType
      VB: TM.EServerConnectType
    type: Enum
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: EServerConnectType
      path: ../TM/TM_protocol.cs
      startLine: 1387
    summary: "\nспособы подключения сервера к источнику данных <br />\nиспользуется в ParseTagAsString, ParseConnectType, _DataServer_Info2Tree, <br />\nConnectToServer, DisconnectFromServer, IsConnected <br />\n"
    example: []
    syntax:
      content:
        CSharp: public enum EServerConnectType
        VB: Public Enum EServerConnectType
    extensionMethods:
    - System.Enum.TM.Extensions.Description
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: TM.EServerConnectType.NONE
      commentId: F:TM.EServerConnectType.NONE
      language: CSharp
      name:
        CSharp: NONE
        VB: NONE
      nameWithType:
        CSharp: EServerConnectType.NONE
        VB: EServerConnectType.NONE
      qualifiedName:
        CSharp: TM.EServerConnectType.NONE
        VB: TM.EServerConnectType.NONE
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: NONE
        path: ../TM/TM_protocol.cs
        startLine: 1392
      summary: "\nзаглушка\n"
      example: []
      syntax:
        content:
          CSharp: NONE = 0
          VB: NONE = 0
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectType.LNKLIB
      commentId: F:TM.EServerConnectType.LNKLIB
      language: CSharp
      name:
        CSharp: LNKLIB
        VB: LNKLIB
      nameWithType:
        CSharp: EServerConnectType.LNKLIB
        VB: EServerConnectType.LNKLIB
      qualifiedName:
        CSharp: TM.EServerConnectType.LNKLIB
        VB: TM.EServerConnectType.LNKLIB
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: LNKLIB
        path: ../TM/TM_protocol.cs
        startLine: 1398
      summary: "\nбиблиотека linklib.h by P.Lunev (ретранслятор на кресло, температурные мастера, рентген-сервер(железо)...)\n"
      example: []
      syntax:
        content:
          CSharp: LNKLIB = 1
          VB: LNKLIB = 1
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectType.TMPROTOCOL
      commentId: F:TM.EServerConnectType.TMPROTOCOL
      language: CSharp
      name:
        CSharp: TMPROTOCOL
        VB: TMPROTOCOL
      nameWithType:
        CSharp: EServerConnectType.TMPROTOCOL
        VB: EServerConnectType.TMPROTOCOL
      qualifiedName:
        CSharp: TM.EServerConnectType.TMPROTOCOL
        VB: TM.EServerConnectType.TMPROTOCOL
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMPROTOCOL
        path: ../TM/TM_protocol.cs
        startLine: 1404
      summary: "\nпротокол TM_Protocol ( расширение TCP - температурный сервер-клиент, рентген-сервер-томограф, прокси кресла )\n"
      example: []
      syntax:
        content:
          CSharp: TMPROTOCOL = 2
          VB: TMPROTOCOL = 2
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectType.DIRECT
      commentId: F:TM.EServerConnectType.DIRECT
      language: CSharp
      name:
        CSharp: DIRECT
        VB: DIRECT
      nameWithType:
        CSharp: EServerConnectType.DIRECT
        VB: EServerConnectType.DIRECT
      qualifiedName:
        CSharp: TM.EServerConnectType.DIRECT
        VB: TM.EServerConnectType.DIRECT
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: DIRECT
        path: ../TM/TM_protocol.cs
        startLine: 1412
      summary: "\nпрямое подключение к COM порту <br />\n(реализовано для кресла, для температурного сервера, для ретген-сервера)<br />\nc оберткой для RS485 \\&quot;+\\&quot;/\\&quot;:\\&quot;&quot;)]\n"
      example: []
      syntax:
        content:
          CSharp: DIRECT = 4
          VB: DIRECT = 4
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectType.IMITATION
      commentId: F:TM.EServerConnectType.IMITATION
      language: CSharp
      name:
        CSharp: IMITATION
        VB: IMITATION
      nameWithType:
        CSharp: EServerConnectType.IMITATION
        VB: EServerConnectType.IMITATION
      qualifiedName:
        CSharp: TM.EServerConnectType.IMITATION
        VB: TM.EServerConnectType.IMITATION
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IMITATION
        path: ../TM/TM_protocol.cs
        startLine: 1418
      summary: "\nимитация подключения к устройству - всегда успешное. Для программ-имитаторов\n"
      example: []
      syntax:
        content:
          CSharp: IMITATION = 8
          VB: IMITATION = 8
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectType.TCPCUSTOM
      commentId: F:TM.EServerConnectType.TCPCUSTOM
      language: CSharp
      name:
        CSharp: TCPCUSTOM
        VB: TCPCUSTOM
      nameWithType:
        CSharp: EServerConnectType.TCPCUSTOM
        VB: EServerConnectType.TCPCUSTOM
      qualifiedName:
        CSharp: TM.EServerConnectType.TCPCUSTOM
        VB: TM.EServerConnectType.TCPCUSTOM
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TCPCUSTOM
        path: ../TM/TM_protocol.cs
        startLine: 1424
      summary: "\nпростое TCP - подключение к устройству. Разбор полностью реализуется по месту использования\n"
      example: []
      syntax:
        content:
          CSharp: TCPCUSTOM = 16
          VB: TCPCUSTOM = 16
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: TM.EServerConnectType.RS232
      commentId: F:TM.EServerConnectType.RS232
      language: CSharp
      name:
        CSharp: RS232
        VB: RS232
      nameWithType:
        CSharp: EServerConnectType.RS232
        VB: EServerConnectType.RS232
      qualifiedName:
        CSharp: TM.EServerConnectType.RS232
        VB: TM.EServerConnectType.RS232
      type: Field
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: RS232
        path: ../TM/TM_protocol.cs
        startLine: 1430
      summary: "\nпрямое подключение к ком-порту (COM порт реализовано Autonics)\n"
      example: []
      syntax:
        content:
          CSharp: RS232 = 32
          VB: RS232 = 32
        return:
          type: TM.EServerConnectType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: TM.TMPacketSignature
    commentId: T:TM.TMPacketSignature
    language: CSharp
    name:
      CSharp: TMPacketSignature
      VB: TMPacketSignature
    nameWithType:
      CSharp: TMPacketSignature
      VB: TMPacketSignature
    qualifiedName:
      CSharp: TM.TMPacketSignature
      VB: TM.TMPacketSignature
    type: Class
    assemblies:
    - TM
    namespace: TM
    source:
      remote:
        path: TM/TM_protocol.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: TMPacketSignature
      path: ../TM/TM_protocol.cs
      startLine: 1439
    summary: "\nClass TMPacketSignature.\n"
    example: []
    syntax:
      content:
        CSharp: public static class TMPacketSignature
        VB: Public Module TMPacketSignature
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: TM.TMPacketSignature._ACC
      commentId: P:TM.TMPacketSignature._ACC
      language: CSharp
      name:
        CSharp: _ACC
        VB: _ACC
      nameWithType:
        CSharp: TMPacketSignature._ACC
        VB: TMPacketSignature._ACC
      qualifiedName:
        CSharp: TM.TMPacketSignature._ACC
        VB: TM.TMPacketSignature._ACC
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: _ACC
        path: ../TM/TM_protocol.cs
        startLine: 1447
      summary: "\nGets the acc.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] _ACC { get; }
          VB: Public Shared ReadOnly Property _ACC As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature._ACC*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature._ASH
      commentId: P:TM.TMPacketSignature._ASH
      language: CSharp
      name:
        CSharp: _ASH
        VB: _ASH
      nameWithType:
        CSharp: TMPacketSignature._ASH
        VB: TMPacketSignature._ASH
      qualifiedName:
        CSharp: TM.TMPacketSignature._ASH
        VB: TM.TMPacketSignature._ASH
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: _ASH
        path: ../TM/TM_protocol.cs
        startLine: 1459
      summary: "\nу-во на AT-Mega. Не является маркером, просто для идентификации в DataServers_Info2Tree и конфигах\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] _ASH { get; }
          VB: Public Shared ReadOnly Property _ASH As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature._ASH*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature._PFS
      commentId: P:TM.TMPacketSignature._PFS
      language: CSharp
      name:
        CSharp: _PFS
        VB: _PFS
      nameWithType:
        CSharp: TMPacketSignature._PFS
        VB: TMPacketSignature._PFS
      qualifiedName:
        CSharp: TM.TMPacketSignature._PFS
        VB: TM.TMPacketSignature._PFS
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: _PFS
        path: ../TM/TM_protocol.cs
        startLine: 1471
      summary: "\nкресло. Не является маркером, просто для идентификации в DataServers_Info2Tree.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] _PFS { get; }
          VB: Public Shared ReadOnly Property _PFS As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature._PFS*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature._TML
      commentId: P:TM.TMPacketSignature._TML
      language: CSharp
      name:
        CSharp: _TML
        VB: _TML
      nameWithType:
        CSharp: TMPacketSignature._TML
        VB: TMPacketSignature._TML
      qualifiedName:
        CSharp: TM.TMPacketSignature._TML
        VB: TM.TMPacketSignature._TML
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: _TML
        path: ../TM/TM_protocol.cs
        startLine: 1484
      summary: "\nупрощенный температурный сервер (один слэйв).<br />\nНе является маркером, просто для идентификации в DataServers_Info2Tree и конфигах\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] _TML { get; }
          VB: Public Shared ReadOnly Property _TML As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature._TML*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.ADDA
      commentId: P:TM.TMPacketSignature.ADDA
      language: CSharp
      name:
        CSharp: ADDA
        VB: ADDA
      nameWithType:
        CSharp: TMPacketSignature.ADDA
        VB: TMPacketSignature.ADDA
      qualifiedName:
        CSharp: TM.TMPacketSignature.ADDA
        VB: TM.TMPacketSignature.ADDA
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ADDA
        path: ../TM/TM_protocol.cs
        startLine: 1496
      summary: "\nGets the adda.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ADDA { get; }
          VB: Public Shared ReadOnly Property ADDA As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.ADDA*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.ANCS
      commentId: P:TM.TMPacketSignature.ANCS
      language: CSharp
      name:
        CSharp: ANCS
        VB: ANCS
      nameWithType:
        CSharp: TMPacketSignature.ANCS
        VB: TMPacketSignature.ANCS
      qualifiedName:
        CSharp: TM.TMPacketSignature.ANCS
        VB: TM.TMPacketSignature.ANCS
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ANCS
        path: ../TM/TM_protocol.cs
        startLine: 1508
      summary: "\nперемещатель Autonics\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ANCS { get; }
          VB: Public Shared ReadOnly Property ANCS As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.ANCS*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.CAMS
      commentId: P:TM.TMPacketSignature.CAMS
      language: CSharp
      name:
        CSharp: CAMS
        VB: CAMS
      nameWithType:
        CSharp: TMPacketSignature.CAMS
        VB: TMPacketSignature.CAMS
      qualifiedName:
        CSharp: TM.TMPacketSignature.CAMS
        VB: TM.TMPacketSignature.CAMS
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: CAMS
        path: ../TM/TM_protocol.cs
        startLine: 1521
      summary: "\nсервер видеокамер. Не является маркером, просто для идентификации в конфигах\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] CAMS { get; }
          VB: Public Shared ReadOnly Property CAMS As Byte()
        parameters: []
        return:
          type: System.Byte[]
          description: The CAMS.
      overload: TM.TMPacketSignature.CAMS*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.ECSv
      commentId: P:TM.TMPacketSignature.ECSv
      language: CSharp
      name:
        CSharp: ECSv
        VB: ECSv
      nameWithType:
        CSharp: TMPacketSignature.ECSv
        VB: TMPacketSignature.ECSv
      qualifiedName:
        CSharp: TM.TMPacketSignature.ECSv
        VB: TM.TMPacketSignature.ECSv
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ECSv
        path: ../TM/TM_protocol.cs
        startLine: 1533
      summary: "\nконтроль выпуска (результаты выполнения)	TM\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ECSv { get; }
          VB: Public Shared ReadOnly Property ECSv As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.ECSv*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.MCSv
      commentId: P:TM.TMPacketSignature.MCSv
      language: CSharp
      name:
        CSharp: MCSv
        VB: MCSv
      nameWithType:
        CSharp: TMPacketSignature.MCSv
        VB: TMPacketSignature.MCSv
      qualifiedName:
        CSharp: TM.TMPacketSignature.MCSv
        VB: TM.TMPacketSignature.MCSv
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MCSv
        path: ../TM/TM_protocol.cs
        startLine: 1545
      summary: "\nMainControl Interface Software - транслятор к программе упр.ускорителем как сервер TM\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] MCSv { get; }
          VB: Public Shared ReadOnly Property MCSv As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.MCSv*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.MCTL
      commentId: P:TM.TMPacketSignature.MCTL
      language: CSharp
      name:
        CSharp: MCTL
        VB: MCTL
      nameWithType:
        CSharp: TMPacketSignature.MCTL
        VB: TMPacketSignature.MCTL
      qualifiedName:
        CSharp: TM.TMPacketSignature.MCTL
        VB: TM.TMPacketSignature.MCTL
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: MCTL
        path: ../TM/TM_protocol.cs
        startLine: 1558
      summary: "\nMainControl Software - программа упр.ускорителем как сервер (результаты выполнения, Израиль, не TM)\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] MCTL { get; }
          VB: Public Shared ReadOnly Property MCTL As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.MCTL*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.TM_C
      commentId: P:TM.TMPacketSignature.TM_C
      language: CSharp
      name:
        CSharp: TM_C
        VB: TM_C
      nameWithType:
        CSharp: TMPacketSignature.TM_C
        VB: TMPacketSignature.TM_C
      qualifiedName:
        CSharp: TM.TMPacketSignature.TM_C
        VB: TM.TMPacketSignature.TM_C
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TM_C
        path: ../TM/TM_protocol.cs
        startLine: 1570
      summary: "\nклиент томографа как сервер\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] TM_C { get; }
          VB: Public Shared ReadOnly Property TM_C As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.TM_C*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.TMCP
      commentId: P:TM.TMPacketSignature.TMCP
      language: CSharp
      name:
        CSharp: TMCP
        VB: TMCP
      nameWithType:
        CSharp: TMPacketSignature.TMCP
        VB: TMPacketSignature.TMCP
      qualifiedName:
        CSharp: TM.TMPacketSignature.TMCP
        VB: TM.TMPacketSignature.TMCP
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMCP
        path: ../TM/TM_protocol.cs
        startLine: 1582
      summary: "\nкресло-контроль - прокси-сервер\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] TMCP { get; }
          VB: Public Shared ReadOnly Property TMCP As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.TMCP*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.TMGT
      commentId: P:TM.TMPacketSignature.TMGT
      language: CSharp
      name:
        CSharp: TMGT
        VB: TMGT
      nameWithType:
        CSharp: TMPacketSignature.TMGT
        VB: TMPacketSignature.TMGT
      qualifiedName:
        CSharp: TM.TMPacketSignature.TMGT
        VB: TM.TMPacketSignature.TMGT
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMGT
        path: ../TM/TM_protocol.cs
        startLine: 1594
      summary: "\nглобал-тест\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] TMGT { get; }
          VB: Public Shared ReadOnly Property TMGT As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.TMGT*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.TMNS
      commentId: P:TM.TMPacketSignature.TMNS
      language: CSharp
      name:
        CSharp: TMNS
        VB: TMNS
      nameWithType:
        CSharp: TMPacketSignature.TMNS
        VB: TMPacketSignature.TMNS
      qualifiedName:
        CSharp: TM.TMPacketSignature.TMNS
        VB: TM.TMPacketSignature.TMNS
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMNS
        path: ../TM/TM_protocol.cs
        startLine: 1606
      summary: "\nдля сканера - только от клиента к неизвестному серверу	TM\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] TMNS { get; }
          VB: Public Shared ReadOnly Property TMNS As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.TMNS*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.TMPR
      commentId: P:TM.TMPacketSignature.TMPR
      language: CSharp
      name:
        CSharp: TMPR
        VB: TMPR
      nameWithType:
        CSharp: TMPacketSignature.TMPR
        VB: TMPacketSignature.TMPR
      qualifiedName:
        CSharp: TM.TMPacketSignature.TMPR
        VB: TM.TMPacketSignature.TMPR
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMPR
        path: ../TM/TM_protocol.cs
        startLine: 1618
      summary: "\nсервер термоконтроля.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] TMPR { get; }
          VB: Public Shared ReadOnly Property TMPR As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.TMPR*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.TMRT
      commentId: P:TM.TMPacketSignature.TMRT
      language: CSharp
      name:
        CSharp: TMRT
        VB: TMRT
      nameWithType:
        CSharp: TMPacketSignature.TMRT
        VB: TMPacketSignature.TMRT
      qualifiedName:
        CSharp: TM.TMPacketSignature.TMRT
        VB: TM.TMPacketSignature.TMRT
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: TMRT
        path: ../TM/TM_protocol.cs
        startLine: 1630
      summary: "\nретранслятор (конфигурация)\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] TMRT { get; }
          VB: Public Shared ReadOnly Property TMRT As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.TMRT*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.UNKNOWN
      commentId: P:TM.TMPacketSignature.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: TMPacketSignature.UNKNOWN
        VB: TMPacketSignature.UNKNOWN
      qualifiedName:
        CSharp: TM.TMPacketSignature.UNKNOWN
        VB: TM.TMPacketSignature.UNKNOWN
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: UNKNOWN
        path: ../TM/TM_protocol.cs
        startLine: 1642
      summary: "\nGets the unknown.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] UNKNOWN { get; }
          VB: Public Shared ReadOnly Property UNKNOWN As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.UNKNOWN*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: TM.TMPacketSignature.XRay
      commentId: P:TM.TMPacketSignature.XRay
      language: CSharp
      name:
        CSharp: XRay
        VB: XRay
      nameWithType:
        CSharp: TMPacketSignature.XRay
        VB: TMPacketSignature.XRay
      qualifiedName:
        CSharp: TM.TMPacketSignature.XRay
        VB: TM.TMPacketSignature.XRay
      type: Property
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: XRay
        path: ../TM/TM_protocol.cs
        startLine: 1654
      summary: "\nсервер рентгена\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] XRay { get; }
          VB: Public Shared ReadOnly Property XRay As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: TM.TMPacketSignature.XRay*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - isExtensionMethod: true
      id: TM.TMPacketSignature.ServerType(System.Byte[])
      commentId: M:TM.TMPacketSignature.ServerType(System.Byte[])
      language: CSharp
      name:
        CSharp: ServerType(Byte[])
        VB: ServerType(Byte())
      nameWithType:
        CSharp: TMPacketSignature.ServerType(Byte[])
        VB: TMPacketSignature.ServerType(Byte())
      qualifiedName:
        CSharp: TM.TMPacketSignature.ServerType(System.Byte[])
        VB: TM.TMPacketSignature.ServerType(System.Byte())
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerType
        path: ../TM/TM_protocol.cs
        startLine: 1672
      summary: "\nServers the type.\n"
      example: []
      syntax:
        content:
          CSharp: public static EServerType ServerType(this byte[] mark)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ServerType(mark As Byte()) As EServerType
        parameters:
        - id: mark
          type: System.Byte[]
          description: The mark.
        return:
          type: TM.EServerType
          description: EServerType.
      overload: TM.TMPacketSignature.ServerType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.TMPacketSignature.ServerType(System.String)
      commentId: M:TM.TMPacketSignature.ServerType(System.String)
      language: CSharp
      name:
        CSharp: ServerType(String)
        VB: ServerType(String)
      nameWithType:
        CSharp: TMPacketSignature.ServerType(String)
        VB: TMPacketSignature.ServerType(String)
      qualifiedName:
        CSharp: TM.TMPacketSignature.ServerType(System.String)
        VB: TM.TMPacketSignature.ServerType(System.String)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ServerType
        path: ../TM/TM_protocol.cs
        startLine: 1683
      summary: "\nServers the type.\n"
      example: []
      syntax:
        content:
          CSharp: public static EServerType ServerType(this string str)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ServerType(str As String) As EServerType
        parameters:
        - id: str
          type: System.String
          description: The string.
        return:
          type: TM.EServerType
          description: EServerType.
      overload: TM.TMPacketSignature.ServerType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: TM.TMPacketSignature.Signature(TM.EServerType)
      commentId: M:TM.TMPacketSignature.Signature(TM.EServerType)
      language: CSharp
      name:
        CSharp: Signature(EServerType)
        VB: Signature(EServerType)
      nameWithType:
        CSharp: TMPacketSignature.Signature(EServerType)
        VB: TMPacketSignature.Signature(EServerType)
      qualifiedName:
        CSharp: TM.TMPacketSignature.Signature(TM.EServerType)
        VB: TM.TMPacketSignature.Signature(TM.EServerType)
      type: Method
      assemblies:
      - TM
      namespace: TM
      source:
        remote:
          path: TM/TM_protocol.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Signature
        path: ../TM/TM_protocol.cs
        startLine: 1757
      summary: "\nSignatures the specified type.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] Signature(this EServerType type)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Signature(type As EServerType) As Byte()
        parameters:
        - id: type
          type: TM.EServerType
          description: The type.
        return:
          type: System.Byte[]
          description: System.Byte[].
      overload: TM.TMPacketSignature.Signature*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: TMCmdLet
  commentId: N:TMCmdLet
  language: CSharp
  name:
    CSharp: TMCmdLet
    VB: TMCmdLet
  nameWithType:
    CSharp: TMCmdLet
    VB: TMCmdLet
  qualifiedName:
    CSharp: TMCmdLet
    VB: TMCmdLet
  type: Namespace
  assemblies:
  - TM
  modifiers: {}
  items:
  - id: TMCmdLet.PlanCmdlet
    commentId: T:TMCmdLet.PlanCmdlet
    language: CSharp
    name:
      CSharp: PlanCmdlet
      VB: PlanCmdlet
    nameWithType:
      CSharp: PlanCmdlet
      VB: PlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.PlanCmdlet
      VB: TMCmdLet.PlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: PlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 26
    summary: "\nBase class of PlanCommands\n\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PlanCmdlet : PSCmdlet'
        VB: >-
          Public Class PlanCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.PlanCmdlet.IpAddress
      commentId: P:TMCmdLet.PlanCmdlet.IpAddress
      language: CSharp
      name:
        CSharp: IpAddress
        VB: IpAddress
      nameWithType:
        CSharp: PlanCmdlet.IpAddress
        VB: PlanCmdlet.IpAddress
      qualifiedName:
        CSharp: TMCmdLet.PlanCmdlet.IpAddress
        VB: TMCmdLet.PlanCmdlet.IpAddress
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IpAddress
        path: ../TM/TMClientCmdlet.cs
        startLine: 34
      summary: "\nGets or sets the destination hostname or IP address.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 1, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"ComputerName", "IP", "Host"})]

            public string IpAddress { get; set; }
          VB: >-
            <Parameter(Position:=1, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"ComputerName", "IP", "Host"})>

            Public Property IpAddress As String
        parameters: []
        return:
          type: System.String
          description: The ip address.
      overload: TMCmdLet.PlanCmdlet.IpAddress*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 1
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.PlanCmdlet.Port
      commentId: P:TMCmdLet.PlanCmdlet.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: PlanCmdlet.Port
        VB: PlanCmdlet.Port
      qualifiedName:
        CSharp: TMCmdLet.PlanCmdlet.Port
        VB: TMCmdLet.PlanCmdlet.Port
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClientCmdlet.cs
        startLine: 48
      summary: "\nGets or sets whether to perform a TCP port\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 2, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"TcpPort"})]

            public int Port { get; set; }
          VB: >-
            <Parameter(Position:=2, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"TcpPort"})>

            Public Property Port As Integer
        parameters: []
        return:
          type: System.Int32
          description: The port.
      overload: TMCmdLet.PlanCmdlet.Port*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 2
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.PlanCmdlet.OK
      commentId: P:TMCmdLet.PlanCmdlet.OK
      language: CSharp
      name:
        CSharp: OK
        VB: OK
      nameWithType:
        CSharp: PlanCmdlet.OK
        VB: PlanCmdlet.OK
      qualifiedName:
        CSharp: TMCmdLet.PlanCmdlet.OK
        VB: TMCmdLet.PlanCmdlet.OK
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: OK
        path: ../TM/TMClientCmdlet.cs
        startLine: 66
      summary: "\nOK == success\n"
      example: []
      syntax:
        content:
          CSharp: protected bool OK { get; set; }
          VB: Protected Property OK As Boolean
        parameters: []
        return:
          type: System.Boolean
          description: <code>true</code> if ok; otherwise, <code>false</code>.
      overload: TMCmdLet.PlanCmdlet.OK*
      modifiers:
        CSharp:
        - protected
        - get
        - set
        VB:
        - Protected
    - id: TMCmdLet.PlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.PlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: PlanCmdlet.ProcessRecord()
        VB: PlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.PlanCmdlet.ProcessRecord()
        VB: TMCmdLet.PlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 79
      summary: "\nProcessRecord implementation\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.PlanCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.PSCmdlet: 
  - id: TMCmdLet.GetPlanCmdlet
    commentId: T:TMCmdLet.GetPlanCmdlet
    language: CSharp
    name:
      CSharp: GetPlanCmdlet
      VB: GetPlanCmdlet
    nameWithType:
      CSharp: GetPlanCmdlet
      VB: GetPlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.GetPlanCmdlet
      VB: TMCmdLet.GetPlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: GetPlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 118
    summary: "\nRead plan data from file specified by -Path\nReturns plan data as list of <xref href=\"TM.PlanSpot\" data-throw-if-not-resolved=\"false\"></xref> objects.\nFor example:\n $plan = Get-Plan -Path test_plan.txt\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Get", "Plan")]

          [OutputType(new Type[]{typeof(PlanSpot)})]

          public class GetPlanCmdlet : PSCmdlet
        VB: >-
          <Cmdlet("Get", "Plan")>

          <OutputType(New Type() {GetType(PlanSpot)})>

          Public Class GetPlanCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Get
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.GetPlanCmdlet.Path
      commentId: P:TMCmdLet.GetPlanCmdlet.Path
      language: CSharp
      name:
        CSharp: Path
        VB: Path
      nameWithType:
        CSharp: GetPlanCmdlet.Path
        VB: GetPlanCmdlet.Path
      qualifiedName:
        CSharp: TMCmdLet.GetPlanCmdlet.Path
        VB: TMCmdLet.GetPlanCmdlet.Path
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Path
        path: ../TM/TMClientCmdlet.cs
        startLine: 128
      summary: "\nGets or sets the plan file.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 0, Mandatory = true, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"file", "f"})]

            [ValidateNotNullOrEmpty]

            public string Path { get; set; }
          VB: >-
            <Parameter(Position:=0, Mandatory:=True, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"file", "f"})>

            <ValidateNotNullOrEmpty>

            Public Property Path As String
        parameters: []
        return:
          type: System.String
          description: The path to plan file.
      overload: TMCmdLet.GetPlanCmdlet.Path*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 0
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        ctor: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.GetPlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.GetPlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: GetPlanCmdlet.ProcessRecord()
        VB: GetPlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.GetPlanCmdlet.ProcessRecord()
        VB: TMCmdLet.GetPlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 147
      summary: "\nProcesses the record.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.GetPlanCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      TM.PlanSpot: 
      System.Management.Automation.Cmdlet: 
      System.Management.Automation.PSCmdlet: 
  - id: TMCmdLet.InvokePlanCmdlet
    commentId: T:TMCmdLet.InvokePlanCmdlet
    language: CSharp
    name:
      CSharp: InvokePlanCmdlet
      VB: InvokePlanCmdlet
    nameWithType:
      CSharp: InvokePlanCmdlet
      VB: InvokePlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.InvokePlanCmdlet
      VB: TMCmdLet.InvokePlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: InvokePlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 178
    summary: "\n\n1. reads plan data from file<p></p>\n2. sends plan to server<p></p>\n3. sends command to start plan processing<p></p>\n4. waits for processing finished<p></p>\n\nUse Control-C - to stop plan processing<p></p>\nTo resume processing - use Start-Plan -resume\n\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Invoke", "Plan")]

          [OutputType(new Type[]{typeof(PlanSpotFull)})]

          public class InvokePlanCmdlet : PSCmdlet
        VB: >-
          <Cmdlet("Invoke", "Plan")>

          <OutputType(New Type() {GetType(PlanSpotFull)})>

          Public Class InvokePlanCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Invoke
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.InvokePlanCmdlet.Path
      commentId: P:TMCmdLet.InvokePlanCmdlet.Path
      language: CSharp
      name:
        CSharp: Path
        VB: Path
      nameWithType:
        CSharp: InvokePlanCmdlet.Path
        VB: InvokePlanCmdlet.Path
      qualifiedName:
        CSharp: TMCmdLet.InvokePlanCmdlet.Path
        VB: TMCmdLet.InvokePlanCmdlet.Path
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Path
        path: ../TM/TMClientCmdlet.cs
        startLine: 188
      summary: "\nGets or sets the plan file.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 0, Mandatory = true, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"file", "f"})]

            [ValidateNotNullOrEmpty]

            public string Path { get; set; }
          VB: >-
            <Parameter(Position:=0, Mandatory:=True, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"file", "f"})>

            <ValidateNotNullOrEmpty>

            Public Property Path As String
        parameters: []
        return:
          type: System.String
          description: The path to plan file.
      overload: TMCmdLet.InvokePlanCmdlet.Path*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 0
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        ctor: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.InvokePlanCmdlet.IpAddress
      commentId: P:TMCmdLet.InvokePlanCmdlet.IpAddress
      language: CSharp
      name:
        CSharp: IpAddress
        VB: IpAddress
      nameWithType:
        CSharp: InvokePlanCmdlet.IpAddress
        VB: InvokePlanCmdlet.IpAddress
      qualifiedName:
        CSharp: TMCmdLet.InvokePlanCmdlet.IpAddress
        VB: TMCmdLet.InvokePlanCmdlet.IpAddress
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IpAddress
        path: ../TM/TMClientCmdlet.cs
        startLine: 203
      summary: "\nGets or sets the destination hostname or IP address.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 1, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"ComputerName", "IP", "Host"})]

            public string IpAddress { get; set; }
          VB: >-
            <Parameter(Position:=1, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"ComputerName", "IP", "Host"})>

            Public Property IpAddress As String
        parameters: []
        return:
          type: System.String
          description: The IP address.
      overload: TMCmdLet.InvokePlanCmdlet.IpAddress*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 1
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.InvokePlanCmdlet.Port
      commentId: P:TMCmdLet.InvokePlanCmdlet.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: InvokePlanCmdlet.Port
        VB: InvokePlanCmdlet.Port
      qualifiedName:
        CSharp: TMCmdLet.InvokePlanCmdlet.Port
        VB: TMCmdLet.InvokePlanCmdlet.Port
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClientCmdlet.cs
        startLine: 217
      summary: "\nGets or sets a TCP port\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 2, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"TcpPort"})]

            public int Port { get; set; }
          VB: >-
            <Parameter(Position:=2, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"TcpPort"})>

            Public Property Port As Integer
        parameters: []
        return:
          type: System.Int32
          description: The port.
      overload: TMCmdLet.InvokePlanCmdlet.Port*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 2
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.InvokePlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.InvokePlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: InvokePlanCmdlet.ProcessRecord()
        VB: InvokePlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.InvokePlanCmdlet.ProcessRecord()
        VB: TMCmdLet.InvokePlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 234
      summary: "\nProcesses the record.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.InvokePlanCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: TMCmdLet.InvokePlanCmdlet.StopProcessing
      commentId: M:TMCmdLet.InvokePlanCmdlet.StopProcessing
      language: CSharp
      name:
        CSharp: StopProcessing()
        VB: StopProcessing()
      nameWithType:
        CSharp: InvokePlanCmdlet.StopProcessing()
        VB: InvokePlanCmdlet.StopProcessing()
      qualifiedName:
        CSharp: TMCmdLet.InvokePlanCmdlet.StopProcessing()
        VB: TMCmdLet.InvokePlanCmdlet.StopProcessing()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StopProcessing
        path: ../TM/TMClientCmdlet.cs
        startLine: 321
      summary: "\nOn Control-C, the plan execution will immediately cancel.<p></p>\nThis allows a cancellation to occur during plan execution<p></p>\nwithout having to wait for the end of processing.<p></p>\n"
      example: []
      syntax:
        content:
          CSharp: protected override void StopProcessing()
          VB: Protected Overrides Sub StopProcessing
      overload: TMCmdLet.InvokePlanCmdlet.StopProcessing*
      overridden: System.Management.Automation.Cmdlet.StopProcessing
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.PSCmdlet: 
      System.Management.Automation.Cmdlet: 
  - id: TMCmdLet.SendPlanCmdlet
    commentId: T:TMCmdLet.SendPlanCmdlet
    language: CSharp
    name:
      CSharp: SendPlanCmdlet
      VB: SendPlanCmdlet
    nameWithType:
      CSharp: SendPlanCmdlet
      VB: SendPlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.SendPlanCmdlet
      VB: TMCmdLet.SendPlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendPlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 374
    summary: "\nSends plan data to remote server.\nReturns <xref href=\"TM.TMClient\" data-throw-if-not-resolved=\"false\"></xref> object (the same object as in Connect-Server)\n\n<example><pre><code>   $client = Get-Plan test_plan.txt | Send-Plan\n      or\n   $plan = Get-Plan test_plan.txt\n   $client = Send-Plan $plan</code></pre></example>\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Send", "Plan")]

          [OutputType(new Type[]{typeof(TMClient)})]

          public class SendPlanCmdlet : PSCmdlet
        VB: >-
          <Cmdlet("Send", "Plan")>

          <OutputType(New Type() {GetType(TMClient)})>

          Public Class SendPlanCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Send
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.SendPlanCmdlet.Input
      commentId: P:TMCmdLet.SendPlanCmdlet.Input
      language: CSharp
      name:
        CSharp: Input
        VB: Input
      nameWithType:
        CSharp: SendPlanCmdlet.Input
        VB: SendPlanCmdlet.Input
      qualifiedName:
        CSharp: TMCmdLet.SendPlanCmdlet.Input
        VB: TMCmdLet.SendPlanCmdlet.Input
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Input
        path: ../TM/TMClientCmdlet.cs
        startLine: 393
      summary: "\nGets or sets the input object.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 0, ValueFromPipeline = true)]

            [Alias(new string[]{"Plan"})]

            public object Input { get; set; }
          VB: >-
            <Parameter(Position:=0, ValueFromPipeline:=True)>

            <Alias(New String() {"Plan"})>

            Public Property Input As Object
        parameters: []
        return:
          type: System.Object
          description: The input object.
      overload: TMCmdLet.SendPlanCmdlet.Input*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SendPlanCmdlet.IpAddress
      commentId: P:TMCmdLet.SendPlanCmdlet.IpAddress
      language: CSharp
      name:
        CSharp: IpAddress
        VB: IpAddress
      nameWithType:
        CSharp: SendPlanCmdlet.IpAddress
        VB: SendPlanCmdlet.IpAddress
      qualifiedName:
        CSharp: TMCmdLet.SendPlanCmdlet.IpAddress
        VB: TMCmdLet.SendPlanCmdlet.IpAddress
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IpAddress
        path: ../TM/TMClientCmdlet.cs
        startLine: 406
      summary: "\nGets or sets the destination hostname or IP address.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 1, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"ComputerName", "IP", "Host"})]

            public string IpAddress { get; set; }
          VB: >-
            <Parameter(Position:=1, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"ComputerName", "IP", "Host"})>

            Public Property IpAddress As String
        parameters: []
        return:
          type: System.String
          description: The IP address.
      overload: TMCmdLet.SendPlanCmdlet.IpAddress*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 1
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SendPlanCmdlet.Port
      commentId: P:TMCmdLet.SendPlanCmdlet.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: SendPlanCmdlet.Port
        VB: SendPlanCmdlet.Port
      qualifiedName:
        CSharp: TMCmdLet.SendPlanCmdlet.Port
        VB: TMCmdLet.SendPlanCmdlet.Port
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClientCmdlet.cs
        startLine: 420
      summary: "\nGets or sets the TCP port\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 2, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"TcpPort"})]

            public int Port { get; set; }
          VB: >-
            <Parameter(Position:=2, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"TcpPort"})>

            Public Property Port As Integer
        parameters: []
        return:
          type: System.Int32
          description: The port.
      overload: TMCmdLet.SendPlanCmdlet.Port*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 2
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SendPlanCmdlet.EndProcessing
      commentId: M:TMCmdLet.SendPlanCmdlet.EndProcessing
      language: CSharp
      name:
        CSharp: EndProcessing()
        VB: EndProcessing()
      nameWithType:
        CSharp: SendPlanCmdlet.EndProcessing()
        VB: SendPlanCmdlet.EndProcessing()
      qualifiedName:
        CSharp: TMCmdLet.SendPlanCmdlet.EndProcessing()
        VB: TMCmdLet.SendPlanCmdlet.EndProcessing()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: EndProcessing
        path: ../TM/TMClientCmdlet.cs
        startLine: 437
      summary: "\nEnds the processing.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void EndProcessing()
          VB: Protected Overrides Sub
      overload: TMCmdLet.SendPlanCmdlet.EndProcessing*
      overridden: System.Management.Automation.Cmdlet.EndProcessing
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: TMCmdLet.SendPlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.SendPlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: SendPlanCmdlet.ProcessRecord()
        VB: SendPlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.SendPlanCmdlet.ProcessRecord()
        VB: TMCmdLet.SendPlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 472
      summary: "\nProcessRecord implementation\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.SendPlanCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: TMCmdLet.SendPlanCmdlet.StopProcessing
      commentId: M:TMCmdLet.SendPlanCmdlet.StopProcessing
      language: CSharp
      name:
        CSharp: StopProcessing()
        VB: StopProcessing()
      nameWithType:
        CSharp: SendPlanCmdlet.StopProcessing()
        VB: SendPlanCmdlet.StopProcessing()
      qualifiedName:
        CSharp: TMCmdLet.SendPlanCmdlet.StopProcessing()
        VB: TMCmdLet.SendPlanCmdlet.StopProcessing()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StopProcessing
        path: ../TM/TMClientCmdlet.cs
        startLine: 527
      summary: "\nOn receiving the StopProcessing() request, the cmdlet will immediately cancel.<p></p>\nThis allows a cancellation to occur during a connection request without having<p></p>\nto wait for the timeout.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void StopProcessing()
          VB: Protected Overrides Sub StopProcessing
      overload: TMCmdLet.SendPlanCmdlet.StopProcessing*
      overridden: System.Management.Automation.Cmdlet.StopProcessing
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      TM.TMClient: 
      System.Management.Automation.Cmdlet: 
      TMCmdLet.PlanCmdlet: 
      System.Management.Automation.PSCmdlet: 
  - id: TMCmdLet.StartPlanCmdlet
    commentId: T:TMCmdLet.StartPlanCmdlet
    language: CSharp
    name:
      CSharp: StartPlanCmdlet
      VB: StartPlanCmdlet
    nameWithType:
      CSharp: StartPlanCmdlet
      VB: StartPlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.StartPlanCmdlet
      VB: TMCmdLet.StartPlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: StartPlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 558
    summary: "\nStarts plan processing on remote server<p></p>\nReturns <xref href=\"TM.TMClient\" data-throw-if-not-resolved=\"false\"></xref> object\n<example><pre><code>   # Load module\n   Import-Module ./TMClient.dll\n\n   # Set default Hostname:Port\n   Set-DefaultServer localhost 9996\n\n   # Read plan from file and send it to server\n   $client = Get-Plan test_plan.txt | Send-Plan\n\n   # Subscribe to PlanFinished event to run script { Write-Host &quot;Congratulations!&quot; }\n   Register-ObjectEvent $client PlanFinished -Action { Write-Host &quot;Congratulations!&quot; }\n\n   # Starts the plan processing on remote server\n   Start-Plan</code></pre></example>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Start", "Plan")]

          [OutputType(new Type[]{typeof(TMClient)})]

          public class StartPlanCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Start", "Plan")>

          <OutputType(New Type() {GetType(TMClient)})>

          Public Class StartPlanCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Start
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.StartPlanCmdlet.Resume
      commentId: P:TMCmdLet.StartPlanCmdlet.Resume
      language: CSharp
      name:
        CSharp: Resume
        VB: Resume
      nameWithType:
        CSharp: StartPlanCmdlet.Resume
        VB: StartPlanCmdlet.Resume
      qualifiedName:
        CSharp: TMCmdLet.StartPlanCmdlet.Resume
        VB: TMCmdLet.StartPlanCmdlet.Resume
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Resume
        path: ../TM/TMClientCmdlet.cs
        startLine: 587
      summary: "\nResume plan processing <xref href=\"TM.TMClient\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            public SwitchParameter Resume { get; set; }
          VB: >-
            <Parameter(Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            Public Property Resume As SwitchParameter
        parameters: []
        return:
          type: System.Management.Automation.SwitchParameter
          description: The resume.
      overload: TMCmdLet.StartPlanCmdlet.Resume*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        TM.TMClient: 
    - id: TMCmdLet.StartPlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.StartPlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: StartPlanCmdlet.ProcessRecord()
        VB: StartPlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.StartPlanCmdlet.ProcessRecord()
        VB: TMCmdLet.StartPlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 603
      summary: "\nStart plan processing on remote server\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.StartPlanCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: TMCmdLet.StartPlanCmdlet.StopProcessing
      commentId: M:TMCmdLet.StartPlanCmdlet.StopProcessing
      language: CSharp
      name:
        CSharp: StopProcessing()
        VB: StopProcessing()
      nameWithType:
        CSharp: StartPlanCmdlet.StopProcessing()
        VB: StartPlanCmdlet.StopProcessing()
      qualifiedName:
        CSharp: TMCmdLet.StartPlanCmdlet.StopProcessing()
        VB: TMCmdLet.StartPlanCmdlet.StopProcessing()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StopProcessing
        path: ../TM/TMClientCmdlet.cs
        startLine: 631
      summary: "\nOn Control-C, the plan execution will immediately cancel.<p></p>\nThis allows a cancellation to occur during plan execution without having<p></p>\nto wait for the end of processing.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void StopProcessing()
          VB: Protected Overrides Sub StopProcessing
      overload: TMCmdLet.StartPlanCmdlet.StopProcessing*
      overridden: System.Management.Automation.Cmdlet.StopProcessing
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      TM.TMClient: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.StopPlanCmdlet
    commentId: T:TMCmdLet.StopPlanCmdlet
    language: CSharp
    name:
      CSharp: StopPlanCmdlet
      VB: StopPlanCmdlet
    nameWithType:
      CSharp: StopPlanCmdlet
      VB: StopPlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.StopPlanCmdlet
      VB: TMCmdLet.StopPlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: StopPlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 694
    summary: "\nStops plan processing on remote server\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Stop", "Plan")]

          [OutputType(new Type[]{typeof(bool)})]

          public class StopPlanCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Stop", "Plan")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class StopPlanCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Stop
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.StopPlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.StopPlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: StopPlanCmdlet.ProcessRecord()
        VB: StopPlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.StopPlanCmdlet.ProcessRecord()
        VB: TMCmdLet.StopPlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 703
      summary: "\nProcess record implementation\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.StopPlanCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.SuspendPlanCmdlet
    commentId: T:TMCmdLet.SuspendPlanCmdlet
    language: CSharp
    name:
      CSharp: SuspendPlanCmdlet
      VB: SuspendPlanCmdlet
    nameWithType:
      CSharp: SuspendPlanCmdlet
      VB: SuspendPlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.SuspendPlanCmdlet
      VB: TMCmdLet.SuspendPlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SuspendPlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 722
    summary: "\nPauses plan processing on remote server.\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Suspend", "Plan")]

          [OutputType(new Type[]{typeof(bool)})]

          public class SuspendPlanCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Suspend", "Plan")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class SuspendPlanCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Suspend
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.SuspendPlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.SuspendPlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: SuspendPlanCmdlet.ProcessRecord()
        VB: SuspendPlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.SuspendPlanCmdlet.ProcessRecord()
        VB: TMCmdLet.SuspendPlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 731
      summary: "\nProcess record implementation.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.SuspendPlanCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.GetPlanResultsCmdlet
    commentId: T:TMCmdLet.GetPlanResultsCmdlet
    language: CSharp
    name:
      CSharp: GetPlanResultsCmdlet
      VB: GetPlanResultsCmdlet
    nameWithType:
      CSharp: GetPlanResultsCmdlet
      VB: GetPlanResultsCmdlet
    qualifiedName:
      CSharp: TMCmdLet.GetPlanResultsCmdlet
      VB: TMCmdLet.GetPlanResultsCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: GetPlanResultsCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 750
    summary: "\nReturns result of plan processing as a list of <xref href=\"TM.PlanSpotFull\" data-throw-if-not-resolved=\"false\"></xref> objects\n\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Get", "Results")]

          [OutputType(new Type[]{typeof(PlanSpotFull)})]

          public class GetPlanResultsCmdlet : PSCmdlet
        VB: >-
          <Cmdlet("Get", "Results")>

          <OutputType(New Type() {GetType(PlanSpotFull)})>

          Public Class GetPlanResultsCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Get
      - type: System.String
        value: Results
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord
      commentId: M:TMCmdLet.GetPlanResultsCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: GetPlanResultsCmdlet.ProcessRecord()
        VB: GetPlanResultsCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord()
        VB: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 759
      summary: "\nProcessRecord\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      TM.PlanSpotFull: 
      TMCmdLet.PlanCmdlet: 
      System.Management.Automation.PSCmdlet: 
  - id: TMCmdLet.ClearPlanCmdlet
    commentId: T:TMCmdLet.ClearPlanCmdlet
    language: CSharp
    name:
      CSharp: ClearPlanCmdlet
      VB: ClearPlanCmdlet
    nameWithType:
      CSharp: ClearPlanCmdlet
      VB: ClearPlanCmdlet
    qualifiedName:
      CSharp: TMCmdLet.ClearPlanCmdlet
      VB: TMCmdLet.ClearPlanCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ClearPlanCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 793
    summary: "\nClears plan on the server.\n\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Clear", "Plan")]

          [OutputType(new Type[]{typeof(bool)})]

          public class ClearPlanCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Clear", "Plan")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class ClearPlanCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Clear
      - type: System.String
        value: Plan
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.ClearPlanCmdlet.ProcessRecord
      commentId: M:TMCmdLet.ClearPlanCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: ClearPlanCmdlet.ProcessRecord()
        VB: ClearPlanCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.ClearPlanCmdlet.ProcessRecord()
        VB: TMCmdLet.ClearPlanCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 802
      summary: "\nProcessRecord\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.ClearPlanCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.ConnectServerCmdlet
    commentId: T:TMCmdLet.ConnectServerCmdlet
    language: CSharp
    name:
      CSharp: ConnectServerCmdlet
      VB: ConnectServerCmdlet
    nameWithType:
      CSharp: ConnectServerCmdlet
      VB: ConnectServerCmdlet
    qualifiedName:
      CSharp: TMCmdLet.ConnectServerCmdlet
      VB: TMCmdLet.ConnectServerCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: ConnectServerCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 821
    summary: "\nConnects to remote server. Returns <xref href=\"TM.TMClient\" data-throw-if-not-resolved=\"false\"></xref>  object.\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Connect", "Server")]

          [OutputType(new Type[]{typeof(TMClient)})]

          public class ConnectServerCmdlet : PSCmdlet
        VB: >-
          <Cmdlet("Connect", "Server")>

          <OutputType(New Type() {GetType(TMClient)})>

          Public Class ConnectServerCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Connect
      - type: System.String
        value: Server
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.ConnectServerCmdlet.IpAddress
      commentId: P:TMCmdLet.ConnectServerCmdlet.IpAddress
      language: CSharp
      name:
        CSharp: IpAddress
        VB: IpAddress
      nameWithType:
        CSharp: ConnectServerCmdlet.IpAddress
        VB: ConnectServerCmdlet.IpAddress
      qualifiedName:
        CSharp: TMCmdLet.ConnectServerCmdlet.IpAddress
        VB: TMCmdLet.ConnectServerCmdlet.IpAddress
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IpAddress
        path: ../TM/TMClientCmdlet.cs
        startLine: 831
      summary: "\nGets or sets the destination hostname or IP address.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [ValidateNotNullOrEmpty]

            [Alias(new string[]{"ComputerName", "IP", "Host"})]

            public string IpAddress { get; set; }
          VB: >-
            <Parameter(Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <ValidateNotNullOrEmpty>

            <Alias(New String() {"ComputerName", "IP", "Host"})>

            Public Property IpAddress As String
        parameters: []
        return:
          type: System.String
          description: The IP address.
      overload: TMCmdLet.ConnectServerCmdlet.IpAddress*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        ctor: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.ConnectServerCmdlet.Port
      commentId: P:TMCmdLet.ConnectServerCmdlet.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: ConnectServerCmdlet.Port
        VB: ConnectServerCmdlet.Port
      qualifiedName:
        CSharp: TMCmdLet.ConnectServerCmdlet.Port
        VB: TMCmdLet.ConnectServerCmdlet.Port
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClientCmdlet.cs
        startLine: 846
      summary: "\nGets or sets whether to perform a TCP port.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [ValidateRange(0, 65535)]

            [Parameter(Position = 1, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"TcpPort"})]

            public int Port { get; set; }
          VB: >-
            <ValidateRange(0, 65535)>

            <Parameter(Position:=1, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"TcpPort"})>

            Public Property Port As Integer
        parameters: []
        return:
          type: System.Int32
          description: The port.
      overload: TMCmdLet.ConnectServerCmdlet.Port*
      attributes:
      - type: System.Management.Automation.ValidateRangeAttribute
        ctor: System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
        arguments:
        - type: System.Int32
          value: 0
        - type: System.Int32
          value: 65535
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 1
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.ConnectServerCmdlet.ProcessRecord
      commentId: M:TMCmdLet.ConnectServerCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: ConnectServerCmdlet.ProcessRecord()
        VB: ConnectServerCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.ConnectServerCmdlet.ProcessRecord()
        VB: TMCmdLet.ConnectServerCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 864
      summary: "\nProcess record implementation.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.ConnectServerCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: TMCmdLet.ConnectServerCmdlet.StopProcessing
      commentId: M:TMCmdLet.ConnectServerCmdlet.StopProcessing
      language: CSharp
      name:
        CSharp: StopProcessing()
        VB: StopProcessing()
      nameWithType:
        CSharp: ConnectServerCmdlet.StopProcessing()
        VB: ConnectServerCmdlet.StopProcessing()
      qualifiedName:
        CSharp: TMCmdLet.ConnectServerCmdlet.StopProcessing()
        VB: TMCmdLet.ConnectServerCmdlet.StopProcessing()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: StopProcessing
        path: ../TM/TMClientCmdlet.cs
        startLine: 890
      summary: "\nOn Control-C = interrupt operation and disconnect\n"
      example: []
      syntax:
        content:
          CSharp: protected override void StopProcessing()
          VB: Protected Overrides Sub StopProcessing
      overload: TMCmdLet.ConnectServerCmdlet.StopProcessing*
      overridden: System.Management.Automation.Cmdlet.StopProcessing
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      TM.TMClient: 
      System.Management.Automation.Cmdlet: 
      System.Management.Automation.PSCmdlet: 
  - id: TMCmdLet.SetDefaultsCmdlet
    commentId: T:TMCmdLet.SetDefaultsCmdlet
    language: CSharp
    name:
      CSharp: SetDefaultsCmdlet
      VB: SetDefaultsCmdlet
    nameWithType:
      CSharp: SetDefaultsCmdlet
      VB: SetDefaultsCmdlet
    qualifiedName:
      CSharp: TMCmdLet.SetDefaultsCmdlet
      VB: TMCmdLet.SetDefaultsCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SetDefaultsCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 914
    summary: "\nSets default IP/Port of remote server.<br />\nThat allows to skip calling (-ip &quot;hostname&quot; -port XXX) in PlanCmdlets\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Set", "DefaultServer")]

          [OutputType(new Type[]{typeof(bool)})]

          public class SetDefaultsCmdlet : PSCmdlet
        VB: >-
          <Cmdlet("Set", "DefaultServer")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class SetDefaultsCmdlet

              Inherits PSCmdlet
    seealso:
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    inheritedMembers:
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Set
      - type: System.String
        value: DefaultServer
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.SetDefaultsCmdlet.IpAddress
      commentId: P:TMCmdLet.SetDefaultsCmdlet.IpAddress
      language: CSharp
      name:
        CSharp: IpAddress
        VB: IpAddress
      nameWithType:
        CSharp: SetDefaultsCmdlet.IpAddress
        VB: SetDefaultsCmdlet.IpAddress
      qualifiedName:
        CSharp: TMCmdLet.SetDefaultsCmdlet.IpAddress
        VB: TMCmdLet.SetDefaultsCmdlet.IpAddress
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: IpAddress
        path: ../TM/TMClientCmdlet.cs
        startLine: 924
      summary: "\nGets or sets the destination hostname or IP address.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Mandatory = true, Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [ValidateNotNullOrEmpty]

            [Alias(new string[]{"ComputerName", "IP", "Host"})]

            public string IpAddress { get; set; }
          VB: >-
            <Parameter(Mandatory:=True, Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <ValidateNotNullOrEmpty>

            <Alias(New String() {"ComputerName", "IP", "Host"})>

            Public Property IpAddress As String
        parameters: []
        return:
          type: System.String
          description: The ip address.
      overload: TMCmdLet.SetDefaultsCmdlet.IpAddress*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        ctor: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SetDefaultsCmdlet.Port
      commentId: P:TMCmdLet.SetDefaultsCmdlet.Port
      language: CSharp
      name:
        CSharp: Port
        VB: Port
      nameWithType:
        CSharp: SetDefaultsCmdlet.Port
        VB: SetDefaultsCmdlet.Port
      qualifiedName:
        CSharp: TMCmdLet.SetDefaultsCmdlet.Port
        VB: TMCmdLet.SetDefaultsCmdlet.Port
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Port
        path: ../TM/TMClientCmdlet.cs
        startLine: 940
      summary: "\nGets or sets whether to perform a TCP port\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [ValidateRange(0, 65535)]

            [Parameter(Mandatory = true, Position = 1, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"TcpPort"})]

            public int Port { get; set; }
          VB: >-
            <ValidateRange(0, 65535)>

            <Parameter(Mandatory:=True, Position:=1, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"TcpPort"})>

            Public Property Port As Integer
        parameters: []
        return:
          type: System.Int32
          description: The port.
      overload: TMCmdLet.SetDefaultsCmdlet.Port*
      attributes:
      - type: System.Management.Automation.ValidateRangeAttribute
        ctor: System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
        arguments:
        - type: System.Int32
          value: 0
        - type: System.Int32
          value: 65535
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: Position
          type: System.Int32
          value: 1
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SetDefaultsCmdlet.ProcessRecord
      commentId: M:TMCmdLet.SetDefaultsCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: SetDefaultsCmdlet.ProcessRecord()
        VB: SetDefaultsCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.SetDefaultsCmdlet.ProcessRecord()
        VB: TMCmdLet.SetDefaultsCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 958
      summary: "\nProcess record implementation\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.SetDefaultsCmdlet.ProcessRecord*
      overridden: System.Management.Automation.Cmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      System.Management.Automation.PSCmdlet: 
  - id: TMCmdLet.DisconnectServerCmdlet
    commentId: T:TMCmdLet.DisconnectServerCmdlet
    language: CSharp
    name:
      CSharp: DisconnectServerCmdlet
      VB: DisconnectServerCmdlet
    nameWithType:
      CSharp: DisconnectServerCmdlet
      VB: DisconnectServerCmdlet
    qualifiedName:
      CSharp: TMCmdLet.DisconnectServerCmdlet
      VB: TMCmdLet.DisconnectServerCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: DisconnectServerCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 980
    summary: "\nDisconnects from remote server.\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <see cref=\"!:TMCmdlet.PlanCmdlet\"></see>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Disconnect", "Server")]

          [OutputType(new Type[]{typeof(bool)})]

          public class DisconnectServerCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Disconnect", "Server")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class DisconnectServerCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Disconnect
      - type: System.String
        value: Server
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.DisconnectServerCmdlet.ProcessRecord
      commentId: M:TMCmdLet.DisconnectServerCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: DisconnectServerCmdlet.ProcessRecord()
        VB: DisconnectServerCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.DisconnectServerCmdlet.ProcessRecord()
        VB: TMCmdLet.DisconnectServerCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 989
      summary: "\nProcessRecord\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.DisconnectServerCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.SendCommandCmdlet
    commentId: T:TMCmdLet.SendCommandCmdlet
    language: CSharp
    name:
      CSharp: SendCommandCmdlet
      VB: SendCommandCmdlet
    nameWithType:
      CSharp: SendCommandCmdlet
      VB: SendCommandCmdlet
    qualifiedName:
      CSharp: TMCmdLet.SendCommandCmdlet
      VB: TMCmdLet.SendCommandCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendCommandCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 1027
    summary: "\nSend EPlanCommand to server.<p></p>\n<pre><code>  public enum EPlanCommand\n  {\n     [Description(&quot;запрос на статус сервера&quot;)]\n     GETSTATE = 1,\n\n     [Description(&quot;запрос на очистку плана &quot;)]\n     CLEARPLAN = 2,\n\n     [Description(&quot;запрос на старт плана &quot;)]\n     STARTPLAN = 3,\n\n     [Description(&quot;запрос на паузу&quot;)]\n     PAUSEPLAN = 4,\n\n     [Description(&quot;запрос на останов&quot;)]\n     STOPPLAN = 5\n}</code></pre>\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Send", "Command")]

          [OutputType(new Type[]{typeof(bool)})]

          public class SendCommandCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Send", "Command")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class SendCommandCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Send
      - type: System.String
        value: Command
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.SendCommandCmdlet.Command
      commentId: P:TMCmdLet.SendCommandCmdlet.Command
      language: CSharp
      name:
        CSharp: Command
        VB: Command
      nameWithType:
        CSharp: SendCommandCmdlet.Command
        VB: SendCommandCmdlet.Command
      qualifiedName:
        CSharp: TMCmdLet.SendCommandCmdlet.Command
        VB: TMCmdLet.SendCommandCmdlet.Command
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Command
        path: ../TM/TMClientCmdlet.cs
        startLine: 1055
      summary: "\nGets or sets the command send to server.<p></p><pre><code>public enum EPlanCommand\n{\n[Description(&quot;запрос на статус сервера&quot;)]\nGETSTATE = 1,\n\n[Description(&quot;запрос на очистку плана &quot;)]\nCLEARPLAN = 2,\n\n[Description(&quot;запрос на старт плана &quot;)]\nSTARTPLAN = 3,\n\n[Description(&quot;запрос на паузу&quot;)]\nPAUSEPLAN = 4,\n\n[Description(&quot;запрос на останов&quot;)]\nSTOPPLAN = 5\n}</code></pre>\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Mandatory = true, Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [ValidateRange(1, 5)]

            public EPlanCommand Command { get; set; }
          VB: >-
            <Parameter(Mandatory:=True, Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <ValidateRange(1, 5)>

            Public Property Command As EPlanCommand
        parameters: []
        return:
          type: TM.EPlanCommand
          description: The command.
      overload: TMCmdLet.SendCommandCmdlet.Command*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateRangeAttribute
        ctor: System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
        arguments:
        - type: System.Int32
          value: 1
        - type: System.Int32
          value: 5
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SendCommandCmdlet.ProcessRecord
      commentId: M:TMCmdLet.SendCommandCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: SendCommandCmdlet.ProcessRecord()
        VB: SendCommandCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.SendCommandCmdlet.ProcessRecord()
        VB: TMCmdLet.SendCommandCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 1073
      summary: "\nProcess record implementation\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.SendCommandCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.SendInfoCmdlet
    commentId: T:TMCmdLet.SendInfoCmdlet
    language: CSharp
    name:
      CSharp: SendInfoCmdlet
      VB: SendInfoCmdlet
    nameWithType:
      CSharp: SendInfoCmdlet
      VB: SendInfoCmdlet
    qualifiedName:
      CSharp: TMCmdLet.SendInfoCmdlet
      VB: TMCmdLet.SendInfoCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendInfoCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 1094
    summary: "\nSend &quot;info&quot; message to server\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Send", "Info")]

          [OutputType(new Type[]{typeof(bool)})]

          public class SendInfoCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Send", "Info")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class SendInfoCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Send
      - type: System.String
        value: Info
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.SendInfoCmdlet.Info
      commentId: P:TMCmdLet.SendInfoCmdlet.Info
      language: CSharp
      name:
        CSharp: Info
        VB: Info
      nameWithType:
        CSharp: SendInfoCmdlet.Info
        VB: SendInfoCmdlet.Info
      qualifiedName:
        CSharp: TMCmdLet.SendInfoCmdlet.Info
        VB: TMCmdLet.SendInfoCmdlet.Info
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Info
        path: ../TM/TMClientCmdlet.cs
        startLine: 1104
      summary: "\nGets or sets the info message send to server.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Mandatory = true, Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [ValidateNotNullOrEmpty]

            public string Info { get; set; }
          VB: >-
            <Parameter(Mandatory:=True, Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <ValidateNotNullOrEmpty>

            Public Property Info As String
        parameters: []
        return:
          type: System.String
          description: The information.
      overload: TMCmdLet.SendInfoCmdlet.Info*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        ctor: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SendInfoCmdlet.ProcessRecord
      commentId: M:TMCmdLet.SendInfoCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: SendInfoCmdlet.ProcessRecord()
        VB: SendInfoCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.SendInfoCmdlet.ProcessRecord()
        VB: TMCmdLet.SendInfoCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 1122
      summary: "\nProcess Record\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.SendInfoCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      System.Management.Automation.PSCmdlet: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.SendDataCmdlet
    commentId: T:TMCmdLet.SendDataCmdlet
    language: CSharp
    name:
      CSharp: SendDataCmdlet
      VB: SendDataCmdlet
    nameWithType:
      CSharp: SendDataCmdlet
      VB: SendDataCmdlet
    qualifiedName:
      CSharp: TMCmdLet.SendDataCmdlet
      VB: TMCmdLet.SendDataCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: SendDataCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 1143
    summary: "\nClass used to send bulk of raw data (byte[]) to server\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"System.Management.Automation.PSCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Send", "Data")]

          [OutputType(new Type[]{typeof(bool)})]

          public class SendDataCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Send", "Data")>

          <OutputType(New Type() {GetType(Boolean)})>

          Public Class SendDataCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.PSCmdlet
      commentId: T:System.Management.Automation.PSCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Send
      - type: System.String
        value: Data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.SendDataCmdlet.Data
      commentId: P:TMCmdLet.SendDataCmdlet.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: SendDataCmdlet.Data
        VB: SendDataCmdlet.Data
      qualifiedName:
        CSharp: TMCmdLet.SendDataCmdlet.Data
        VB: TMCmdLet.SendDataCmdlet.Data
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: Data
        path: ../TM/TMClientCmdlet.cs
        startLine: 1153
      summary: "\nRAW BULK of DATA sent to server.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Parameter(Mandatory = true, Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [ValidateNotNullOrEmpty]

            public byte[] Data { get; set; }
          VB: >-
            <Parameter(Mandatory:=True, Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <ValidateNotNullOrEmpty>

            Public Property Data As Byte()
        parameters: []
        return:
          type: System.Byte[]
          description: The data.
      overload: TMCmdLet.SendDataCmdlet.Data*
      attributes:
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Mandatory
          type: System.Boolean
          value: true
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      - type: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        ctor: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.SendDataCmdlet.ProcessRecord
      commentId: M:TMCmdLet.SendDataCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: SendDataCmdlet.ProcessRecord()
        VB: SendDataCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.SendDataCmdlet.ProcessRecord()
        VB: TMCmdLet.SendDataCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 1171
      summary: "\nProcess record implementation\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.SendDataCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      System.Management.Automation.PSCmdlet: 
      TMCmdLet.PlanCmdlet: 
  - id: TMCmdLet.GetServerStateCmdlet
    commentId: T:TMCmdLet.GetServerStateCmdlet
    language: CSharp
    name:
      CSharp: GetServerStateCmdlet
      VB: GetServerStateCmdlet
    nameWithType:
      CSharp: GetServerStateCmdlet
      VB: GetServerStateCmdlet
    qualifiedName:
      CSharp: TMCmdLet.GetServerStateCmdlet
      VB: TMCmdLet.GetServerStateCmdlet
    type: Class
    assemblies:
    - TM
    namespace: TMCmdLet
    source:
      remote:
        path: TM/TMClientCmdlet.cs
        branch: master
        repo: https://github.com/x2v0/tm
      id: GetServerStateCmdlet
      path: ../TM/TMClientCmdlet.cs
      startLine: 1190
    summary: "\nReturns Server State.\n\n<br />Implements the <xref href=\"System.Management.Automation.Cmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n<br />Implements the <xref href=\"TMCmdLet.PlanCmdlet\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Cmdlet("Get", "ServerState")]

          [OutputType(new Type[]{typeof(ECommandState)})]

          public class GetServerStateCmdlet : PlanCmdlet
        VB: >-
          <Cmdlet("Get", "ServerState")>

          <OutputType(New Type() {GetType(ECommandState)})>

          Public Class GetServerStateCmdlet

              Inherits PlanCmdlet
    seealso:
    - linkId: TMCmdLet.PlanCmdlet
      commentId: T:TMCmdLet.PlanCmdlet
    - linkId: System.Management.Automation.Cmdlet
      commentId: T:System.Management.Automation.Cmdlet
    inheritance:
    - System.Object
    - System.Management.Automation.Internal.InternalCommand
    - System.Management.Automation.Cmdlet
    - System.Management.Automation.PSCmdlet
    - TMCmdLet.PlanCmdlet
    inheritedMembers:
    - TMCmdLet.PlanCmdlet.IpAddress
    - TMCmdLet.PlanCmdlet.Port
    - TMCmdLet.PlanCmdlet.OK
    - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    - System.Management.Automation.PSCmdlet.ParameterSetName
    - System.Management.Automation.PSCmdlet.MyInvocation
    - System.Management.Automation.PSCmdlet.InvokeCommand
    - System.Management.Automation.PSCmdlet.Host
    - System.Management.Automation.PSCmdlet.SessionState
    - System.Management.Automation.PSCmdlet.Events
    - System.Management.Automation.PSCmdlet.JobRepository
    - System.Management.Automation.PSCmdlet.InvokeProvider
    - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object)
    - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    - System.Management.Automation.Cmdlet.WriteWarning(System.String)
    - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    - System.Management.Automation.Cmdlet.WriteDebug(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    - System.Management.Automation.Cmdlet.Invoke
    - System.Management.Automation.Cmdlet.Invoke``1
    - System.Management.Automation.Cmdlet.TransactionAvailable
    - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    - System.Management.Automation.Cmdlet.BeginProcessing
    - System.Management.Automation.Cmdlet.EndProcessing
    - System.Management.Automation.Cmdlet.StopProcessing
    - System.Management.Automation.Cmdlet.Stopping
    - System.Management.Automation.Cmdlet.CommandRuntime
    - System.Management.Automation.Cmdlet.CurrentPSTransaction
    - System.Management.Automation.Internal.InternalCommand.CommandOrigin
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.Management.Automation.CmdletAttribute
      ctor: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: Get
      - type: System.String
        value: ServerState
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: TMCmdLet.GetServerStateCmdlet.WaitTime
      commentId: P:TMCmdLet.GetServerStateCmdlet.WaitTime
      language: CSharp
      name:
        CSharp: WaitTime
        VB: WaitTime
      nameWithType:
        CSharp: GetServerStateCmdlet.WaitTime
        VB: GetServerStateCmdlet.WaitTime
      qualifiedName:
        CSharp: TMCmdLet.GetServerStateCmdlet.WaitTime
        VB: TMCmdLet.GetServerStateCmdlet.WaitTime
      type: Property
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: WaitTime
        path: ../TM/TMClientCmdlet.cs
        startLine: 1201
      summary: "\nTo get server state - request is sent\nThis is the time to wait for server response\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [ValidateRange(0, 65535)]

            [Parameter(Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]

            [Alias(new string[]{"wait"})]

            public int WaitTime { get; set; }
          VB: >-
            <ValidateRange(0, 65535)>

            <Parameter(Position:=0, ValueFromPipeline:=True, ValueFromPipelineByPropertyName:=True)>

            <Alias(New String() {"wait"})>

            Public Property WaitTime As Integer
        parameters: []
        return:
          type: System.Int32
          description: wait time.
      overload: TMCmdLet.GetServerStateCmdlet.WaitTime*
      attributes:
      - type: System.Management.Automation.ValidateRangeAttribute
        ctor: System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
        arguments:
        - type: System.Int32
          value: 0
        - type: System.Int32
          value: 65535
      - type: System.Management.Automation.ParameterAttribute
        ctor: System.Management.Automation.ParameterAttribute.#ctor
        arguments: []
        namedArguments:
        - name: Position
          type: System.Int32
          value: 0
        - name: ValueFromPipeline
          type: System.Boolean
          value: true
        - name: ValueFromPipelineByPropertyName
          type: System.Boolean
          value: true
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: TMCmdLet.GetServerStateCmdlet.ProcessRecord
      commentId: M:TMCmdLet.GetServerStateCmdlet.ProcessRecord
      language: CSharp
      name:
        CSharp: ProcessRecord()
        VB: ProcessRecord()
      nameWithType:
        CSharp: GetServerStateCmdlet.ProcessRecord()
        VB: GetServerStateCmdlet.ProcessRecord()
      qualifiedName:
        CSharp: TMCmdLet.GetServerStateCmdlet.ProcessRecord()
        VB: TMCmdLet.GetServerStateCmdlet.ProcessRecord()
      type: Method
      assemblies:
      - TM
      namespace: TMCmdLet
      source:
        remote:
          path: TM/TMClientCmdlet.cs
          branch: master
          repo: https://github.com/x2v0/tm
        id: ProcessRecord
        path: ../TM/TMClientCmdlet.cs
        startLine: 1219
      summary: "\nProcessRecord implementation for GetServerStateCommand.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void ProcessRecord()
          VB: Protected Overrides Sub ProcessRecord
      overload: TMCmdLet.GetServerStateCmdlet.ProcessRecord*
      overridden: TMCmdLet.PlanCmdlet.ProcessRecord
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      System.Management.Automation.Cmdlet: 
      TMCmdLet.PlanCmdlet: 
references:
  TM.Extensions.Description(System.Enum):
    name:
      CSharp:
      - id: TM.Extensions.Description(System.Enum)
        name: Description
        nameWithType: Extensions.Description
        qualifiedName: TM.Extensions.Description
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.Description(System.Enum)
        name: Description
        nameWithType: Extensions.Description
        qualifiedName: TM.Extensions.Description
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.Description(System.Enum)
  TM:
    name:
      CSharp:
      - name: TM
        nameWithType: TM
        qualifiedName: TM
      VB:
      - name: TM
        nameWithType: TM
        qualifiedName: TM
    isDefinition: true
    commentId: N:TM
  TM.Extensions:
    name:
      CSharp:
      - id: TM.Extensions
        name: Extensions
        nameWithType: Extensions
        qualifiedName: TM.Extensions
      VB:
      - id: TM.Extensions
        name: Extensions
        nameWithType: Extensions
        qualifiedName: TM.Extensions
    isDefinition: true
    parent: TM
    commentId: T:TM.Extensions
  System.Enum.TM.Extensions.Description:
    name:
      CSharp:
      - id: TM.Extensions.Description
        name: Description
        nameWithType: Extensions.Description
        qualifiedName: TM.Extensions.Description
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.Description
        name: Description
        nameWithType: Extensions.Description
        qualifiedName: TM.Extensions.Description
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.Description(System.Enum)
    parent: TM.Extensions
    commentId: M:TM.Extensions.Description(System.Enum)
  TMSrv:
    name:
      CSharp:
      - name: TMSrv
        nameWithType: TMSrv
        qualifiedName: TMSrv
      VB:
      - name: TMSrv
        nameWithType: TMSrv
        qualifiedName: TMSrv
    isDefinition: true
    commentId: N:TMSrv
  TMSrv.EDataCommand:
    name:
      CSharp:
      - id: TMSrv.EDataCommand
        name: EDataCommand
        nameWithType: EDataCommand
        qualifiedName: TMSrv.EDataCommand
      VB:
      - id: TMSrv.EDataCommand
        name: EDataCommand
        nameWithType: EDataCommand
        qualifiedName: TMSrv.EDataCommand
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.EDataCommand
  TMSrv.ECommandState:
    name:
      CSharp:
      - id: TMSrv.ECommandState
        name: ECommandState
        nameWithType: ECommandState
        qualifiedName: TMSrv.ECommandState
      VB:
      - id: TMSrv.ECommandState
        name: ECommandState
        nameWithType: ECommandState
        qualifiedName: TMSrv.ECommandState
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.ECommandState
  TMSrv.EServerState:
    name:
      CSharp:
      - id: TMSrv.EServerState
        name: EServerState
        nameWithType: EServerState
        qualifiedName: TMSrv.EServerState
      VB:
      - id: TMSrv.EServerState
        name: EServerState
        nameWithType: EServerState
        qualifiedName: TMSrv.EServerState
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.EServerState
  TMSrv.ESpotResult:
    name:
      CSharp:
      - id: TMSrv.ESpotResult
        name: ESpotResult
        nameWithType: ESpotResult
        qualifiedName: TMSrv.ESpotResult
      VB:
      - id: TMSrv.ESpotResult
        name: ESpotResult
        nameWithType: ESpotResult
        qualifiedName: TMSrv.ESpotResult
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.ESpotResult
  TMSrv.ECommandError:
    name:
      CSharp:
      - id: TMSrv.ECommandError
        name: ECommandError
        nameWithType: ECommandError
        qualifiedName: TMSrv.ECommandError
      VB:
      - id: TMSrv.ECommandError
        name: ECommandError
        nameWithType: ECommandError
        qualifiedName: TMSrv.ECommandError
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.ECommandError
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  TMSrv.MCS_State:
    name:
      CSharp:
      - id: TMSrv.MCS_State
        name: MCS_State
        nameWithType: MCS_State
        qualifiedName: TMSrv.MCS_State
      VB:
      - id: TMSrv.MCS_State
        name: MCS_State
        nameWithType: MCS_State
        qualifiedName: TMSrv.MCS_State
    isDefinition: true
    commentId: T:TMSrv.MCS_State
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  TMSrv.MCS_State_topass.ToString*:
    name:
      CSharp:
      - id: TMSrv.MCS_State_topass.ToString*
        name: ToString
        nameWithType: MCS_State_topass.ToString
        qualifiedName: TMSrv.MCS_State_topass.ToString
      VB:
      - id: TMSrv.MCS_State_topass.ToString*
        name: ToString
        nameWithType: MCS_State_topass.ToString
        qualifiedName: TMSrv.MCS_State_topass.ToString
    isDefinition: true
    commentId: Overload:TMSrv.MCS_State_topass.ToString
  TMSrv.MCS_State_topass:
    name:
      CSharp:
      - id: TMSrv.MCS_State_topass
        name: MCS_State_topass
        nameWithType: MCS_State_topass
        qualifiedName: TMSrv.MCS_State_topass
      VB:
      - id: TMSrv.MCS_State_topass
        name: MCS_State_topass
        nameWithType: MCS_State_topass
        qualifiedName: TMSrv.MCS_State_topass
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.MCS_State_topass
  TMSrv.MCS_spot_results_topass:
    name:
      CSharp:
      - id: TMSrv.MCS_spot_results_topass
        name: MCS_spot_results_topass
        nameWithType: MCS_spot_results_topass
        qualifiedName: TMSrv.MCS_spot_results_topass
      VB:
      - id: TMSrv.MCS_spot_results_topass
        name: MCS_spot_results_topass
        nameWithType: MCS_spot_results_topass
        qualifiedName: TMSrv.MCS_spot_results_topass
    isDefinition: true
    commentId: T:TMSrv.MCS_spot_results_topass
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  TMSrv.MC_PT:
    name:
      CSharp:
      - id: TMSrv.MC_PT
        name: MC_PT
        nameWithType: MC_PT
        qualifiedName: TMSrv.MC_PT
      VB:
      - id: TMSrv.MC_PT
        name: MC_PT
        nameWithType: MC_PT
        qualifiedName: TMSrv.MC_PT
    isDefinition: true
    commentId: T:TMSrv.MC_PT
  TMSrv.MC_PT_ILH:
    name:
      CSharp:
      - id: TMSrv.MC_PT_ILH
        name: MC_PT_ILH
        nameWithType: MC_PT_ILH
        qualifiedName: TMSrv.MC_PT_ILH
      VB:
      - id: TMSrv.MC_PT_ILH
        name: MC_PT_ILH
        nameWithType: MC_PT_ILH
        qualifiedName: TMSrv.MC_PT_ILH
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.MC_PT_ILH
  TMSrv.TMDataServer:
    name:
      CSharp:
      - id: TMSrv.TMDataServer
        name: TMDataServer
        nameWithType: TMDataServer
        qualifiedName: TMSrv.TMDataServer
      VB:
      - id: TMSrv.TMDataServer
        name: TMDataServer
        nameWithType: TMDataServer
        qualifiedName: TMSrv.TMDataServer
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.TMDataServer
  TMSrv.TMDataServer.DataServers:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.DataServers
        name: DataServers
        nameWithType: TMDataServer.DataServers
        qualifiedName: TMSrv.TMDataServer.DataServers
      VB:
      - id: TMSrv.TMDataServer.DataServers
        name: DataServers
        nameWithType: TMDataServer.DataServers
        qualifiedName: TMSrv.TMDataServer.DataServers
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.DataServers
  TMSrv.TMDataServer.DACADC_MAX_DAC:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.DACADC_MAX_DAC
        name: DACADC_MAX_DAC
        nameWithType: TMDataServer.DACADC_MAX_DAC
        qualifiedName: TMSrv.TMDataServer.DACADC_MAX_DAC
      VB:
      - id: TMSrv.TMDataServer.DACADC_MAX_DAC
        name: DACADC_MAX_DAC
        nameWithType: TMDataServer.DACADC_MAX_DAC
        qualifiedName: TMSrv.TMDataServer.DACADC_MAX_DAC
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.DACADC_MAX_DAC
  TMSrv.TMDataServer.DACADC_MAX_ADC:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.DACADC_MAX_ADC
        name: DACADC_MAX_ADC
        nameWithType: TMDataServer.DACADC_MAX_ADC
        qualifiedName: TMSrv.TMDataServer.DACADC_MAX_ADC
      VB:
      - id: TMSrv.TMDataServer.DACADC_MAX_ADC
        name: DACADC_MAX_ADC
        nameWithType: TMDataServer.DACADC_MAX_ADC
        qualifiedName: TMSrv.TMDataServer.DACADC_MAX_ADC
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.DACADC_MAX_ADC
  TMSrv.TMDataServer.handle:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.handle
        name: handle
        nameWithType: TMDataServer.handle
        qualifiedName: TMSrv.TMDataServer.handle
      VB:
      - id: TMSrv.TMDataServer.handle
        name: handle
        nameWithType: TMDataServer.handle
        qualifiedName: TMSrv.TMDataServer.handle
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.handle
  TMSrv.TMDataServer.ip:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ip
        name: ip
        nameWithType: TMDataServer.ip
        qualifiedName: TMSrv.TMDataServer.ip
      VB:
      - id: TMSrv.TMDataServer.ip
        name: ip
        nameWithType: TMDataServer.ip
        qualifiedName: TMSrv.TMDataServer.ip
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.ip
  TMSrv.TMDataServer.port:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.port
        name: port
        nameWithType: TMDataServer.port
        qualifiedName: TMSrv.TMDataServer.port
      VB:
      - id: TMSrv.TMDataServer.port
        name: port
        nameWithType: TMDataServer.port
        qualifiedName: TMSrv.TMDataServer.port
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.port
  TMSrv.TMDataServer.ConnectType:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ConnectType
        name: ConnectType
        nameWithType: TMDataServer.ConnectType
        qualifiedName: TMSrv.TMDataServer.ConnectType
      VB:
      - id: TMSrv.TMDataServer.ConnectType
        name: ConnectType
        nameWithType: TMDataServer.ConnectType
        qualifiedName: TMSrv.TMDataServer.ConnectType
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.ConnectType
  TMSrv.TMDataServer.ConnectAvailable:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ConnectAvailable
        name: ConnectAvailable
        nameWithType: TMDataServer.ConnectAvailable
        qualifiedName: TMSrv.TMDataServer.ConnectAvailable
      VB:
      - id: TMSrv.TMDataServer.ConnectAvailable
        name: ConnectAvailable
        nameWithType: TMDataServer.ConnectAvailable
        qualifiedName: TMSrv.TMDataServer.ConnectAvailable
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.ConnectAvailable
  TMSrv.TMDataServer.type:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.type
        name: type
        nameWithType: TMDataServer.type
        qualifiedName: TMSrv.TMDataServer.type
      VB:
      - id: TMSrv.TMDataServer.type
        name: type
        nameWithType: TMDataServer.type
        qualifiedName: TMSrv.TMDataServer.type
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.type
  TMSrv.TMDataServer.name:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.name
        name: name
        nameWithType: TMDataServer.name
        qualifiedName: TMSrv.TMDataServer.name
      VB:
      - id: TMSrv.TMDataServer.name
        name: name
        nameWithType: TMDataServer.name
        qualifiedName: TMSrv.TMDataServer.name
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.name
  TMSrv.TMDataServer.OnProcessing:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.OnProcessing
        name: OnProcessing
        nameWithType: TMDataServer.OnProcessing
        qualifiedName: TMSrv.TMDataServer.OnProcessing
      VB:
      - id: TMSrv.TMDataServer.OnProcessing
        name: OnProcessing
        nameWithType: TMDataServer.OnProcessing
        qualifiedName: TMSrv.TMDataServer.OnProcessing
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.OnProcessing
  TMSrv.TMDataServer.COM:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.COM
        name: COM
        nameWithType: TMDataServer.COM
        qualifiedName: TMSrv.TMDataServer.COM
      VB:
      - id: TMSrv.TMDataServer.COM
        name: COM
        nameWithType: TMDataServer.COM
        qualifiedName: TMSrv.TMDataServer.COM
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.COM
  TMSrv.TMDataServer.lnk:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.lnk
        name: lnk
        nameWithType: TMDataServer.lnk
        qualifiedName: TMSrv.TMDataServer.lnk
      VB:
      - id: TMSrv.TMDataServer.lnk
        name: lnk
        nameWithType: TMDataServer.lnk
        qualifiedName: TMSrv.TMDataServer.lnk
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.lnk
  TMSrv.TMDataServer.ControlID:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ControlID
        name: ControlID
        nameWithType: TMDataServer.ControlID
        qualifiedName: TMSrv.TMDataServer.ControlID
      VB:
      - id: TMSrv.TMDataServer.ControlID
        name: ControlID
        nameWithType: TMDataServer.ControlID
        qualifiedName: TMSrv.TMDataServer.ControlID
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.ControlID
  TMSrv.TMDataServer.ControlRight:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ControlRight
        name: ControlRight
        nameWithType: TMDataServer.ControlRight
        qualifiedName: TMSrv.TMDataServer.ControlRight
      VB:
      - id: TMSrv.TMDataServer.ControlRight
        name: ControlRight
        nameWithType: TMDataServer.ControlRight
        qualifiedName: TMSrv.TMDataServer.ControlRight
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.ControlRight
  TMSrv.TMDataServer.Controls:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Controls
        name: Controls
        nameWithType: TMDataServer.Controls
        qualifiedName: TMSrv.TMDataServer.Controls
      VB:
      - id: TMSrv.TMDataServer.Controls
        name: Controls
        nameWithType: TMDataServer.Controls
        qualifiedName: TMSrv.TMDataServer.Controls
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.Controls
  TMSrv.TMDataServer.ControlsCount:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ControlsCount
        name: ControlsCount
        nameWithType: TMDataServer.ControlsCount
        qualifiedName: TMSrv.TMDataServer.ControlsCount
      VB:
      - id: TMSrv.TMDataServer.ControlsCount
        name: ControlsCount
        nameWithType: TMDataServer.ControlsCount
        qualifiedName: TMSrv.TMDataServer.ControlsCount
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.ControlsCount
  TMSrv.TMDataServer.DevStatus:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.DevStatus
        name: DevStatus
        nameWithType: TMDataServer.DevStatus
        qualifiedName: TMSrv.TMDataServer.DevStatus
      VB:
      - id: TMSrv.TMDataServer.DevStatus
        name: DevStatus
        nameWithType: TMDataServer.DevStatus
        qualifiedName: TMSrv.TMDataServer.DevStatus
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.DevStatus
  TMSrv.TMDataServer.InWait:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.InWait
        name: InWait
        nameWithType: TMDataServer.InWait
        qualifiedName: TMSrv.TMDataServer.InWait
      VB:
      - id: TMSrv.TMDataServer.InWait
        name: InWait
        nameWithType: TMDataServer.InWait
        qualifiedName: TMSrv.TMDataServer.InWait
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.InWait
  TMSrv.TMDataServer.LogPath:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.LogPath
        name: LogPath
        nameWithType: TMDataServer.LogPath
        qualifiedName: TMSrv.TMDataServer.LogPath
      VB:
      - id: TMSrv.TMDataServer.LogPath
        name: LogPath
        nameWithType: TMDataServer.LogPath
        qualifiedName: TMSrv.TMDataServer.LogPath
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.LogPath
  TMSrv.TMDataServer.NeedAutoReconnect:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.NeedAutoReconnect
        name: NeedAutoReconnect
        nameWithType: TMDataServer.NeedAutoReconnect
        qualifiedName: TMSrv.TMDataServer.NeedAutoReconnect
      VB:
      - id: TMSrv.TMDataServer.NeedAutoReconnect
        name: NeedAutoReconnect
        nameWithType: TMDataServer.NeedAutoReconnect
        qualifiedName: TMSrv.TMDataServer.NeedAutoReconnect
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.NeedAutoReconnect
  TMSrv.TMDataServer.NeedForReconnect:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.NeedForReconnect
        name: NeedForReconnect
        nameWithType: TMDataServer.NeedForReconnect
        qualifiedName: TMSrv.TMDataServer.NeedForReconnect
      VB:
      - id: TMSrv.TMDataServer.NeedForReconnect
        name: NeedForReconnect
        nameWithType: TMDataServer.NeedForReconnect
        qualifiedName: TMSrv.TMDataServer.NeedForReconnect
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.NeedForReconnect
  TMSrv.TMDataServer.buf:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.buf
        name: buf
        nameWithType: TMDataServer.buf
        qualifiedName: TMSrv.TMDataServer.buf
      VB:
      - id: TMSrv.TMDataServer.buf
        name: buf
        nameWithType: TMDataServer.buf
        qualifiedName: TMSrv.TMDataServer.buf
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.buf
  TMSrv.TMDataServer.timeout:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.timeout
        name: timeout
        nameWithType: TMDataServer.timeout
        qualifiedName: TMSrv.TMDataServer.timeout
      VB:
      - id: TMSrv.TMDataServer.timeout
        name: timeout
        nameWithType: TMDataServer.timeout
        qualifiedName: TMSrv.TMDataServer.timeout
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.timeout
  TMSrv.TMDataServer.TimerTicks:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.TimerTicks
        name: TimerTicks
        nameWithType: TMDataServer.TimerTicks
        qualifiedName: TMSrv.TMDataServer.TimerTicks
      VB:
      - id: TMSrv.TMDataServer.TimerTicks
        name: TimerTicks
        nameWithType: TMDataServer.TimerTicks
        qualifiedName: TMSrv.TMDataServer.TimerTicks
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.TimerTicks
  TMSrv.TMDataServer.TMSettings:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.TMSettings
        name: TMSettings
        nameWithType: TMDataServer.TMSettings
        qualifiedName: TMSrv.TMDataServer.TMSettings
      VB:
      - id: TMSrv.TMDataServer.TMSettings
        name: TMSettings
        nameWithType: TMDataServer.TMSettings
        qualifiedName: TMSrv.TMDataServer.TMSettings
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.TMSettings
  TMSrv.TMDataServer.traceToLog:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.traceToLog
        name: traceToLog
        nameWithType: TMDataServer.traceToLog
        qualifiedName: TMSrv.TMDataServer.traceToLog
      VB:
      - id: TMSrv.TMDataServer.traceToLog
        name: traceToLog
        nameWithType: TMDataServer.traceToLog
        qualifiedName: TMSrv.TMDataServer.traceToLog
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.traceToLog
  TMSrv.TMDataServer.update:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.update
        name: update
        nameWithType: TMDataServer.update
        qualifiedName: TMSrv.TMDataServer.update
      VB:
      - id: TMSrv.TMDataServer.update
        name: update
        nameWithType: TMDataServer.update
        qualifiedName: TMSrv.TMDataServer.update
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.update
  TMSrv.TMDataServer.UpdatePeriod:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.UpdatePeriod
        name: UpdatePeriod
        nameWithType: TMDataServer.UpdatePeriod
        qualifiedName: TMSrv.TMDataServer.UpdatePeriod
      VB:
      - id: TMSrv.TMDataServer.UpdatePeriod
        name: UpdatePeriod
        nameWithType: TMDataServer.UpdatePeriod
        qualifiedName: TMSrv.TMDataServer.UpdatePeriod
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.UpdatePeriod
  TMSrv.TMDataServer.UpdateTimerID:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.UpdateTimerID
        name: UpdateTimerID
        nameWithType: TMDataServer.UpdateTimerID
        qualifiedName: TMSrv.TMDataServer.UpdateTimerID
      VB:
      - id: TMSrv.TMDataServer.UpdateTimerID
        name: UpdateTimerID
        nameWithType: TMDataServer.UpdateTimerID
        qualifiedName: TMSrv.TMDataServer.UpdateTimerID
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.UpdateTimerID
  TMSrv.TMDataServer.configChanged:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.configChanged
        name: configChanged
        nameWithType: TMDataServer.configChanged
        qualifiedName: TMSrv.TMDataServer.configChanged
      VB:
      - id: TMSrv.TMDataServer.configChanged
        name: configChanged
        nameWithType: TMDataServer.configChanged
        qualifiedName: TMSrv.TMDataServer.configChanged
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: P:TMSrv.TMDataServer.configChanged
  TMSrv.TMDataServer.DS_LangText:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.DS_LangText
        name: DS_LangText
        nameWithType: TMDataServer.DS_LangText
        qualifiedName: TMSrv.TMDataServer.DS_LangText
      VB:
      - id: TMSrv.TMDataServer.DS_LangText
        name: DS_LangText
        nameWithType: TMDataServer.DS_LangText
        qualifiedName: TMSrv.TMDataServer.DS_LangText
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.DS_LangText
  TMSrv.TMDataServer.AfterTryConnect:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.AfterTryConnect
        name: AfterTryConnect
        nameWithType: TMDataServer.AfterTryConnect
        qualifiedName: TMSrv.TMDataServer.AfterTryConnect
      VB:
      - id: TMSrv.TMDataServer.AfterTryConnect
        name: AfterTryConnect
        nameWithType: TMDataServer.AfterTryConnect
        qualifiedName: TMSrv.TMDataServer.AfterTryConnect
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.AfterTryConnect
  TMSrv.TMDataServer.AfterDisconnect:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.AfterDisconnect
        name: AfterDisconnect
        nameWithType: TMDataServer.AfterDisconnect
        qualifiedName: TMSrv.TMDataServer.AfterDisconnect
      VB:
      - id: TMSrv.TMDataServer.AfterDisconnect
        name: AfterDisconnect
        nameWithType: TMDataServer.AfterDisconnect
        qualifiedName: TMSrv.TMDataServer.AfterDisconnect
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.AfterDisconnect
  TMSrv.TMDataServer.Disconnect:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Disconnect
        name: Disconnect
        nameWithType: TMDataServer.Disconnect
        qualifiedName: TMSrv.TMDataServer.Disconnect
      VB:
      - id: TMSrv.TMDataServer.Disconnect
        name: Disconnect
        nameWithType: TMDataServer.Disconnect
        qualifiedName: TMSrv.TMDataServer.Disconnect
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.Disconnect
  TMSrv.TMDataServer.Connect:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Connect
        name: Connect
        nameWithType: TMDataServer.Connect
        qualifiedName: TMSrv.TMDataServer.Connect
      VB:
      - id: TMSrv.TMDataServer.Connect
        name: Connect
        nameWithType: TMDataServer.Connect
        qualifiedName: TMSrv.TMDataServer.Connect
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.Connect
  TMSrv.TMDataServer.ChangeDevicesStatus:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ChangeDevicesStatus
        name: ChangeDevicesStatus
        nameWithType: TMDataServer.ChangeDevicesStatus
        qualifiedName: TMSrv.TMDataServer.ChangeDevicesStatus
      VB:
      - id: TMSrv.TMDataServer.ChangeDevicesStatus
        name: ChangeDevicesStatus
        nameWithType: TMDataServer.ChangeDevicesStatus
        qualifiedName: TMSrv.TMDataServer.ChangeDevicesStatus
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.ChangeDevicesStatus
  TMSrv.TMDataServer.FreeServerData:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.FreeServerData
        name: FreeServerData
        nameWithType: TMDataServer.FreeServerData
        qualifiedName: TMSrv.TMDataServer.FreeServerData
      VB:
      - id: TMSrv.TMDataServer.FreeServerData
        name: FreeServerData
        nameWithType: TMDataServer.FreeServerData
        qualifiedName: TMSrv.TMDataServer.FreeServerData
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.FreeServerData
  TMSrv.TMDataServer.ParseIncomingPacket:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ParseIncomingPacket
        name: ParseIncomingPacket
        nameWithType: TMDataServer.ParseIncomingPacket
        qualifiedName: TMSrv.TMDataServer.ParseIncomingPacket
      VB:
      - id: TMSrv.TMDataServer.ParseIncomingPacket
        name: ParseIncomingPacket
        nameWithType: TMDataServer.ParseIncomingPacket
        qualifiedName: TMSrv.TMDataServer.ParseIncomingPacket
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.ParseIncomingPacket
  TMSrv.TMDataServer.PostParseData:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.PostParseData
        name: PostParseData
        nameWithType: TMDataServer.PostParseData
        qualifiedName: TMSrv.TMDataServer.PostParseData
      VB:
      - id: TMSrv.TMDataServer.PostParseData
        name: PostParseData
        nameWithType: TMDataServer.PostParseData
        qualifiedName: TMSrv.TMDataServer.PostParseData
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.PostParseData
  TMSrv.TMDataServer.MakeCommand:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.MakeCommand
        name: MakeCommand
        nameWithType: TMDataServer.MakeCommand
        qualifiedName: TMSrv.TMDataServer.MakeCommand
      VB:
      - id: TMSrv.TMDataServer.MakeCommand
        name: MakeCommand
        nameWithType: TMDataServer.MakeCommand
        qualifiedName: TMSrv.TMDataServer.MakeCommand
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: E:TMSrv.TMDataServer.MakeCommand
  TMSrv.TMDataServer.Client:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Client
        name: Client
        nameWithType: TMDataServer.Client
        qualifiedName: TMSrv.TMDataServer.Client
      VB:
      - id: TMSrv.TMDataServer.Client
        name: Client
        nameWithType: TMDataServer.Client
        qualifiedName: TMSrv.TMDataServer.Client
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.Client
  TMSrv.TMDataServer.ServerData:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ServerData
        name: ServerData
        nameWithType: TMDataServer.ServerData
        qualifiedName: TMSrv.TMDataServer.ServerData
      VB:
      - id: TMSrv.TMDataServer.ServerData
        name: ServerData
        nameWithType: TMDataServer.ServerData
        qualifiedName: TMSrv.TMDataServer.ServerData
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: F:TMSrv.TMDataServer.ServerData
  TMSrv.TMDataServer.Dispose:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Dispose
        name: Dispose
        nameWithType: TMDataServer.Dispose
        qualifiedName: TMSrv.TMDataServer.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TMSrv.TMDataServer.Dispose
        name: Dispose
        nameWithType: TMDataServer.Dispose
        qualifiedName: TMSrv.TMDataServer.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: M:TMSrv.TMDataServer.Dispose
  TMSrv.TMDataServer.Dispose(System.Boolean):
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Dispose(System.Boolean)
        name: Dispose
        nameWithType: TMDataServer.Dispose
        qualifiedName: TMSrv.TMDataServer.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TMSrv.TMDataServer.Dispose(System.Boolean)
        name: Dispose
        nameWithType: TMDataServer.Dispose
        qualifiedName: TMSrv.TMDataServer.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: M:TMSrv.TMDataServer.Dispose(System.Boolean)
  TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType):
    name:
      CSharp:
      - id: TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType)
        name: AddServer
        nameWithType: TMDataServer.AddServer
        qualifiedName: TMSrv.TMDataServer.AddServer
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.EServerType
        name: EServerType
        nameWithType: EServerType
        qualifiedName: TM.EServerType
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType)
        name: AddServer
        nameWithType: TMDataServer.AddServer
        qualifiedName: TMSrv.TMDataServer.AddServer
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.EServerType
        name: EServerType
        nameWithType: EServerType
        qualifiedName: TM.EServerType
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: TMSrv.TMDataServer
    commentId: M:TMSrv.TMDataServer.AddServer(System.String,System.String,System.Int32,TM.EServerType)
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.IDisposable:
    name:
      CSharp:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      VB:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IDisposable
  TMSrv.MainCServer:
    name:
      CSharp:
      - id: TMSrv.MainCServer
        name: MainCServer
        nameWithType: MainCServer
        qualifiedName: TMSrv.MainCServer
      VB:
      - id: TMSrv.MainCServer
        name: MainCServer
        nameWithType: MainCServer
        qualifiedName: TMSrv.MainCServer
    isDefinition: true
    commentId: T:TMSrv.MainCServer
  TMSrv.VCControl:
    name:
      CSharp:
      - id: TMSrv.VCControl
        name: VCControl
        nameWithType: VCControl
        qualifiedName: TMSrv.VCControl
      VB:
      - id: TMSrv.VCControl
        name: VCControl
        nameWithType: VCControl
        qualifiedName: TMSrv.VCControl
    isDefinition: true
    commentId: T:TMSrv.VCControl
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Byte:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Byte
  System.UInt16[]:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  TMSrv.DACADC_data:
    name:
      CSharp:
      - id: TMSrv.DACADC_data
        name: DACADC_data
        nameWithType: DACADC_data
        qualifiedName: TMSrv.DACADC_data
      VB:
      - id: TMSrv.DACADC_data
        name: DACADC_data
        nameWithType: DACADC_data
        qualifiedName: TMSrv.DACADC_data
    isDefinition: true
    commentId: T:TMSrv.DACADC_data
  TMSrv.DevDescr:
    name:
      CSharp:
      - id: TMSrv.DevDescr
        name: DevDescr
        nameWithType: DevDescr
        qualifiedName: TMSrv.DevDescr
      VB:
      - id: TMSrv.DevDescr
        name: DevDescr
        nameWithType: DevDescr
        qualifiedName: TMSrv.DevDescr
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.DevDescr
  TMSrv.TmLnk.sid*:
    name:
      CSharp:
      - id: TMSrv.TmLnk.sid*
        name: sid
        nameWithType: TmLnk.sid
        qualifiedName: TMSrv.TmLnk.sid
      VB:
      - id: TMSrv.TmLnk.sid*
        name: sid
        nameWithType: TmLnk.sid
        qualifiedName: TMSrv.TmLnk.sid
    isDefinition: true
    commentId: Overload:TMSrv.TmLnk.sid
  System.UInt16:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt16
  TMSrv.TmLnk.RQ*:
    name:
      CSharp:
      - id: TMSrv.TmLnk.RQ*
        name: RQ
        nameWithType: TmLnk.RQ
        qualifiedName: TMSrv.TmLnk.RQ
      VB:
      - id: TMSrv.TmLnk.RQ*
        name: RQ
        nameWithType: TmLnk.RQ
        qualifiedName: TMSrv.TmLnk.RQ
    isDefinition: true
    commentId: Overload:TMSrv.TmLnk.RQ
  TMSrv.TmLnk.asknum*:
    name:
      CSharp:
      - id: TMSrv.TmLnk.asknum*
        name: asknum
        nameWithType: TmLnk.asknum
        qualifiedName: TMSrv.TmLnk.asknum
      VB:
      - id: TMSrv.TmLnk.asknum*
        name: asknum
        nameWithType: TmLnk.asknum
        qualifiedName: TMSrv.TmLnk.asknum
    isDefinition: true
    commentId: Overload:TMSrv.TmLnk.asknum
  TMSrv.TmLnk:
    name:
      CSharp:
      - id: TMSrv.TmLnk
        name: TmLnk
        nameWithType: TmLnk
        qualifiedName: TMSrv.TmLnk
      VB:
      - id: TMSrv.TmLnk
        name: TmLnk
        nameWithType: TmLnk
        qualifiedName: TMSrv.TmLnk
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.TmLnk
  TMSrv.ComData.config_flag*:
    name:
      CSharp:
      - id: TMSrv.ComData.config_flag*
        name: config_flag
        nameWithType: ComData.config_flag
        qualifiedName: TMSrv.ComData.config_flag
      VB:
      - id: TMSrv.ComData.config_flag*
        name: config_flag
        nameWithType: ComData.config_flag
        qualifiedName: TMSrv.ComData.config_flag
    isDefinition: true
    commentId: Overload:TMSrv.ComData.config_flag
  TMSrv.ComData.comport*:
    name:
      CSharp:
      - id: TMSrv.ComData.comport*
        name: comport
        nameWithType: ComData.comport
        qualifiedName: TMSrv.ComData.comport
      VB:
      - id: TMSrv.ComData.comport*
        name: comport
        nameWithType: ComData.comport
        qualifiedName: TMSrv.ComData.comport
    isDefinition: true
    commentId: Overload:TMSrv.ComData.comport
  TMSrv.ComData.baudrate*:
    name:
      CSharp:
      - id: TMSrv.ComData.baudrate*
        name: baudrate
        nameWithType: ComData.baudrate
        qualifiedName: TMSrv.ComData.baudrate
      VB:
      - id: TMSrv.ComData.baudrate*
        name: baudrate
        nameWithType: ComData.baudrate
        qualifiedName: TMSrv.ComData.baudrate
    isDefinition: true
    commentId: Overload:TMSrv.ComData.baudrate
  TMSrv.ComData.parity*:
    name:
      CSharp:
      - id: TMSrv.ComData.parity*
        name: parity
        nameWithType: ComData.parity
        qualifiedName: TMSrv.ComData.parity
      VB:
      - id: TMSrv.ComData.parity*
        name: parity
        nameWithType: ComData.parity
        qualifiedName: TMSrv.ComData.parity
    isDefinition: true
    commentId: Overload:TMSrv.ComData.parity
  TMSrv.ComData.databits*:
    name:
      CSharp:
      - id: TMSrv.ComData.databits*
        name: databits
        nameWithType: ComData.databits
        qualifiedName: TMSrv.ComData.databits
      VB:
      - id: TMSrv.ComData.databits*
        name: databits
        nameWithType: ComData.databits
        qualifiedName: TMSrv.ComData.databits
    isDefinition: true
    commentId: Overload:TMSrv.ComData.databits
  TMSrv.ComData.stopbits*:
    name:
      CSharp:
      - id: TMSrv.ComData.stopbits*
        name: stopbits
        nameWithType: ComData.stopbits
        qualifiedName: TMSrv.ComData.stopbits
      VB:
      - id: TMSrv.ComData.stopbits*
        name: stopbits
        nameWithType: ComData.stopbits
        qualifiedName: TMSrv.ComData.stopbits
    isDefinition: true
    commentId: Overload:TMSrv.ComData.stopbits
  TMSrv.ComData.inputq*:
    name:
      CSharp:
      - id: TMSrv.ComData.inputq*
        name: inputq
        nameWithType: ComData.inputq
        qualifiedName: TMSrv.ComData.inputq
      VB:
      - id: TMSrv.ComData.inputq*
        name: inputq
        nameWithType: ComData.inputq
        qualifiedName: TMSrv.ComData.inputq
    isDefinition: true
    commentId: Overload:TMSrv.ComData.inputq
  TMSrv.ComData.outputq*:
    name:
      CSharp:
      - id: TMSrv.ComData.outputq*
        name: outputq
        nameWithType: ComData.outputq
        qualifiedName: TMSrv.ComData.outputq
      VB:
      - id: TMSrv.ComData.outputq*
        name: outputq
        nameWithType: ComData.outputq
        qualifiedName: TMSrv.ComData.outputq
    isDefinition: true
    commentId: Overload:TMSrv.ComData.outputq
  TMSrv.ComData.PortOpen*:
    name:
      CSharp:
      - id: TMSrv.ComData.PortOpen*
        name: PortOpen
        nameWithType: ComData.PortOpen
        qualifiedName: TMSrv.ComData.PortOpen
      VB:
      - id: TMSrv.ComData.PortOpen*
        name: PortOpen
        nameWithType: ComData.PortOpen
        qualifiedName: TMSrv.ComData.PortOpen
    isDefinition: true
    commentId: Overload:TMSrv.ComData.PortOpen
  TMSrv.ComData.RS232Error*:
    name:
      CSharp:
      - id: TMSrv.ComData.RS232Error*
        name: RS232Error
        nameWithType: ComData.RS232Error
        qualifiedName: TMSrv.ComData.RS232Error
      VB:
      - id: TMSrv.ComData.RS232Error*
        name: RS232Error
        nameWithType: ComData.RS232Error
        qualifiedName: TMSrv.ComData.RS232Error
    isDefinition: true
    commentId: Overload:TMSrv.ComData.RS232Error
  TMSrv.ComData.timeout*:
    name:
      CSharp:
      - id: TMSrv.ComData.timeout*
        name: timeout
        nameWithType: ComData.timeout
        qualifiedName: TMSrv.ComData.timeout
      VB:
      - id: TMSrv.ComData.timeout*
        name: timeout
        nameWithType: ComData.timeout
        qualifiedName: TMSrv.ComData.timeout
    isDefinition: true
    commentId: Overload:TMSrv.ComData.timeout
  TMSrv.ComData.devicename*:
    name:
      CSharp:
      - id: TMSrv.ComData.devicename*
        name: devicename
        nameWithType: ComData.devicename
        qualifiedName: TMSrv.ComData.devicename
      VB:
      - id: TMSrv.ComData.devicename*
        name: devicename
        nameWithType: ComData.devicename
        qualifiedName: TMSrv.ComData.devicename
    isDefinition: true
    commentId: Overload:TMSrv.ComData.devicename
  TMSrv.ComData.PortBusyFlag*:
    name:
      CSharp:
      - id: TMSrv.ComData.PortBusyFlag*
        name: PortBusyFlag
        nameWithType: ComData.PortBusyFlag
        qualifiedName: TMSrv.ComData.PortBusyFlag
      VB:
      - id: TMSrv.ComData.PortBusyFlag*
        name: PortBusyFlag
        nameWithType: ComData.PortBusyFlag
        qualifiedName: TMSrv.ComData.PortBusyFlag
    isDefinition: true
    commentId: Overload:TMSrv.ComData.PortBusyFlag
  TMSrv.ComData:
    name:
      CSharp:
      - id: TMSrv.ComData
        name: ComData
        nameWithType: ComData
        qualifiedName: TMSrv.ComData
      VB:
      - id: TMSrv.ComData
        name: ComData
        nameWithType: ComData
        qualifiedName: TMSrv.ComData
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.ComData
  TMSrv.ComData.#ctor*:
    name:
      CSharp:
      - id: TMSrv.ComData.#ctor*
        name: ComData
        nameWithType: ComData.ComData
        qualifiedName: TMSrv.ComData.ComData
      VB:
      - id: TMSrv.ComData.#ctor*
        name: ComData
        nameWithType: ComData.ComData
        qualifiedName: TMSrv.ComData.ComData
    isDefinition: true
    commentId: Overload:TMSrv.ComData.#ctor
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{TMSrv.TMDataServer}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TMSrv.TMDataServer
        name: TMDataServer
        nameWithType: TMDataServer
        qualifiedName: TMSrv.TMDataServer
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TMSrv.TMDataServer
        name: TMDataServer
        nameWithType: TMDataServer
        qualifiedName: TMSrv.TMDataServer
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{TMSrv.TMDataServer}
  TMSrv.TMDataServer.handle*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.handle*
        name: handle
        nameWithType: TMDataServer.handle
        qualifiedName: TMSrv.TMDataServer.handle
      VB:
      - id: TMSrv.TMDataServer.handle*
        name: handle
        nameWithType: TMDataServer.handle
        qualifiedName: TMSrv.TMDataServer.handle
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.handle
  TMSrv.TMDataServer.ip*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ip*
        name: ip
        nameWithType: TMDataServer.ip
        qualifiedName: TMSrv.TMDataServer.ip
      VB:
      - id: TMSrv.TMDataServer.ip*
        name: ip
        nameWithType: TMDataServer.ip
        qualifiedName: TMSrv.TMDataServer.ip
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ip
  TMSrv.TMDataServer.port*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.port*
        name: port
        nameWithType: TMDataServer.port
        qualifiedName: TMSrv.TMDataServer.port
      VB:
      - id: TMSrv.TMDataServer.port*
        name: port
        nameWithType: TMDataServer.port
        qualifiedName: TMSrv.TMDataServer.port
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.port
  TM.EServerConnectType:
    name:
      CSharp:
      - id: TM.EServerConnectType
        name: EServerConnectType
        nameWithType: EServerConnectType
        qualifiedName: TM.EServerConnectType
      VB:
      - id: TM.EServerConnectType
        name: EServerConnectType
        nameWithType: EServerConnectType
        qualifiedName: TM.EServerConnectType
    isDefinition: true
    parent: TM
    commentId: T:TM.EServerConnectType
  TMSrv.TMDataServer.ConnectType*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ConnectType*
        name: ConnectType
        nameWithType: TMDataServer.ConnectType
        qualifiedName: TMSrv.TMDataServer.ConnectType
      VB:
      - id: TMSrv.TMDataServer.ConnectType*
        name: ConnectType
        nameWithType: TMDataServer.ConnectType
        qualifiedName: TMSrv.TMDataServer.ConnectType
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ConnectType
  TMSrv.TMDataServer.ConnectAvailable*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ConnectAvailable*
        name: ConnectAvailable
        nameWithType: TMDataServer.ConnectAvailable
        qualifiedName: TMSrv.TMDataServer.ConnectAvailable
      VB:
      - id: TMSrv.TMDataServer.ConnectAvailable*
        name: ConnectAvailable
        nameWithType: TMDataServer.ConnectAvailable
        qualifiedName: TMSrv.TMDataServer.ConnectAvailable
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ConnectAvailable
  TM.EServerType:
    name:
      CSharp:
      - id: TM.EServerType
        name: EServerType
        nameWithType: EServerType
        qualifiedName: TM.EServerType
      VB:
      - id: TM.EServerType
        name: EServerType
        nameWithType: EServerType
        qualifiedName: TM.EServerType
    isDefinition: true
    parent: TM
    commentId: T:TM.EServerType
  TMSrv.TMDataServer.type*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.type*
        name: type
        nameWithType: TMDataServer.type
        qualifiedName: TMSrv.TMDataServer.type
      VB:
      - id: TMSrv.TMDataServer.type*
        name: type
        nameWithType: TMDataServer.type
        qualifiedName: TMSrv.TMDataServer.type
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.type
  TMSrv.TMDataServer.name*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.name*
        name: name
        nameWithType: TMDataServer.name
        qualifiedName: TMSrv.TMDataServer.name
      VB:
      - id: TMSrv.TMDataServer.name*
        name: name
        nameWithType: TMDataServer.name
        qualifiedName: TMSrv.TMDataServer.name
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.name
  TMSrv.TMDataServer.OnProcessing*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.OnProcessing*
        name: OnProcessing
        nameWithType: TMDataServer.OnProcessing
        qualifiedName: TMSrv.TMDataServer.OnProcessing
      VB:
      - id: TMSrv.TMDataServer.OnProcessing*
        name: OnProcessing
        nameWithType: TMDataServer.OnProcessing
        qualifiedName: TMSrv.TMDataServer.OnProcessing
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.OnProcessing
  TMSrv.TMDataServer.COM*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.COM*
        name: COM
        nameWithType: TMDataServer.COM
        qualifiedName: TMSrv.TMDataServer.COM
      VB:
      - id: TMSrv.TMDataServer.COM*
        name: COM
        nameWithType: TMDataServer.COM
        qualifiedName: TMSrv.TMDataServer.COM
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.COM
  TMSrv.TMDataServer.lnk*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.lnk*
        name: lnk
        nameWithType: TMDataServer.lnk
        qualifiedName: TMSrv.TMDataServer.lnk
      VB:
      - id: TMSrv.TMDataServer.lnk*
        name: lnk
        nameWithType: TMDataServer.lnk
        qualifiedName: TMSrv.TMDataServer.lnk
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.lnk
  TMSrv.TMDataServer.ControlID*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ControlID*
        name: ControlID
        nameWithType: TMDataServer.ControlID
        qualifiedName: TMSrv.TMDataServer.ControlID
      VB:
      - id: TMSrv.TMDataServer.ControlID*
        name: ControlID
        nameWithType: TMDataServer.ControlID
        qualifiedName: TMSrv.TMDataServer.ControlID
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ControlID
  TMSrv.TMDataServer.ControlRight*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ControlRight*
        name: ControlRight
        nameWithType: TMDataServer.ControlRight
        qualifiedName: TMSrv.TMDataServer.ControlRight
      VB:
      - id: TMSrv.TMDataServer.ControlRight*
        name: ControlRight
        nameWithType: TMDataServer.ControlRight
        qualifiedName: TMSrv.TMDataServer.ControlRight
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ControlRight
  System.Collections.Generic.List{TMSrv.VCControl}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TMSrv.VCControl
        name: VCControl
        nameWithType: VCControl
        qualifiedName: TMSrv.VCControl
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TMSrv.VCControl
        name: VCControl
        nameWithType: VCControl
        qualifiedName: TMSrv.VCControl
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{TMSrv.VCControl}
  TMSrv.TMDataServer.ControlsCount*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ControlsCount*
        name: ControlsCount
        nameWithType: TMDataServer.ControlsCount
        qualifiedName: TMSrv.TMDataServer.ControlsCount
      VB:
      - id: TMSrv.TMDataServer.ControlsCount*
        name: ControlsCount
        nameWithType: TMDataServer.ControlsCount
        qualifiedName: TMSrv.TMDataServer.ControlsCount
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ControlsCount
  TM.EDeviceStatus:
    name:
      CSharp:
      - id: TM.EDeviceStatus
        name: EDeviceStatus
        nameWithType: EDeviceStatus
        qualifiedName: TM.EDeviceStatus
      VB:
      - id: TM.EDeviceStatus
        name: EDeviceStatus
        nameWithType: EDeviceStatus
        qualifiedName: TM.EDeviceStatus
    isDefinition: true
    parent: TM
    commentId: T:TM.EDeviceStatus
  TMSrv.TMDataServer.DevStatus*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.DevStatus*
        name: DevStatus
        nameWithType: TMDataServer.DevStatus
        qualifiedName: TMSrv.TMDataServer.DevStatus
      VB:
      - id: TMSrv.TMDataServer.DevStatus*
        name: DevStatus
        nameWithType: TMDataServer.DevStatus
        qualifiedName: TMSrv.TMDataServer.DevStatus
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.DevStatus
  TMSrv.TMDataServer.InWait*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.InWait*
        name: InWait
        nameWithType: TMDataServer.InWait
        qualifiedName: TMSrv.TMDataServer.InWait
      VB:
      - id: TMSrv.TMDataServer.InWait*
        name: InWait
        nameWithType: TMDataServer.InWait
        qualifiedName: TMSrv.TMDataServer.InWait
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.InWait
  TMSrv.TMDataServer.LogPath*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.LogPath*
        name: LogPath
        nameWithType: TMDataServer.LogPath
        qualifiedName: TMSrv.TMDataServer.LogPath
      VB:
      - id: TMSrv.TMDataServer.LogPath*
        name: LogPath
        nameWithType: TMDataServer.LogPath
        qualifiedName: TMSrv.TMDataServer.LogPath
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.LogPath
  TMSrv.TMDataServer.NeedAutoReconnect*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.NeedAutoReconnect*
        name: NeedAutoReconnect
        nameWithType: TMDataServer.NeedAutoReconnect
        qualifiedName: TMSrv.TMDataServer.NeedAutoReconnect
      VB:
      - id: TMSrv.TMDataServer.NeedAutoReconnect*
        name: NeedAutoReconnect
        nameWithType: TMDataServer.NeedAutoReconnect
        qualifiedName: TMSrv.TMDataServer.NeedAutoReconnect
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.NeedAutoReconnect
  TMSrv.TMDataServer.NeedForReconnect*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.NeedForReconnect*
        name: NeedForReconnect
        nameWithType: TMDataServer.NeedForReconnect
        qualifiedName: TMSrv.TMDataServer.NeedForReconnect
      VB:
      - id: TMSrv.TMDataServer.NeedForReconnect*
        name: NeedForReconnect
        nameWithType: TMDataServer.NeedForReconnect
        qualifiedName: TMSrv.TMDataServer.NeedForReconnect
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.NeedForReconnect
  TMSrv.TMDataServer.buf*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.buf*
        name: buf
        nameWithType: TMDataServer.buf
        qualifiedName: TMSrv.TMDataServer.buf
      VB:
      - id: TMSrv.TMDataServer.buf*
        name: buf
        nameWithType: TMDataServer.buf
        qualifiedName: TMSrv.TMDataServer.buf
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.buf
  TMSrv.TMDataServer.timeout*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.timeout*
        name: timeout
        nameWithType: TMDataServer.timeout
        qualifiedName: TMSrv.TMDataServer.timeout
      VB:
      - id: TMSrv.TMDataServer.timeout*
        name: timeout
        nameWithType: TMDataServer.timeout
        qualifiedName: TMSrv.TMDataServer.timeout
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.timeout
  TMSrv.TMDataServer.TimerTicks*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.TimerTicks*
        name: TimerTicks
        nameWithType: TMDataServer.TimerTicks
        qualifiedName: TMSrv.TMDataServer.TimerTicks
      VB:
      - id: TMSrv.TMDataServer.TimerTicks*
        name: TimerTicks
        nameWithType: TMDataServer.TimerTicks
        qualifiedName: TMSrv.TMDataServer.TimerTicks
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.TimerTicks
  TMSrv.TMDataServer.TMSettings*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.TMSettings*
        name: TMSettings
        nameWithType: TMDataServer.TMSettings
        qualifiedName: TMSrv.TMDataServer.TMSettings
      VB:
      - id: TMSrv.TMDataServer.TMSettings*
        name: TMSettings
        nameWithType: TMDataServer.TMSettings
        qualifiedName: TMSrv.TMDataServer.TMSettings
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.TMSettings
  TMSrv.TMDataServer.traceToLog*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.traceToLog*
        name: traceToLog
        nameWithType: TMDataServer.traceToLog
        qualifiedName: TMSrv.TMDataServer.traceToLog
      VB:
      - id: TMSrv.TMDataServer.traceToLog*
        name: traceToLog
        nameWithType: TMDataServer.traceToLog
        qualifiedName: TMSrv.TMDataServer.traceToLog
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.traceToLog
  TMSrv.TMDataServer.update*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.update*
        name: update
        nameWithType: TMDataServer.update
        qualifiedName: TMSrv.TMDataServer.update
      VB:
      - id: TMSrv.TMDataServer.update*
        name: update
        nameWithType: TMDataServer.update
        qualifiedName: TMSrv.TMDataServer.update
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.update
  TMSrv.TMDataServer.UpdatePeriod*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.UpdatePeriod*
        name: UpdatePeriod
        nameWithType: TMDataServer.UpdatePeriod
        qualifiedName: TMSrv.TMDataServer.UpdatePeriod
      VB:
      - id: TMSrv.TMDataServer.UpdatePeriod*
        name: UpdatePeriod
        nameWithType: TMDataServer.UpdatePeriod
        qualifiedName: TMSrv.TMDataServer.UpdatePeriod
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.UpdatePeriod
  TMSrv.TMDataServer.UpdateTimerID*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.UpdateTimerID*
        name: UpdateTimerID
        nameWithType: TMDataServer.UpdateTimerID
        qualifiedName: TMSrv.TMDataServer.UpdateTimerID
      VB:
      - id: TMSrv.TMDataServer.UpdateTimerID*
        name: UpdateTimerID
        nameWithType: TMDataServer.UpdateTimerID
        qualifiedName: TMSrv.TMDataServer.UpdateTimerID
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.UpdateTimerID
  TMSrv.TMDataServer.configChanged*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.configChanged*
        name: configChanged
        nameWithType: TMDataServer.configChanged
        qualifiedName: TMSrv.TMDataServer.configChanged
      VB:
      - id: TMSrv.TMDataServer.configChanged*
        name: configChanged
        nameWithType: TMDataServer.configChanged
        qualifiedName: TMSrv.TMDataServer.configChanged
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.configChanged
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.Int32,System.String[]}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.String[]}
  TMSrv.ConnectHandler:
    name:
      CSharp:
      - id: TMSrv.ConnectHandler
        name: ConnectHandler
        nameWithType: ConnectHandler
        qualifiedName: TMSrv.ConnectHandler
      VB:
      - id: TMSrv.ConnectHandler
        name: ConnectHandler
        nameWithType: ConnectHandler
        qualifiedName: TMSrv.ConnectHandler
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.ConnectHandler
  TMSrv.ServerHandler:
    name:
      CSharp:
      - id: TMSrv.ServerHandler
        name: ServerHandler
        nameWithType: ServerHandler
        qualifiedName: TMSrv.ServerHandler
      VB:
      - id: TMSrv.ServerHandler
        name: ServerHandler
        nameWithType: ServerHandler
        qualifiedName: TMSrv.ServerHandler
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.ServerHandler
  TMSrv.IncomingPacketHandler:
    name:
      CSharp:
      - id: TMSrv.IncomingPacketHandler
        name: IncomingPacketHandler
        nameWithType: IncomingPacketHandler
        qualifiedName: TMSrv.IncomingPacketHandler
      VB:
      - id: TMSrv.IncomingPacketHandler
        name: IncomingPacketHandler
        nameWithType: IncomingPacketHandler
        qualifiedName: TMSrv.IncomingPacketHandler
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.IncomingPacketHandler
  TMSrv.PostParseHandler:
    name:
      CSharp:
      - id: TMSrv.PostParseHandler
        name: PostParseHandler
        nameWithType: PostParseHandler
        qualifiedName: TMSrv.PostParseHandler
      VB:
      - id: TMSrv.PostParseHandler
        name: PostParseHandler
        nameWithType: PostParseHandler
        qualifiedName: TMSrv.PostParseHandler
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.PostParseHandler
  TMSrv.MakeCommandHandler:
    name:
      CSharp:
      - id: TMSrv.MakeCommandHandler
        name: MakeCommandHandler
        nameWithType: MakeCommandHandler
        qualifiedName: TMSrv.MakeCommandHandler
      VB:
      - id: TMSrv.MakeCommandHandler
        name: MakeCommandHandler
        nameWithType: MakeCommandHandler
        qualifiedName: TMSrv.MakeCommandHandler
    isDefinition: true
    parent: TMSrv
    commentId: T:TMSrv.MakeCommandHandler
  TM.TMClient:
    name:
      CSharp:
      - id: TM.TMClient
        name: TMClient
        nameWithType: TMClient
        qualifiedName: TM.TMClient
      VB:
      - id: TM.TMClient
        name: TMClient
        nameWithType: TMClient
        qualifiedName: TM.TMClient
    isDefinition: true
    parent: TM
    commentId: T:TM.TMClient
  TMSrv.TMDataServer.Dispose*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.Dispose*
        name: Dispose
        nameWithType: TMDataServer.Dispose
        qualifiedName: TMSrv.TMDataServer.Dispose
      VB:
      - id: TMSrv.TMDataServer.Dispose*
        name: Dispose
        nameWithType: TMDataServer.Dispose
        qualifiedName: TMSrv.TMDataServer.Dispose
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.Dispose
  System.IDisposable.Dispose:
    name:
      CSharp:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IDisposable
    commentId: M:System.IDisposable.Dispose
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  TMSrv.TMDataServer.AddServer*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.AddServer*
        name: AddServer
        nameWithType: TMDataServer.AddServer
        qualifiedName: TMSrv.TMDataServer.AddServer
      VB:
      - id: TMSrv.TMDataServer.AddServer*
        name: AddServer
        nameWithType: TMDataServer.AddServer
        qualifiedName: TMSrv.TMDataServer.AddServer
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.AddServer
  TMSrv.TMDataServer.ntm.waitpacketsize*:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ntm.waitpacketsize*
        name: waitpacketsize
        nameWithType: TMDataServer.ntm.waitpacketsize
        qualifiedName: TMSrv.TMDataServer.ntm.waitpacketsize
      VB:
      - id: TMSrv.TMDataServer.ntm.waitpacketsize*
        name: waitpacketsize
        nameWithType: TMDataServer.ntm.waitpacketsize
        qualifiedName: TMSrv.TMDataServer.ntm.waitpacketsize
    isDefinition: true
    commentId: Overload:TMSrv.TMDataServer.ntm.waitpacketsize
  TMSrv.TMDataServer.ntm:
    name:
      CSharp:
      - id: TMSrv.TMDataServer.ntm
        name: TMDataServer.ntm
        nameWithType: TMDataServer.ntm
        qualifiedName: TMSrv.TMDataServer.ntm
      VB:
      - id: TMSrv.TMDataServer.ntm
        name: TMDataServer.ntm
        nameWithType: TMDataServer.ntm
        qualifiedName: TMSrv.TMDataServer.ntm
    isDefinition: true
    commentId: T:TMSrv.TMDataServer.ntm
  TM.TMPacket:
    name:
      CSharp:
      - id: TM.TMPacket
        name: TMPacket
        nameWithType: TMPacket
        qualifiedName: TM.TMPacket
      VB:
      - id: TM.TMPacket
        name: TMPacket
        nameWithType: TMPacket
        qualifiedName: TM.TMPacket
    isDefinition: true
    parent: TM
    commentId: T:TM.TMPacket
  System.Int16:
    name:
      CSharp:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      VB:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int16
  System.ICloneable:
    name:
      CSharp:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
      VB:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ICloneable
  TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader):
    name:
      CSharp:
      - id: TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.TMPacketHeader
        name: TMPacketHeader
        nameWithType: TMPacketHeader
        qualifiedName: TM.TMPacketHeader
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.TMPacketHeader
        name: TMPacketHeader
        nameWithType: TMPacketHeader
        qualifiedName: TM.TMPacketHeader
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
  TM.BufferChunk.TM.Extensions.Add(TM.TMPacketHeader):
    name:
      CSharp:
      - id: TM.Extensions.Add(TM.TMPacketHeader)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.TMPacketHeader
        name: TMPacketHeader
        nameWithType: TMPacketHeader
        qualifiedName: TM.TMPacketHeader
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.Add(TM.TMPacketHeader)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.TMPacketHeader
        name: TMPacketHeader
        nameWithType: TMPacketHeader
        qualifiedName: TM.TMPacketHeader
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
    parent: TM.Extensions
    commentId: M:TM.Extensions.Add(TM.BufferChunk,TM.TMPacketHeader)
  TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot):
    name:
      CSharp:
      - id: TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
  TM.BufferChunk.TM.Extensions.Add(TM.PlanSpot):
    name:
      CSharp:
      - id: TM.Extensions.Add(TM.PlanSpot)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.Add(TM.PlanSpot)
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
    parent: TM.Extensions
    commentId: M:TM.Extensions.Add(TM.BufferChunk,TM.PlanSpot)
  TM.Extensions.MC_PT_ILH(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.MC_PT_ILH(TM.BufferChunk)
        name: MC_PT_ILH
        nameWithType: Extensions.MC_PT_ILH
        qualifiedName: TM.Extensions.MC_PT_ILH
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.MC_PT_ILH(TM.BufferChunk)
        name: MC_PT_ILH
        nameWithType: Extensions.MC_PT_ILH
        qualifiedName: TM.Extensions.MC_PT_ILH
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.MC_PT_ILH(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.MC_PT_ILH:
    name:
      CSharp:
      - id: TM.Extensions.MC_PT_ILH
        name: MC_PT_ILH
        nameWithType: Extensions.MC_PT_ILH
        qualifiedName: TM.Extensions.MC_PT_ILH
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.MC_PT_ILH
        name: MC_PT_ILH
        nameWithType: Extensions.MC_PT_ILH
        qualifiedName: TM.Extensions.MC_PT_ILH
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.MC_PT_ILH(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.MC_PT_ILH(TM.BufferChunk)
  TM.Extensions.MCS_State(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.MCS_State(TM.BufferChunk)
        name: MCS_State
        nameWithType: Extensions.MCS_State
        qualifiedName: TM.Extensions.MCS_State
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.MCS_State(TM.BufferChunk)
        name: MCS_State
        nameWithType: Extensions.MCS_State
        qualifiedName: TM.Extensions.MCS_State
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.MCS_State(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.MCS_State:
    name:
      CSharp:
      - id: TM.Extensions.MCS_State
        name: MCS_State
        nameWithType: Extensions.MCS_State
        qualifiedName: TM.Extensions.MCS_State
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.MCS_State
        name: MCS_State
        nameWithType: Extensions.MCS_State
        qualifiedName: TM.Extensions.MCS_State
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.MCS_State(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.MCS_State(TM.BufferChunk)
  TM.Extensions.NextFullSpot(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextFullSpot(TM.BufferChunk)
        name: NextFullSpot
        nameWithType: Extensions.NextFullSpot
        qualifiedName: TM.Extensions.NextFullSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextFullSpot(TM.BufferChunk)
        name: NextFullSpot
        nameWithType: Extensions.NextFullSpot
        qualifiedName: TM.Extensions.NextFullSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextFullSpot(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextFullSpot:
    name:
      CSharp:
      - id: TM.Extensions.NextFullSpot
        name: NextFullSpot
        nameWithType: Extensions.NextFullSpot
        qualifiedName: TM.Extensions.NextFullSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextFullSpot
        name: NextFullSpot
        nameWithType: Extensions.NextFullSpot
        qualifiedName: TM.Extensions.NextFullSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextFullSpot(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextFullSpot(TM.BufferChunk)
  TM.Extensions.NextPacketHeader(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextPacketHeader(TM.BufferChunk)
        name: NextPacketHeader
        nameWithType: Extensions.NextPacketHeader
        qualifiedName: TM.Extensions.NextPacketHeader
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextPacketHeader(TM.BufferChunk)
        name: NextPacketHeader
        nameWithType: Extensions.NextPacketHeader
        qualifiedName: TM.Extensions.NextPacketHeader
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextPacketHeader(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextPacketHeader:
    name:
      CSharp:
      - id: TM.Extensions.NextPacketHeader
        name: NextPacketHeader
        nameWithType: Extensions.NextPacketHeader
        qualifiedName: TM.Extensions.NextPacketHeader
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextPacketHeader
        name: NextPacketHeader
        nameWithType: Extensions.NextPacketHeader
        qualifiedName: TM.Extensions.NextPacketHeader
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextPacketHeader(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextPacketHeader(TM.BufferChunk)
  TM.Extensions.NextPlanSpotResult(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
        name: NextPlanSpotResult
        nameWithType: Extensions.NextPlanSpotResult
        qualifiedName: TM.Extensions.NextPlanSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
        name: NextPlanSpotResult
        nameWithType: Extensions.NextPlanSpotResult
        qualifiedName: TM.Extensions.NextPlanSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextPlanSpotResult:
    name:
      CSharp:
      - id: TM.Extensions.NextPlanSpotResult
        name: NextPlanSpotResult
        nameWithType: Extensions.NextPlanSpotResult
        qualifiedName: TM.Extensions.NextPlanSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextPlanSpotResult
        name: NextPlanSpotResult
        nameWithType: Extensions.NextPlanSpotResult
        qualifiedName: TM.Extensions.NextPlanSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextPlanSpotResult(TM.BufferChunk)
  TM.Extensions.NextResultSpot(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextResultSpot(TM.BufferChunk)
        name: NextResultSpot
        nameWithType: Extensions.NextResultSpot
        qualifiedName: TM.Extensions.NextResultSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextResultSpot(TM.BufferChunk)
        name: NextResultSpot
        nameWithType: Extensions.NextResultSpot
        qualifiedName: TM.Extensions.NextResultSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextResultSpot(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextResultSpot:
    name:
      CSharp:
      - id: TM.Extensions.NextResultSpot
        name: NextResultSpot
        nameWithType: Extensions.NextResultSpot
        qualifiedName: TM.Extensions.NextResultSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextResultSpot
        name: NextResultSpot
        nameWithType: Extensions.NextResultSpot
        qualifiedName: TM.Extensions.NextResultSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextResultSpot(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextResultSpot(TM.BufferChunk)
  TM.Extensions.NextSpot(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextSpot(TM.BufferChunk)
        name: NextSpot
        nameWithType: Extensions.NextSpot
        qualifiedName: TM.Extensions.NextSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextSpot(TM.BufferChunk)
        name: NextSpot
        nameWithType: Extensions.NextSpot
        qualifiedName: TM.Extensions.NextSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextSpot(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextSpot:
    name:
      CSharp:
      - id: TM.Extensions.NextSpot
        name: NextSpot
        nameWithType: Extensions.NextSpot
        qualifiedName: TM.Extensions.NextSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextSpot
        name: NextSpot
        nameWithType: Extensions.NextSpot
        qualifiedName: TM.Extensions.NextSpot
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextSpot(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextSpot(TM.BufferChunk)
  TM.Extensions.NextSpotFull(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextSpotFull(TM.BufferChunk)
        name: NextSpotFull
        nameWithType: Extensions.NextSpotFull
        qualifiedName: TM.Extensions.NextSpotFull
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextSpotFull(TM.BufferChunk)
        name: NextSpotFull
        nameWithType: Extensions.NextSpotFull
        qualifiedName: TM.Extensions.NextSpotFull
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextSpotFull(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextSpotFull:
    name:
      CSharp:
      - id: TM.Extensions.NextSpotFull
        name: NextSpotFull
        nameWithType: Extensions.NextSpotFull
        qualifiedName: TM.Extensions.NextSpotFull
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextSpotFull
        name: NextSpotFull
        nameWithType: Extensions.NextSpotFull
        qualifiedName: TM.Extensions.NextSpotFull
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextSpotFull(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextSpotFull(TM.BufferChunk)
  TM.Extensions.NextSpotResult(TM.BufferChunk):
    name:
      CSharp:
      - id: TM.Extensions.NextSpotResult(TM.BufferChunk)
        name: NextSpotResult
        nameWithType: Extensions.NextSpotResult
        qualifiedName: TM.Extensions.NextSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextSpotResult(TM.BufferChunk)
        name: NextSpotResult
        nameWithType: Extensions.NextSpotResult
        qualifiedName: TM.Extensions.NextSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.Extensions.NextSpotResult(TM.BufferChunk)
  TM.BufferChunk.TM.Extensions.NextSpotResult:
    name:
      CSharp:
      - id: TM.Extensions.NextSpotResult
        name: NextSpotResult
        nameWithType: Extensions.NextSpotResult
        qualifiedName: TM.Extensions.NextSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.Extensions.NextSpotResult
        name: NextSpotResult
        nameWithType: Extensions.NextSpotResult
        qualifiedName: TM.Extensions.NextSpotResult
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.Extensions.NextSpotResult(TM.BufferChunk)
    parent: TM.Extensions
    commentId: M:TM.Extensions.NextSpotResult(TM.BufferChunk)
  TM.BufferChunk:
    name:
      CSharp:
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
      VB:
      - id: TM.BufferChunk
        name: BufferChunk
        nameWithType: BufferChunk
        qualifiedName: TM.BufferChunk
    isDefinition: true
    parent: TM
    commentId: T:TM.BufferChunk
  TM.BufferChunk.#ctor*:
    name:
      CSharp:
      - id: TM.BufferChunk.#ctor*
        name: BufferChunk
        nameWithType: BufferChunk.BufferChunk
        qualifiedName: TM.BufferChunk.BufferChunk
      VB:
      - id: TM.BufferChunk.#ctor*
        name: BufferChunk
        nameWithType: BufferChunk.BufferChunk
        qualifiedName: TM.BufferChunk.BufferChunk
    isDefinition: true
    commentId: Overload:TM.BufferChunk.#ctor
  TM.BufferChunk.Buffer*:
    name:
      CSharp:
      - id: TM.BufferChunk.Buffer*
        name: Buffer
        nameWithType: BufferChunk.Buffer
        qualifiedName: TM.BufferChunk.Buffer
      VB:
      - id: TM.BufferChunk.Buffer*
        name: Buffer
        nameWithType: BufferChunk.Buffer
        qualifiedName: TM.BufferChunk.Buffer
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Buffer
  TM.BufferChunk.Index*:
    name:
      CSharp:
      - id: TM.BufferChunk.Index*
        name: Index
        nameWithType: BufferChunk.Index
        qualifiedName: TM.BufferChunk.Index
      VB:
      - id: TM.BufferChunk.Index*
        name: Index
        nameWithType: BufferChunk.Index
        qualifiedName: TM.BufferChunk.Index
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Index
  TM.BufferChunk.Peek(System.Int32,System.Int32):
    commentId: M:TM.BufferChunk.Peek(System.Int32,System.Int32)
  TM.BufferChunk.Length*:
    name:
      CSharp:
      - id: TM.BufferChunk.Length*
        name: Length
        nameWithType: BufferChunk.Length
        qualifiedName: TM.BufferChunk.Length
      VB:
      - id: TM.BufferChunk.Length*
        name: Length
        nameWithType: BufferChunk.Length
        qualifiedName: TM.BufferChunk.Length
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Length
  TM.BufferChunk.Item*:
    name:
      CSharp:
      - id: TM.BufferChunk.Item*
        name: Item
        nameWithType: BufferChunk.Item
        qualifiedName: TM.BufferChunk.Item
      VB:
      - id: TM.BufferChunk.Item*
        name: Item
        nameWithType: BufferChunk.Item
        qualifiedName: TM.BufferChunk.Item
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Item
  TM.BufferChunk.Clone*:
    name:
      CSharp:
      - id: TM.BufferChunk.Clone*
        name: Clone
        nameWithType: BufferChunk.Clone
        qualifiedName: TM.BufferChunk.Clone
      VB:
      - id: TM.BufferChunk.Clone*
        name: Clone
        nameWithType: BufferChunk.Clone
        qualifiedName: TM.BufferChunk.Clone
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Clone
  System.ICloneable.Clone:
    name:
      CSharp:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ICloneable
    commentId: M:System.ICloneable.Clone
  TM.BufferChunk.Dispose*:
    name:
      CSharp:
      - id: TM.BufferChunk.Dispose*
        name: Dispose
        nameWithType: BufferChunk.Dispose
        qualifiedName: TM.BufferChunk.Dispose
      VB:
      - id: TM.BufferChunk.Dispose*
        name: Dispose
        nameWithType: BufferChunk.Dispose
        qualifiedName: TM.BufferChunk.Dispose
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Dispose
  TM.BufferChunk.Compare*:
    name:
      CSharp:
      - id: TM.BufferChunk.Compare*
        name: Compare
        nameWithType: BufferChunk.Compare
        qualifiedName: TM.BufferChunk.Compare
      VB:
      - id: TM.BufferChunk.Compare*
        name: Compare
        nameWithType: BufferChunk.Compare
        qualifiedName: TM.BufferChunk.Compare
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Compare
  TM.BufferChunk.Copy*:
    name:
      CSharp:
      - id: TM.BufferChunk.Copy*
        name: Copy
        nameWithType: BufferChunk.Copy
        qualifiedName: TM.BufferChunk.Copy
      VB:
      - id: TM.BufferChunk.Copy*
        name: Copy
        nameWithType: BufferChunk.Copy
        qualifiedName: TM.BufferChunk.Copy
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Copy
  TM.BufferChunk.op_Addition*:
    name:
      CSharp:
      - id: TM.BufferChunk.op_Addition*
        name: Addition
        nameWithType: BufferChunk.Addition
        qualifiedName: TM.BufferChunk.Addition
      VB:
      - id: TM.BufferChunk.op_Addition*
        name: Addition
        nameWithType: BufferChunk.Addition
        qualifiedName: TM.BufferChunk.Addition
    isDefinition: true
    commentId: Overload:TM.BufferChunk.op_Addition
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  TM.BufferChunk.op_Explicit*:
    name:
      CSharp:
      - id: TM.BufferChunk.op_Explicit*
        name: Explicit
        nameWithType: BufferChunk.Explicit
        qualifiedName: TM.BufferChunk.Explicit
      VB:
      - id: TM.BufferChunk.op_Explicit*
        name: Narrowing
        nameWithType: BufferChunk.Narrowing
        qualifiedName: TM.BufferChunk.Narrowing
    isDefinition: true
    commentId: Overload:TM.BufferChunk.op_Explicit
  TM.BufferChunk.SetNetworking*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetNetworking*
        name: SetNetworking
        nameWithType: BufferChunk.SetNetworking
        qualifiedName: TM.BufferChunk.SetNetworking
      VB:
      - id: TM.BufferChunk.SetNetworking*
        name: SetNetworking
        nameWithType: BufferChunk.SetNetworking
        qualifiedName: TM.BufferChunk.SetNetworking
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetNetworking
  TM.BufferChunk.Clear*:
    name:
      CSharp:
      - id: TM.BufferChunk.Clear*
        name: Clear
        nameWithType: BufferChunk.Clear
        qualifiedName: TM.BufferChunk.Clear
      VB:
      - id: TM.BufferChunk.Clear*
        name: Clear
        nameWithType: BufferChunk.Clear
        qualifiedName: TM.BufferChunk.Clear
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Clear
  System.IntPtr:
    name:
      CSharp:
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      VB:
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IntPtr
  TM.BufferChunk.CopyFrom*:
    name:
      CSharp:
      - id: TM.BufferChunk.CopyFrom*
        name: CopyFrom
        nameWithType: BufferChunk.CopyFrom
        qualifiedName: TM.BufferChunk.CopyFrom
      VB:
      - id: TM.BufferChunk.CopyFrom*
        name: CopyFrom
        nameWithType: BufferChunk.CopyFrom
        qualifiedName: TM.BufferChunk.CopyFrom
    isDefinition: true
    commentId: Overload:TM.BufferChunk.CopyFrom
  TM.BufferChunk.CopyTo*:
    name:
      CSharp:
      - id: TM.BufferChunk.CopyTo*
        name: CopyTo
        nameWithType: BufferChunk.CopyTo
        qualifiedName: TM.BufferChunk.CopyTo
      VB:
      - id: TM.BufferChunk.CopyTo*
        name: CopyTo
        nameWithType: BufferChunk.CopyTo
        qualifiedName: TM.BufferChunk.CopyTo
    isDefinition: true
    commentId: Overload:TM.BufferChunk.CopyTo
  TM.BufferChunk.GetByte*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetByte*
        name: GetByte
        nameWithType: BufferChunk.GetByte
        qualifiedName: TM.BufferChunk.GetByte
      VB:
      - id: TM.BufferChunk.GetByte*
        name: GetByte
        nameWithType: BufferChunk.GetByte
        qualifiedName: TM.BufferChunk.GetByte
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetByte
  TM.BufferChunk.GetDouble*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetDouble*
        name: GetDouble
        nameWithType: BufferChunk.GetDouble
        qualifiedName: TM.BufferChunk.GetDouble
      VB:
      - id: TM.BufferChunk.GetDouble*
        name: GetDouble
        nameWithType: BufferChunk.GetDouble
        qualifiedName: TM.BufferChunk.GetDouble
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetDouble
  TM.BufferChunk.GetFloat*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetFloat*
        name: GetFloat
        nameWithType: BufferChunk.GetFloat
        qualifiedName: TM.BufferChunk.GetFloat
      VB:
      - id: TM.BufferChunk.GetFloat*
        name: GetFloat
        nameWithType: BufferChunk.GetFloat
        qualifiedName: TM.BufferChunk.GetFloat
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetFloat
  TM.BufferChunk.GetInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetInt16*
        name: GetInt16
        nameWithType: BufferChunk.GetInt16
        qualifiedName: TM.BufferChunk.GetInt16
      VB:
      - id: TM.BufferChunk.GetInt16*
        name: GetInt16
        nameWithType: BufferChunk.GetInt16
        qualifiedName: TM.BufferChunk.GetInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetInt16
  TM.BufferChunk.GetInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetInt32*
        name: GetInt32
        nameWithType: BufferChunk.GetInt32
        qualifiedName: TM.BufferChunk.GetInt32
      VB:
      - id: TM.BufferChunk.GetInt32*
        name: GetInt32
        nameWithType: BufferChunk.GetInt32
        qualifiedName: TM.BufferChunk.GetInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetInt32
  TM.BufferChunk.GetInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetInt64*
        name: GetInt64
        nameWithType: BufferChunk.GetInt64
        qualifiedName: TM.BufferChunk.GetInt64
      VB:
      - id: TM.BufferChunk.GetInt64*
        name: GetInt64
        nameWithType: BufferChunk.GetInt64
        qualifiedName: TM.BufferChunk.GetInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetInt64
  TM.BufferChunk.GetPaddedUInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetPaddedUInt16*
        name: GetPaddedUInt16
        nameWithType: BufferChunk.GetPaddedUInt16
        qualifiedName: TM.BufferChunk.GetPaddedUInt16
      VB:
      - id: TM.BufferChunk.GetPaddedUInt16*
        name: GetPaddedUInt16
        nameWithType: BufferChunk.GetPaddedUInt16
        qualifiedName: TM.BufferChunk.GetPaddedUInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetPaddedUInt16
  TM.BufferChunk.GetPaddedUInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetPaddedUInt32*
        name: GetPaddedUInt32
        nameWithType: BufferChunk.GetPaddedUInt32
        qualifiedName: TM.BufferChunk.GetPaddedUInt32
      VB:
      - id: TM.BufferChunk.GetPaddedUInt32*
        name: GetPaddedUInt32
        nameWithType: BufferChunk.GetPaddedUInt32
        qualifiedName: TM.BufferChunk.GetPaddedUInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetPaddedUInt32
  TM.BufferChunk.GetPaddedUInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetPaddedUInt64*
        name: GetPaddedUInt64
        nameWithType: BufferChunk.GetPaddedUInt64
        qualifiedName: TM.BufferChunk.GetPaddedUInt64
      VB:
      - id: TM.BufferChunk.GetPaddedUInt64*
        name: GetPaddedUInt64
        nameWithType: BufferChunk.GetPaddedUInt64
        qualifiedName: TM.BufferChunk.GetPaddedUInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetPaddedUInt64
  TM.BufferChunk.GetUInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetUInt16*
        name: GetUInt16
        nameWithType: BufferChunk.GetUInt16
        qualifiedName: TM.BufferChunk.GetUInt16
      VB:
      - id: TM.BufferChunk.GetUInt16*
        name: GetUInt16
        nameWithType: BufferChunk.GetUInt16
        qualifiedName: TM.BufferChunk.GetUInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetUInt16
  TM.BufferChunk.GetUInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetUInt32*
        name: GetUInt32
        nameWithType: BufferChunk.GetUInt32
        qualifiedName: TM.BufferChunk.GetUInt32
      VB:
      - id: TM.BufferChunk.GetUInt32*
        name: GetUInt32
        nameWithType: BufferChunk.GetUInt32
        qualifiedName: TM.BufferChunk.GetUInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetUInt32
  TM.BufferChunk.GetUInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetUInt64*
        name: GetUInt64
        nameWithType: BufferChunk.GetUInt64
        qualifiedName: TM.BufferChunk.GetUInt64
      VB:
      - id: TM.BufferChunk.GetUInt64*
        name: GetUInt64
        nameWithType: BufferChunk.GetUInt64
        qualifiedName: TM.BufferChunk.GetUInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetUInt64
  TM.BufferChunk.GetUTF8String*:
    name:
      CSharp:
      - id: TM.BufferChunk.GetUTF8String*
        name: GetUTF8String
        nameWithType: BufferChunk.GetUTF8String
        qualifiedName: TM.BufferChunk.GetUTF8String
      VB:
      - id: TM.BufferChunk.GetUTF8String*
        name: GetUTF8String
        nameWithType: BufferChunk.GetUTF8String
        qualifiedName: TM.BufferChunk.GetUTF8String
    isDefinition: true
    commentId: Overload:TM.BufferChunk.GetUTF8String
  TM.BufferChunk.NextBufferChunk*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextBufferChunk*
        name: NextBufferChunk
        nameWithType: BufferChunk.NextBufferChunk
        qualifiedName: TM.BufferChunk.NextBufferChunk
      VB:
      - id: TM.BufferChunk.NextBufferChunk*
        name: NextBufferChunk
        nameWithType: BufferChunk.NextBufferChunk
        qualifiedName: TM.BufferChunk.NextBufferChunk
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextBufferChunk
  TM.BufferChunk.NextBufferChunkMax*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextBufferChunkMax*
        name: NextBufferChunkMax
        nameWithType: BufferChunk.NextBufferChunkMax
        qualifiedName: TM.BufferChunk.NextBufferChunkMax
      VB:
      - id: TM.BufferChunk.NextBufferChunkMax*
        name: NextBufferChunkMax
        nameWithType: BufferChunk.NextBufferChunkMax
        qualifiedName: TM.BufferChunk.NextBufferChunkMax
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextBufferChunkMax
  TM.BufferChunk.NextByte*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextByte*
        name: NextByte
        nameWithType: BufferChunk.NextByte
        qualifiedName: TM.BufferChunk.NextByte
      VB:
      - id: TM.BufferChunk.NextByte*
        name: NextByte
        nameWithType: BufferChunk.NextByte
        qualifiedName: TM.BufferChunk.NextByte
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextByte
  TM.BufferChunk.NextDouble*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextDouble*
        name: NextDouble
        nameWithType: BufferChunk.NextDouble
        qualifiedName: TM.BufferChunk.NextDouble
      VB:
      - id: TM.BufferChunk.NextDouble*
        name: NextDouble
        nameWithType: BufferChunk.NextDouble
        qualifiedName: TM.BufferChunk.NextDouble
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextDouble
  TM.BufferChunk.NextFloat*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextFloat*
        name: NextFloat
        nameWithType: BufferChunk.NextFloat
        qualifiedName: TM.BufferChunk.NextFloat
      VB:
      - id: TM.BufferChunk.NextFloat*
        name: NextFloat
        nameWithType: BufferChunk.NextFloat
        qualifiedName: TM.BufferChunk.NextFloat
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextFloat
  TM.BufferChunk.NextInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextInt16*
        name: NextInt16
        nameWithType: BufferChunk.NextInt16
        qualifiedName: TM.BufferChunk.NextInt16
      VB:
      - id: TM.BufferChunk.NextInt16*
        name: NextInt16
        nameWithType: BufferChunk.NextInt16
        qualifiedName: TM.BufferChunk.NextInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextInt16
  TM.BufferChunk.NextInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextInt32*
        name: NextInt32
        nameWithType: BufferChunk.NextInt32
        qualifiedName: TM.BufferChunk.NextInt32
      VB:
      - id: TM.BufferChunk.NextInt32*
        name: NextInt32
        nameWithType: BufferChunk.NextInt32
        qualifiedName: TM.BufferChunk.NextInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextInt32
  TM.BufferChunk.NextInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextInt64*
        name: NextInt64
        nameWithType: BufferChunk.NextInt64
        qualifiedName: TM.BufferChunk.NextInt64
      VB:
      - id: TM.BufferChunk.NextInt64*
        name: NextInt64
        nameWithType: BufferChunk.NextInt64
        qualifiedName: TM.BufferChunk.NextInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextInt64
  TM.BufferChunk.NextUInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextUInt16*
        name: NextUInt16
        nameWithType: BufferChunk.NextUInt16
        qualifiedName: TM.BufferChunk.NextUInt16
      VB:
      - id: TM.BufferChunk.NextUInt16*
        name: NextUInt16
        nameWithType: BufferChunk.NextUInt16
        qualifiedName: TM.BufferChunk.NextUInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextUInt16
  TM.BufferChunk.NextUInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextUInt32*
        name: NextUInt32
        nameWithType: BufferChunk.NextUInt32
        qualifiedName: TM.BufferChunk.NextUInt32
      VB:
      - id: TM.BufferChunk.NextUInt32*
        name: NextUInt32
        nameWithType: BufferChunk.NextUInt32
        qualifiedName: TM.BufferChunk.NextUInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextUInt32
  TM.BufferChunk.NextUInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextUInt64*
        name: NextUInt64
        nameWithType: BufferChunk.NextUInt64
        qualifiedName: TM.BufferChunk.NextUInt64
      VB:
      - id: TM.BufferChunk.NextUInt64*
        name: NextUInt64
        nameWithType: BufferChunk.NextUInt64
        qualifiedName: TM.BufferChunk.NextUInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextUInt64
  TM.BufferChunk.NextUtf8String*:
    name:
      CSharp:
      - id: TM.BufferChunk.NextUtf8String*
        name: NextUtf8String
        nameWithType: BufferChunk.NextUtf8String
        qualifiedName: TM.BufferChunk.NextUtf8String
      VB:
      - id: TM.BufferChunk.NextUtf8String*
        name: NextUtf8String
        nameWithType: BufferChunk.NextUtf8String
        qualifiedName: TM.BufferChunk.NextUtf8String
    isDefinition: true
    commentId: Overload:TM.BufferChunk.NextUtf8String
  TM.BufferChunk.Peek*:
    name:
      CSharp:
      - id: TM.BufferChunk.Peek*
        name: Peek
        nameWithType: BufferChunk.Peek
        qualifiedName: TM.BufferChunk.Peek
      VB:
      - id: TM.BufferChunk.Peek*
        name: Peek
        nameWithType: BufferChunk.Peek
        qualifiedName: TM.BufferChunk.Peek
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Peek
  TM.BufferChunk.Reset*:
    name:
      CSharp:
      - id: TM.BufferChunk.Reset*
        name: Reset
        nameWithType: BufferChunk.Reset
        qualifiedName: TM.BufferChunk.Reset
      VB:
      - id: TM.BufferChunk.Reset*
        name: Reset
        nameWithType: BufferChunk.Reset
        qualifiedName: TM.BufferChunk.Reset
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Reset
  TM.BufferChunk.SetByte*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetByte*
        name: SetByte
        nameWithType: BufferChunk.SetByte
        qualifiedName: TM.BufferChunk.SetByte
      VB:
      - id: TM.BufferChunk.SetByte*
        name: SetByte
        nameWithType: BufferChunk.SetByte
        qualifiedName: TM.BufferChunk.SetByte
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetByte
  TM.BufferChunk.SetInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetInt16*
        name: SetInt16
        nameWithType: BufferChunk.SetInt16
        qualifiedName: TM.BufferChunk.SetInt16
      VB:
      - id: TM.BufferChunk.SetInt16*
        name: SetInt16
        nameWithType: BufferChunk.SetInt16
        qualifiedName: TM.BufferChunk.SetInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetInt16
  TM.BufferChunk.SetInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetInt32*
        name: SetInt32
        nameWithType: BufferChunk.SetInt32
        qualifiedName: TM.BufferChunk.SetInt32
      VB:
      - id: TM.BufferChunk.SetInt32*
        name: SetInt32
        nameWithType: BufferChunk.SetInt32
        qualifiedName: TM.BufferChunk.SetInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetInt32
  TM.BufferChunk.SetInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetInt64*
        name: SetInt64
        nameWithType: BufferChunk.SetInt64
        qualifiedName: TM.BufferChunk.SetInt64
      VB:
      - id: TM.BufferChunk.SetInt64*
        name: SetInt64
        nameWithType: BufferChunk.SetInt64
        qualifiedName: TM.BufferChunk.SetInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetInt64
  TM.BufferChunk.SetPaddedUInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetPaddedUInt16*
        name: SetPaddedUInt16
        nameWithType: BufferChunk.SetPaddedUInt16
        qualifiedName: TM.BufferChunk.SetPaddedUInt16
      VB:
      - id: TM.BufferChunk.SetPaddedUInt16*
        name: SetPaddedUInt16
        nameWithType: BufferChunk.SetPaddedUInt16
        qualifiedName: TM.BufferChunk.SetPaddedUInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetPaddedUInt16
  TM.BufferChunk.SetPaddedUInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetPaddedUInt32*
        name: SetPaddedUInt32
        nameWithType: BufferChunk.SetPaddedUInt32
        qualifiedName: TM.BufferChunk.SetPaddedUInt32
      VB:
      - id: TM.BufferChunk.SetPaddedUInt32*
        name: SetPaddedUInt32
        nameWithType: BufferChunk.SetPaddedUInt32
        qualifiedName: TM.BufferChunk.SetPaddedUInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetPaddedUInt32
  TM.BufferChunk.SetPaddedUInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetPaddedUInt64*
        name: SetPaddedUInt64
        nameWithType: BufferChunk.SetPaddedUInt64
        qualifiedName: TM.BufferChunk.SetPaddedUInt64
      VB:
      - id: TM.BufferChunk.SetPaddedUInt64*
        name: SetPaddedUInt64
        nameWithType: BufferChunk.SetPaddedUInt64
        qualifiedName: TM.BufferChunk.SetPaddedUInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetPaddedUInt64
  TM.BufferChunk.SetUInt16*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetUInt16*
        name: SetUInt16
        nameWithType: BufferChunk.SetUInt16
        qualifiedName: TM.BufferChunk.SetUInt16
      VB:
      - id: TM.BufferChunk.SetUInt16*
        name: SetUInt16
        nameWithType: BufferChunk.SetUInt16
        qualifiedName: TM.BufferChunk.SetUInt16
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetUInt16
  TM.BufferChunk.SetUInt32*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetUInt32*
        name: SetUInt32
        nameWithType: BufferChunk.SetUInt32
        qualifiedName: TM.BufferChunk.SetUInt32
      VB:
      - id: TM.BufferChunk.SetUInt32*
        name: SetUInt32
        nameWithType: BufferChunk.SetUInt32
        qualifiedName: TM.BufferChunk.SetUInt32
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetUInt32
  TM.BufferChunk.SetUInt64*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetUInt64*
        name: SetUInt64
        nameWithType: BufferChunk.SetUInt64
        qualifiedName: TM.BufferChunk.SetUInt64
      VB:
      - id: TM.BufferChunk.SetUInt64*
        name: SetUInt64
        nameWithType: BufferChunk.SetUInt64
        qualifiedName: TM.BufferChunk.SetUInt64
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetUInt64
  TM.BufferChunk.SetUTF8String*:
    name:
      CSharp:
      - id: TM.BufferChunk.SetUTF8String*
        name: SetUTF8String
        nameWithType: BufferChunk.SetUTF8String
        qualifiedName: TM.BufferChunk.SetUTF8String
      VB:
      - id: TM.BufferChunk.SetUTF8String*
        name: SetUTF8String
        nameWithType: BufferChunk.SetUTF8String
        qualifiedName: TM.BufferChunk.SetUTF8String
    isDefinition: true
    commentId: Overload:TM.BufferChunk.SetUTF8String
  TM.BufferChunk.Skip*:
    name:
      CSharp:
      - id: TM.BufferChunk.Skip*
        name: Skip
        nameWithType: BufferChunk.Skip
        qualifiedName: TM.BufferChunk.Skip
      VB:
      - id: TM.BufferChunk.Skip*
        name: Skip
        nameWithType: BufferChunk.Skip
        qualifiedName: TM.BufferChunk.Skip
    isDefinition: true
    commentId: Overload:TM.BufferChunk.Skip
  System.Runtime.InteropServices:
    name:
      CSharp:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
        isExternal: true
      VB:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
    isDefinition: true
    commentId: N:System.Runtime.InteropServices
  System.Runtime.InteropServices.ComVisibleAttribute:
    name:
      CSharp:
      - id: System.Runtime.InteropServices.ComVisibleAttribute
        name: ComVisibleAttribute
        nameWithType: ComVisibleAttribute
        qualifiedName: System.Runtime.InteropServices.ComVisibleAttribute
        isExternal: true
      VB:
      - id: System.Runtime.InteropServices.ComVisibleAttribute
        name: ComVisibleAttribute
        nameWithType: ComVisibleAttribute
        qualifiedName: System.Runtime.InteropServices.ComVisibleAttribute
        isExternal: true
    isDefinition: true
    parent: System.Runtime.InteropServices
    commentId: T:System.Runtime.InteropServices.ComVisibleAttribute
  System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean):
    name:
      CSharp:
      - id: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
        name: ComVisibleAttribute
        nameWithType: ComVisibleAttribute.ComVisibleAttribute
        qualifiedName: System.Runtime.InteropServices.ComVisibleAttribute.ComVisibleAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
        name: ComVisibleAttribute
        nameWithType: ComVisibleAttribute.ComVisibleAttribute
        qualifiedName: System.Runtime.InteropServices.ComVisibleAttribute.ComVisibleAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Runtime.InteropServices.ComVisibleAttribute
    commentId: M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
  System.ApplicationException:
    name:
      CSharp:
      - id: System.ApplicationException
        name: ApplicationException
        nameWithType: ApplicationException
        qualifiedName: System.ApplicationException
        isExternal: true
      VB:
      - id: System.ApplicationException
        name: ApplicationException
        nameWithType: ApplicationException
        qualifiedName: System.ApplicationException
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ApplicationException
  System.Exception:
    name:
      CSharp:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      VB:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Exception
  System.Exception.GetBaseException:
    name:
      CSharp:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetBaseException
  System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):
    name:
      CSharp:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  System.Exception.GetType:
    name:
      CSharp:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetType
  System.Exception.ToString:
    name:
      CSharp:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.ToString
  System.Exception.Data:
    name:
      CSharp:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
      VB:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Data
  System.Exception.HelpLink:
    name:
      CSharp:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
      VB:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HelpLink
  System.Exception.HResult:
    name:
      CSharp:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
      VB:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HResult
  System.Exception.InnerException:
    name:
      CSharp:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
      VB:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.InnerException
  System.Exception.Message:
    name:
      CSharp:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
      VB:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Message
  System.Exception.Source:
    name:
      CSharp:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
      VB:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Source
  System.Exception.StackTrace:
    name:
      CSharp:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
      VB:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.StackTrace
  System.Exception.TargetSite:
    name:
      CSharp:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
      VB:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.TargetSite
  System.Exception.SerializeObjectState:
    name:
      CSharp:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
      VB:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: E:System.Exception.SerializeObjectState
  System.Runtime.Serialization:
    name:
      CSharp:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
        isExternal: true
      VB:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
    isDefinition: true
    commentId: N:System.Runtime.Serialization
  System.Runtime.Serialization.ISerializable:
    name:
      CSharp:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.ISerializable
  TM.InsufficientDataException:
    name:
      CSharp:
      - id: TM.InsufficientDataException
        name: InsufficientDataException
        nameWithType: InsufficientDataException
        qualifiedName: TM.InsufficientDataException
      VB:
      - id: TM.InsufficientDataException
        name: InsufficientDataException
        nameWithType: InsufficientDataException
        qualifiedName: TM.InsufficientDataException
    isDefinition: true
    commentId: T:TM.InsufficientDataException
  TM.InsufficientDataException.#ctor*:
    name:
      CSharp:
      - id: TM.InsufficientDataException.#ctor*
        name: InsufficientDataException
        nameWithType: InsufficientDataException.InsufficientDataException
        qualifiedName: TM.InsufficientDataException.InsufficientDataException
      VB:
      - id: TM.InsufficientDataException.#ctor*
        name: InsufficientDataException
        nameWithType: InsufficientDataException.InsufficientDataException
        qualifiedName: TM.InsufficientDataException.InsufficientDataException
    isDefinition: true
    commentId: Overload:TM.InsufficientDataException.#ctor
  TM.InsufficientSpaceException:
    name:
      CSharp:
      - id: TM.InsufficientSpaceException
        name: InsufficientSpaceException
        nameWithType: InsufficientSpaceException
        qualifiedName: TM.InsufficientSpaceException
      VB:
      - id: TM.InsufficientSpaceException
        name: InsufficientSpaceException
        nameWithType: InsufficientSpaceException
        qualifiedName: TM.InsufficientSpaceException
    isDefinition: true
    commentId: T:TM.InsufficientSpaceException
  TM.InsufficientSpaceException.#ctor*:
    name:
      CSharp:
      - id: TM.InsufficientSpaceException.#ctor*
        name: InsufficientSpaceException
        nameWithType: InsufficientSpaceException.InsufficientSpaceException
        qualifiedName: TM.InsufficientSpaceException.InsufficientSpaceException
      VB:
      - id: TM.InsufficientSpaceException.#ctor*
        name: InsufficientSpaceException
        nameWithType: InsufficientSpaceException.InsufficientSpaceException
        qualifiedName: TM.InsufficientSpaceException.InsufficientSpaceException
    isDefinition: true
    commentId: Overload:TM.InsufficientSpaceException.#ctor
  TM.NoDataException:
    name:
      CSharp:
      - id: TM.NoDataException
        name: NoDataException
        nameWithType: NoDataException
        qualifiedName: TM.NoDataException
      VB:
      - id: TM.NoDataException
        name: NoDataException
        nameWithType: NoDataException
        qualifiedName: TM.NoDataException
    isDefinition: true
    commentId: T:TM.NoDataException
  TM.NoDataException.#ctor*:
    name:
      CSharp:
      - id: TM.NoDataException.#ctor*
        name: NoDataException
        nameWithType: NoDataException.NoDataException
        qualifiedName: TM.NoDataException.NoDataException
      VB:
      - id: TM.NoDataException.#ctor*
        name: NoDataException
        nameWithType: NoDataException.NoDataException
        qualifiedName: TM.NoDataException.NoDataException
    isDefinition: true
    commentId: Overload:TM.NoDataException.#ctor
  TM.TMPacketHeader:
    name:
      CSharp:
      - id: TM.TMPacketHeader
        name: TMPacketHeader
        nameWithType: TMPacketHeader
        qualifiedName: TM.TMPacketHeader
      VB:
      - id: TM.TMPacketHeader
        name: TMPacketHeader
        nameWithType: TMPacketHeader
        qualifiedName: TM.TMPacketHeader
    isDefinition: true
    parent: TM
    commentId: T:TM.TMPacketHeader
  TM.Extensions.Add*:
    name:
      CSharp:
      - id: TM.Extensions.Add*
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
      VB:
      - id: TM.Extensions.Add*
        name: Add
        nameWithType: Extensions.Add
        qualifiedName: TM.Extensions.Add
    isDefinition: true
    commentId: Overload:TM.Extensions.Add
  TM.PlanSpot:
    name:
      CSharp:
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      VB:
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
    isDefinition: true
    parent: TM
    commentId: T:TM.PlanSpot
  TM.Extensions.ByteArrayToStructure*:
    name:
      CSharp:
      - id: TM.Extensions.ByteArrayToStructure*
        name: ByteArrayToStructure
        nameWithType: Extensions.ByteArrayToStructure
        qualifiedName: TM.Extensions.ByteArrayToStructure
      VB:
      - id: TM.Extensions.ByteArrayToStructure*
        name: ByteArrayToStructure
        nameWithType: Extensions.ByteArrayToStructure
        qualifiedName: TM.Extensions.ByteArrayToStructure
    isDefinition: true
    commentId: Overload:TM.Extensions.ByteArrayToStructure
  TM.Extensions.Copy*:
    name:
      CSharp:
      - id: TM.Extensions.Copy*
        name: Copy
        nameWithType: Extensions.Copy
        qualifiedName: TM.Extensions.Copy
      VB:
      - id: TM.Extensions.Copy*
        name: Copy
        nameWithType: Extensions.Copy
        qualifiedName: TM.Extensions.Copy
    isDefinition: true
    commentId: Overload:TM.Extensions.Copy
  System.IO:
    name:
      CSharp:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
        isExternal: true
      VB:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
    isDefinition: true
    commentId: N:System.IO
  System.IO.Stream:
    name:
      CSharp:
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      VB:
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.Stream
  System.Action`3:
    name:
      CSharp:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T3
        nameWithType: T3
        qualifiedName: T3
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T3
        nameWithType: T3
        qualifiedName: T3
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Action`3
  System.Action{System.IO.Stream,System.IO.Stream,System.Exception}:
    name:
      CSharp:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`3
    parent: System
    commentId: T:System.Action{System.IO.Stream,System.IO.Stream,System.Exception}
  System.Enum:
    name:
      CSharp:
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
      VB:
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Enum
  TM.Extensions.Description*:
    name:
      CSharp:
      - id: TM.Extensions.Description*
        name: Description
        nameWithType: Extensions.Description
        qualifiedName: TM.Extensions.Description
      VB:
      - id: TM.Extensions.Description*
        name: Description
        nameWithType: Extensions.Description
        qualifiedName: TM.Extensions.Description
    isDefinition: true
    commentId: Overload:TM.Extensions.Description
  TM.Extensions.MC_PT_ILH*:
    name:
      CSharp:
      - id: TM.Extensions.MC_PT_ILH*
        name: MC_PT_ILH
        nameWithType: Extensions.MC_PT_ILH
        qualifiedName: TM.Extensions.MC_PT_ILH
      VB:
      - id: TM.Extensions.MC_PT_ILH*
        name: MC_PT_ILH
        nameWithType: Extensions.MC_PT_ILH
        qualifiedName: TM.Extensions.MC_PT_ILH
    isDefinition: true
    commentId: Overload:TM.Extensions.MC_PT_ILH
  TM.Extensions.MCS_State*:
    name:
      CSharp:
      - id: TM.Extensions.MCS_State*
        name: MCS_State
        nameWithType: Extensions.MCS_State
        qualifiedName: TM.Extensions.MCS_State
      VB:
      - id: TM.Extensions.MCS_State*
        name: MCS_State
        nameWithType: Extensions.MCS_State
        qualifiedName: TM.Extensions.MCS_State
    isDefinition: true
    commentId: Overload:TM.Extensions.MCS_State
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Nullable`1
  System.Nullable{TM.PlanSpotFull}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpotFull
        name: PlanSpotFull
        nameWithType: PlanSpotFull
        qualifiedName: TM.PlanSpotFull
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpotFull
        name: PlanSpotFull
        nameWithType: PlanSpotFull
        qualifiedName: TM.PlanSpotFull
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{TM.PlanSpotFull}
  TM.Extensions.NextFullSpot*:
    name:
      CSharp:
      - id: TM.Extensions.NextFullSpot*
        name: NextFullSpot
        nameWithType: Extensions.NextFullSpot
        qualifiedName: TM.Extensions.NextFullSpot
      VB:
      - id: TM.Extensions.NextFullSpot*
        name: NextFullSpot
        nameWithType: Extensions.NextFullSpot
        qualifiedName: TM.Extensions.NextFullSpot
    isDefinition: true
    commentId: Overload:TM.Extensions.NextFullSpot
  TM.Extensions.NextPacketHeader*:
    name:
      CSharp:
      - id: TM.Extensions.NextPacketHeader*
        name: NextPacketHeader
        nameWithType: Extensions.NextPacketHeader
        qualifiedName: TM.Extensions.NextPacketHeader
      VB:
      - id: TM.Extensions.NextPacketHeader*
        name: NextPacketHeader
        nameWithType: Extensions.NextPacketHeader
        qualifiedName: TM.Extensions.NextPacketHeader
    isDefinition: true
    commentId: Overload:TM.Extensions.NextPacketHeader
  System.Nullable{TM.PlanSpotResult}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpotResult
        name: PlanSpotResult
        nameWithType: PlanSpotResult
        qualifiedName: TM.PlanSpotResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpotResult
        name: PlanSpotResult
        nameWithType: PlanSpotResult
        qualifiedName: TM.PlanSpotResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{TM.PlanSpotResult}
  TM.Extensions.NextPlanSpotResult*:
    name:
      CSharp:
      - id: TM.Extensions.NextPlanSpotResult*
        name: NextPlanSpotResult
        nameWithType: Extensions.NextPlanSpotResult
        qualifiedName: TM.Extensions.NextPlanSpotResult
      VB:
      - id: TM.Extensions.NextPlanSpotResult*
        name: NextPlanSpotResult
        nameWithType: Extensions.NextPlanSpotResult
        qualifiedName: TM.Extensions.NextPlanSpotResult
    isDefinition: true
    commentId: Overload:TM.Extensions.NextPlanSpotResult
  TM.Extensions.NextResultSpot*:
    name:
      CSharp:
      - id: TM.Extensions.NextResultSpot*
        name: NextResultSpot
        nameWithType: Extensions.NextResultSpot
        qualifiedName: TM.Extensions.NextResultSpot
      VB:
      - id: TM.Extensions.NextResultSpot*
        name: NextResultSpot
        nameWithType: Extensions.NextResultSpot
        qualifiedName: TM.Extensions.NextResultSpot
    isDefinition: true
    commentId: Overload:TM.Extensions.NextResultSpot
  System.Nullable{TM.PlanSpot}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{TM.PlanSpot}
  TM.Extensions.NextSpot*:
    name:
      CSharp:
      - id: TM.Extensions.NextSpot*
        name: NextSpot
        nameWithType: Extensions.NextSpot
        qualifiedName: TM.Extensions.NextSpot
      VB:
      - id: TM.Extensions.NextSpot*
        name: NextSpot
        nameWithType: Extensions.NextSpot
        qualifiedName: TM.Extensions.NextSpot
    isDefinition: true
    commentId: Overload:TM.Extensions.NextSpot
  TM.Extensions.NextSpotFull*:
    name:
      CSharp:
      - id: TM.Extensions.NextSpotFull*
        name: NextSpotFull
        nameWithType: Extensions.NextSpotFull
        qualifiedName: TM.Extensions.NextSpotFull
      VB:
      - id: TM.Extensions.NextSpotFull*
        name: NextSpotFull
        nameWithType: Extensions.NextSpotFull
        qualifiedName: TM.Extensions.NextSpotFull
    isDefinition: true
    commentId: Overload:TM.Extensions.NextSpotFull
  TM.Extensions.NextSpotResult*:
    name:
      CSharp:
      - id: TM.Extensions.NextSpotResult*
        name: NextSpotResult
        nameWithType: Extensions.NextSpotResult
        qualifiedName: TM.Extensions.NextSpotResult
      VB:
      - id: TM.Extensions.NextSpotResult*
        name: NextSpotResult
        nameWithType: Extensions.NextSpotResult
        qualifiedName: TM.Extensions.NextSpotResult
    isDefinition: true
    commentId: Overload:TM.Extensions.NextSpotResult
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.String}
  TM.Extensions.SplitString*:
    name:
      CSharp:
      - id: TM.Extensions.SplitString*
        name: SplitString
        nameWithType: Extensions.SplitString
        qualifiedName: TM.Extensions.SplitString
      VB:
      - id: TM.Extensions.SplitString*
        name: SplitString
        nameWithType: Extensions.SplitString
        qualifiedName: TM.Extensions.SplitString
    isDefinition: true
    commentId: Overload:TM.Extensions.SplitString
  TM.Extensions.ToBool*:
    name:
      CSharp:
      - id: TM.Extensions.ToBool*
        name: ToBool
        nameWithType: Extensions.ToBool
        qualifiedName: TM.Extensions.ToBool
      VB:
      - id: TM.Extensions.ToBool*
        name: ToBool
        nameWithType: Extensions.ToBool
        qualifiedName: TM.Extensions.ToBool
    isDefinition: true
    commentId: Overload:TM.Extensions.ToBool
  System.Int16[]:
    name:
      CSharp:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  TM.Extensions.ToByte*:
    name:
      CSharp:
      - id: TM.Extensions.ToByte*
        name: ToByte
        nameWithType: Extensions.ToByte
        qualifiedName: TM.Extensions.ToByte
      VB:
      - id: TM.Extensions.ToByte*
        name: ToByte
        nameWithType: Extensions.ToByte
        qualifiedName: TM.Extensions.ToByte
    isDefinition: true
    commentId: Overload:TM.Extensions.ToByte
  TM.Extensions.ToDegrees*:
    name:
      CSharp:
      - id: TM.Extensions.ToDegrees*
        name: ToDegrees
        nameWithType: Extensions.ToDegrees
        qualifiedName: TM.Extensions.ToDegrees
      VB:
      - id: TM.Extensions.ToDegrees*
        name: ToDegrees
        nameWithType: Extensions.ToDegrees
        qualifiedName: TM.Extensions.ToDegrees
    isDefinition: true
    commentId: Overload:TM.Extensions.ToDegrees
  TM.Extensions.ToDouble*:
    name:
      CSharp:
      - id: TM.Extensions.ToDouble*
        name: ToDouble
        nameWithType: Extensions.ToDouble
        qualifiedName: TM.Extensions.ToDouble
      VB:
      - id: TM.Extensions.ToDouble*
        name: ToDouble
        nameWithType: Extensions.ToDouble
        qualifiedName: TM.Extensions.ToDouble
    isDefinition: true
    commentId: Overload:TM.Extensions.ToDouble
  TM.Extensions.ToFloat*:
    name:
      CSharp:
      - id: TM.Extensions.ToFloat*
        name: ToFloat
        nameWithType: Extensions.ToFloat
        qualifiedName: TM.Extensions.ToFloat
      VB:
      - id: TM.Extensions.ToFloat*
        name: ToFloat
        nameWithType: Extensions.ToFloat
        qualifiedName: TM.Extensions.ToFloat
    isDefinition: true
    commentId: Overload:TM.Extensions.ToFloat
  TM.Extensions.ToInt*:
    name:
      CSharp:
      - id: TM.Extensions.ToInt*
        name: ToInt
        nameWithType: Extensions.ToInt
        qualifiedName: TM.Extensions.ToInt
      VB:
      - id: TM.Extensions.ToInt*
        name: ToInt
        nameWithType: Extensions.ToInt
        qualifiedName: TM.Extensions.ToInt
    isDefinition: true
    commentId: Overload:TM.Extensions.ToInt
  TM.Extensions.WriteMultiLine*:
    name:
      CSharp:
      - id: TM.Extensions.WriteMultiLine*
        name: WriteMultiLine
        nameWithType: Extensions.WriteMultiLine
        qualifiedName: TM.Extensions.WriteMultiLine
      VB:
      - id: TM.Extensions.WriteMultiLine*
        name: WriteMultiLine
        nameWithType: Extensions.WriteMultiLine
        qualifiedName: TM.Extensions.WriteMultiLine
    isDefinition: true
    commentId: Overload:TM.Extensions.WriteMultiLine
  TM.Globals.Language*:
    name:
      CSharp:
      - id: TM.Globals.Language*
        name: Language
        nameWithType: Globals.Language
        qualifiedName: TM.Globals.Language
      VB:
      - id: TM.Globals.Language*
        name: Language
        nameWithType: Globals.Language
        qualifiedName: TM.Globals.Language
    isDefinition: true
    commentId: Overload:TM.Globals.Language
  TM.Globals:
    name:
      CSharp:
      - id: TM.Globals
        name: Globals
        nameWithType: Globals
        qualifiedName: TM.Globals
      VB:
      - id: TM.Globals
        name: Globals
        nameWithType: Globals
        qualifiedName: TM.Globals
    isDefinition: true
    commentId: T:TM.Globals
  TM.ClientDataHandle:
    name:
      CSharp:
      - id: TM.ClientDataHandle
        name: ClientDataHandle
        nameWithType: ClientDataHandle
        qualifiedName: TM.ClientDataHandle
      VB:
      - id: TM.ClientDataHandle
        name: ClientDataHandle
        nameWithType: ClientDataHandle
        qualifiedName: TM.ClientDataHandle
    isDefinition: true
    parent: TM
    commentId: T:TM.ClientDataHandle
  TM.ClientHandler:
    name:
      CSharp:
      - id: TM.ClientHandler
        name: ClientHandler
        nameWithType: ClientHandler
        qualifiedName: TM.ClientHandler
      VB:
      - id: TM.ClientHandler
        name: ClientHandler
        nameWithType: ClientHandler
        qualifiedName: TM.ClientHandler
    isDefinition: true
    parent: TM
    commentId: T:TM.ClientHandler
  System.Collections.Generic.List{TM.PlanSpotResult}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpotResult
        name: PlanSpotResult
        nameWithType: PlanSpotResult
        qualifiedName: TM.PlanSpotResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpotResult
        name: PlanSpotResult
        nameWithType: PlanSpotResult
        qualifiedName: TM.PlanSpotResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{TM.PlanSpotResult}
  TM.PlanResultsHandler:
    name:
      CSharp:
      - id: TM.PlanResultsHandler
        name: PlanResultsHandler
        nameWithType: PlanResultsHandler
        qualifiedName: TM.PlanResultsHandler
      VB:
      - id: TM.PlanResultsHandler
        name: PlanResultsHandler
        nameWithType: PlanResultsHandler
        qualifiedName: TM.PlanResultsHandler
    isDefinition: true
    parent: TM
    commentId: T:TM.PlanResultsHandler
  TM.ServerStateChangedHandler:
    name:
      CSharp:
      - id: TM.ServerStateChangedHandler
        name: ServerStateChangedHandler
        nameWithType: ServerStateChangedHandler
        qualifiedName: TM.ServerStateChangedHandler
      VB:
      - id: TM.ServerStateChangedHandler
        name: ServerStateChangedHandler
        nameWithType: ServerStateChangedHandler
        qualifiedName: TM.ServerStateChangedHandler
    isDefinition: true
    parent: TM
    commentId: T:TM.ServerStateChangedHandler
  TM.TMClient.#ctor*:
    name:
      CSharp:
      - id: TM.TMClient.#ctor*
        name: TMClient
        nameWithType: TMClient.TMClient
        qualifiedName: TM.TMClient.TMClient
      VB:
      - id: TM.TMClient.#ctor*
        name: TMClient
        nameWithType: TMClient.TMClient
        qualifiedName: TM.TMClient.TMClient
    isDefinition: true
    commentId: Overload:TM.TMClient.#ctor
  System.Net.Sockets:
    name:
      CSharp:
      - name: System.Net.Sockets
        nameWithType: System.Net.Sockets
        qualifiedName: System.Net.Sockets
        isExternal: true
      VB:
      - name: System.Net.Sockets
        nameWithType: System.Net.Sockets
        qualifiedName: System.Net.Sockets
    isDefinition: true
    commentId: N:System.Net.Sockets
  System.Net.Sockets.TcpClient:
    name:
      CSharp:
      - id: System.Net.Sockets.TcpClient
        name: TcpClient
        nameWithType: TcpClient
        qualifiedName: System.Net.Sockets.TcpClient
        isExternal: true
      VB:
      - id: System.Net.Sockets.TcpClient
        name: TcpClient
        nameWithType: TcpClient
        qualifiedName: System.Net.Sockets.TcpClient
        isExternal: true
    isDefinition: true
    parent: System.Net.Sockets
    commentId: T:System.Net.Sockets.TcpClient
  TM.TMClient.Debug*:
    name:
      CSharp:
      - id: TM.TMClient.Debug*
        name: Debug
        nameWithType: TMClient.Debug
        qualifiedName: TM.TMClient.Debug
      VB:
      - id: TM.TMClient.Debug*
        name: Debug
        nameWithType: TMClient.Debug
        qualifiedName: TM.TMClient.Debug
    isDefinition: true
    commentId: Overload:TM.TMClient.Debug
  TM.TMClient.DebugPreference*:
    name:
      CSharp:
      - id: TM.TMClient.DebugPreference*
        name: DebugPreference
        nameWithType: TMClient.DebugPreference
        qualifiedName: TM.TMClient.DebugPreference
      VB:
      - id: TM.TMClient.DebugPreference*
        name: DebugPreference
        nameWithType: TMClient.DebugPreference
        qualifiedName: TM.TMClient.DebugPreference
    isDefinition: true
    commentId: Overload:TM.TMClient.DebugPreference
  TM.TMClient.Header*:
    name:
      CSharp:
      - id: TM.TMClient.Header*
        name: Header
        nameWithType: TMClient.Header
        qualifiedName: TM.TMClient.Header
      VB:
      - id: TM.TMClient.Header*
        name: Header
        nameWithType: TMClient.Header
        qualifiedName: TM.TMClient.Header
    isDefinition: true
    commentId: Overload:TM.TMClient.Header
  TM.TMClient.IpAddress*:
    name:
      CSharp:
      - id: TM.TMClient.IpAddress*
        name: IpAddress
        nameWithType: TMClient.IpAddress
        qualifiedName: TM.TMClient.IpAddress
      VB:
      - id: TM.TMClient.IpAddress*
        name: IpAddress
        nameWithType: TMClient.IpAddress
        qualifiedName: TM.TMClient.IpAddress
    isDefinition: true
    commentId: Overload:TM.TMClient.IpAddress
  TM.TMClient.IP*:
    name:
      CSharp:
      - id: TM.TMClient.IP*
        name: IP
        nameWithType: TMClient.IP
        qualifiedName: TM.TMClient.IP
      VB:
      - id: TM.TMClient.IP*
        name: IP
        nameWithType: TMClient.IP
        qualifiedName: TM.TMClient.IP
    isDefinition: true
    commentId: Overload:TM.TMClient.IP
  TM.TMClient.IsConnected*:
    name:
      CSharp:
      - id: TM.TMClient.IsConnected*
        name: IsConnected
        nameWithType: TMClient.IsConnected
        qualifiedName: TM.TMClient.IsConnected
      VB:
      - id: TM.TMClient.IsConnected*
        name: IsConnected
        nameWithType: TMClient.IsConnected
        qualifiedName: TM.TMClient.IsConnected
    isDefinition: true
    commentId: Overload:TM.TMClient.IsConnected
  System.Net:
    name:
      CSharp:
      - name: System.Net
        nameWithType: System.Net
        qualifiedName: System.Net
        isExternal: true
      VB:
      - name: System.Net
        nameWithType: System.Net
        qualifiedName: System.Net
    isDefinition: true
    commentId: N:System.Net
  System.Net.IPEndPoint:
    name:
      CSharp:
      - id: System.Net.IPEndPoint
        name: IPEndPoint
        nameWithType: IPEndPoint
        qualifiedName: System.Net.IPEndPoint
        isExternal: true
      VB:
      - id: System.Net.IPEndPoint
        name: IPEndPoint
        nameWithType: IPEndPoint
        qualifiedName: System.Net.IPEndPoint
        isExternal: true
    isDefinition: true
    parent: System.Net
    commentId: T:System.Net.IPEndPoint
  TM.TMClient.LocalEndPoint*:
    name:
      CSharp:
      - id: TM.TMClient.LocalEndPoint*
        name: LocalEndPoint
        nameWithType: TMClient.LocalEndPoint
        qualifiedName: TM.TMClient.LocalEndPoint
      VB:
      - id: TM.TMClient.LocalEndPoint*
        name: LocalEndPoint
        nameWithType: TMClient.LocalEndPoint
        qualifiedName: TM.TMClient.LocalEndPoint
    isDefinition: true
    commentId: Overload:TM.TMClient.LocalEndPoint
  TM.TMClient.LocalIpAddress*:
    name:
      CSharp:
      - id: TM.TMClient.LocalIpAddress*
        name: LocalIpAddress
        nameWithType: TMClient.LocalIpAddress
        qualifiedName: TM.TMClient.LocalIpAddress
      VB:
      - id: TM.TMClient.LocalIpAddress*
        name: LocalIpAddress
        nameWithType: TMClient.LocalIpAddress
        qualifiedName: TM.TMClient.LocalIpAddress
    isDefinition: true
    commentId: Overload:TM.TMClient.LocalIpAddress
  TM.TMClient.LocalPort*:
    name:
      CSharp:
      - id: TM.TMClient.LocalPort*
        name: LocalPort
        nameWithType: TMClient.LocalPort
        qualifiedName: TM.TMClient.LocalPort
      VB:
      - id: TM.TMClient.LocalPort*
        name: LocalPort
        nameWithType: TMClient.LocalPort
        qualifiedName: TM.TMClient.LocalPort
    isDefinition: true
    commentId: Overload:TM.TMClient.LocalPort
  TM.TMClient.MCS_State_Server*:
    name:
      CSharp:
      - id: TM.TMClient.MCS_State_Server*
        name: MCS_State_Server
        nameWithType: TMClient.MCS_State_Server
        qualifiedName: TM.TMClient.MCS_State_Server
      VB:
      - id: TM.TMClient.MCS_State_Server*
        name: MCS_State_Server
        nameWithType: TMClient.MCS_State_Server
        qualifiedName: TM.TMClient.MCS_State_Server
    isDefinition: true
    commentId: Overload:TM.TMClient.MCS_State_Server
  System.Collections.Generic.List{TM.PlanSpot}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{TM.PlanSpot}
  TM.TMClient.Plan*:
    name:
      CSharp:
      - id: TM.TMClient.Plan*
        name: Plan
        nameWithType: TMClient.Plan
        qualifiedName: TM.TMClient.Plan
      VB:
      - id: TM.TMClient.Plan*
        name: Plan
        nameWithType: TMClient.Plan
        qualifiedName: TM.TMClient.Plan
    isDefinition: true
    commentId: Overload:TM.TMClient.Plan
  TM.TMClient.PlanResults*:
    name:
      CSharp:
      - id: TM.TMClient.PlanResults*
        name: PlanResults
        nameWithType: TMClient.PlanResults
        qualifiedName: TM.TMClient.PlanResults
      VB:
      - id: TM.TMClient.PlanResults*
        name: PlanResults
        nameWithType: TMClient.PlanResults
        qualifiedName: TM.TMClient.PlanResults
    isDefinition: true
    commentId: Overload:TM.TMClient.PlanResults
  TM.TMClient.Port*:
    name:
      CSharp:
      - id: TM.TMClient.Port*
        name: Port
        nameWithType: TMClient.Port
        qualifiedName: TM.TMClient.Port
      VB:
      - id: TM.TMClient.Port*
        name: Port
        nameWithType: TMClient.Port
        qualifiedName: TM.TMClient.Port
    isDefinition: true
    commentId: Overload:TM.TMClient.Port
  TM.TMClient.ProcessingIsOn*:
    name:
      CSharp:
      - id: TM.TMClient.ProcessingIsOn*
        name: ProcessingIsOn
        nameWithType: TMClient.ProcessingIsOn
        qualifiedName: TM.TMClient.ProcessingIsOn
      VB:
      - id: TM.TMClient.ProcessingIsOn*
        name: ProcessingIsOn
        nameWithType: TMClient.ProcessingIsOn
        qualifiedName: TM.TMClient.ProcessingIsOn
    isDefinition: true
    commentId: Overload:TM.TMClient.ProcessingIsOn
  TM.TMClient.RemoteEndPoint*:
    name:
      CSharp:
      - id: TM.TMClient.RemoteEndPoint*
        name: RemoteEndPoint
        nameWithType: TMClient.RemoteEndPoint
        qualifiedName: TM.TMClient.RemoteEndPoint
      VB:
      - id: TM.TMClient.RemoteEndPoint*
        name: RemoteEndPoint
        nameWithType: TMClient.RemoteEndPoint
        qualifiedName: TM.TMClient.RemoteEndPoint
    isDefinition: true
    commentId: Overload:TM.TMClient.RemoteEndPoint
  TM.TMClient.ServerState*:
    name:
      CSharp:
      - id: TM.TMClient.ServerState*
        name: ServerState
        nameWithType: TMClient.ServerState
        qualifiedName: TM.TMClient.ServerState
      VB:
      - id: TM.TMClient.ServerState*
        name: ServerState
        nameWithType: TMClient.ServerState
        qualifiedName: TM.TMClient.ServerState
    isDefinition: true
    commentId: Overload:TM.TMClient.ServerState
  TM.TMClient.SpotsPassed*:
    name:
      CSharp:
      - id: TM.TMClient.SpotsPassed*
        name: SpotsPassed
        nameWithType: TMClient.SpotsPassed
        qualifiedName: TM.TMClient.SpotsPassed
      VB:
      - id: TM.TMClient.SpotsPassed*
        name: SpotsPassed
        nameWithType: TMClient.SpotsPassed
        qualifiedName: TM.TMClient.SpotsPassed
    isDefinition: true
    commentId: Overload:TM.TMClient.SpotsPassed
  TM.TMClient.SpotsTotal*:
    name:
      CSharp:
      - id: TM.TMClient.SpotsTotal*
        name: SpotsTotal
        nameWithType: TMClient.SpotsTotal
        qualifiedName: TM.TMClient.SpotsTotal
      VB:
      - id: TM.TMClient.SpotsTotal*
        name: SpotsTotal
        nameWithType: TMClient.SpotsTotal
        qualifiedName: TM.TMClient.SpotsTotal
    isDefinition: true
    commentId: Overload:TM.TMClient.SpotsTotal
  TM.TMClient.Dispose*:
    name:
      CSharp:
      - id: TM.TMClient.Dispose*
        name: Dispose
        nameWithType: TMClient.Dispose
        qualifiedName: TM.TMClient.Dispose
      VB:
      - id: TM.TMClient.Dispose*
        name: Dispose
        nameWithType: TMClient.Dispose
        qualifiedName: TM.TMClient.Dispose
    isDefinition: true
    commentId: Overload:TM.TMClient.Dispose
  System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.Int32,TM.PlanSpot}
  TM.TMClient.DumpPlan*:
    name:
      CSharp:
      - id: TM.TMClient.DumpPlan*
        name: DumpPlan
        nameWithType: TMClient.DumpPlan
        qualifiedName: TM.TMClient.DumpPlan
      VB:
      - id: TM.TMClient.DumpPlan*
        name: DumpPlan
        nameWithType: TMClient.DumpPlan
        qualifiedName: TM.TMClient.DumpPlan
    isDefinition: true
    commentId: Overload:TM.TMClient.DumpPlan
  TM.TMClient.DumpPlanResults*:
    name:
      CSharp:
      - id: TM.TMClient.DumpPlanResults*
        name: DumpPlanResults
        nameWithType: TMClient.DumpPlanResults
        qualifiedName: TM.TMClient.DumpPlanResults
      VB:
      - id: TM.TMClient.DumpPlanResults*
        name: DumpPlanResults
        nameWithType: TMClient.DumpPlanResults
        qualifiedName: TM.TMClient.DumpPlanResults
    isDefinition: true
    commentId: Overload:TM.TMClient.DumpPlanResults
  System.IO.FileNotFoundException:
    commentId: T:System.IO.FileNotFoundException
  TM.TMClient.LoadPlanData*:
    name:
      CSharp:
      - id: TM.TMClient.LoadPlanData*
        name: LoadPlanData
        nameWithType: TMClient.LoadPlanData
        qualifiedName: TM.TMClient.LoadPlanData
      VB:
      - id: TM.TMClient.LoadPlanData*
        name: LoadPlanData
        nameWithType: TMClient.LoadPlanData
        qualifiedName: TM.TMClient.LoadPlanData
    isDefinition: true
    commentId: Overload:TM.TMClient.LoadPlanData
  TM.TMClient.SendPlan*:
    name:
      CSharp:
      - id: TM.TMClient.SendPlan*
        name: SendPlan
        nameWithType: TMClient.SendPlan
        qualifiedName: TM.TMClient.SendPlan
      VB:
      - id: TM.TMClient.SendPlan*
        name: SendPlan
        nameWithType: TMClient.SendPlan
        qualifiedName: TM.TMClient.SendPlan
    isDefinition: true
    commentId: Overload:TM.TMClient.SendPlan
  TM.TMClient.AskServerState*:
    name:
      CSharp:
      - id: TM.TMClient.AskServerState*
        name: AskServerState
        nameWithType: TMClient.AskServerState
        qualifiedName: TM.TMClient.AskServerState
      VB:
      - id: TM.TMClient.AskServerState*
        name: AskServerState
        nameWithType: TMClient.AskServerState
        qualifiedName: TM.TMClient.AskServerState
    isDefinition: true
    commentId: Overload:TM.TMClient.AskServerState
  TM.TMClient.ClearPlan*:
    name:
      CSharp:
      - id: TM.TMClient.ClearPlan*
        name: ClearPlan
        nameWithType: TMClient.ClearPlan
        qualifiedName: TM.TMClient.ClearPlan
      VB:
      - id: TM.TMClient.ClearPlan*
        name: ClearPlan
        nameWithType: TMClient.ClearPlan
        qualifiedName: TM.TMClient.ClearPlan
    isDefinition: true
    commentId: Overload:TM.TMClient.ClearPlan
  TM.TMClient.Connect*:
    name:
      CSharp:
      - id: TM.TMClient.Connect*
        name: Connect
        nameWithType: TMClient.Connect
        qualifiedName: TM.TMClient.Connect
      VB:
      - id: TM.TMClient.Connect*
        name: Connect
        nameWithType: TMClient.Connect
        qualifiedName: TM.TMClient.Connect
    isDefinition: true
    commentId: Overload:TM.TMClient.Connect
  TM.TMClient.Disconnect*:
    name:
      CSharp:
      - id: TM.TMClient.Disconnect*
        name: Disconnect
        nameWithType: TMClient.Disconnect
        qualifiedName: TM.TMClient.Disconnect
      VB:
      - id: TM.TMClient.Disconnect*
        name: Disconnect
        nameWithType: TMClient.Disconnect
        qualifiedName: TM.TMClient.Disconnect
    isDefinition: true
    commentId: Overload:TM.TMClient.Disconnect
  System.Collections.Generic.List{TM.PlanSpotFull}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpotFull
        name: PlanSpotFull
        nameWithType: PlanSpotFull
        qualifiedName: TM.PlanSpotFull
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpotFull
        name: PlanSpotFull
        nameWithType: PlanSpotFull
        qualifiedName: TM.PlanSpotFull
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{TM.PlanSpotFull}
  TM.TMClient.ExecutePlan*:
    name:
      CSharp:
      - id: TM.TMClient.ExecutePlan*
        name: ExecutePlan
        nameWithType: TMClient.ExecutePlan
        qualifiedName: TM.TMClient.ExecutePlan
      VB:
      - id: TM.TMClient.ExecutePlan*
        name: ExecutePlan
        nameWithType: TMClient.ExecutePlan
        qualifiedName: TM.TMClient.ExecutePlan
    isDefinition: true
    commentId: Overload:TM.TMClient.ExecutePlan
  TM.TMClient.LoadPlan*:
    name:
      CSharp:
      - id: TM.TMClient.LoadPlan*
        name: LoadPlan
        nameWithType: TMClient.LoadPlan
        qualifiedName: TM.TMClient.LoadPlan
      VB:
      - id: TM.TMClient.LoadPlan*
        name: LoadPlan
        nameWithType: TMClient.LoadPlan
        qualifiedName: TM.TMClient.LoadPlan
    isDefinition: true
    commentId: Overload:TM.TMClient.LoadPlan
  TM.TMClient.PausePlan*:
    name:
      CSharp:
      - id: TM.TMClient.PausePlan*
        name: PausePlan
        nameWithType: TMClient.PausePlan
        qualifiedName: TM.TMClient.PausePlan
      VB:
      - id: TM.TMClient.PausePlan*
        name: PausePlan
        nameWithType: TMClient.PausePlan
        qualifiedName: TM.TMClient.PausePlan
    isDefinition: true
    commentId: Overload:TM.TMClient.PausePlan
  TM.TMClient.Reset*:
    name:
      CSharp:
      - id: TM.TMClient.Reset*
        name: Reset
        nameWithType: TMClient.Reset
        qualifiedName: TM.TMClient.Reset
      VB:
      - id: TM.TMClient.Reset*
        name: Reset
        nameWithType: TMClient.Reset
        qualifiedName: TM.TMClient.Reset
    isDefinition: true
    commentId: Overload:TM.TMClient.Reset
  TM.EPlanCommand:
    name:
      CSharp:
      - id: TM.EPlanCommand
        name: EPlanCommand
        nameWithType: EPlanCommand
        qualifiedName: TM.EPlanCommand
      VB:
      - id: TM.EPlanCommand
        name: EPlanCommand
        nameWithType: EPlanCommand
        qualifiedName: TM.EPlanCommand
    isDefinition: true
    parent: TM
    commentId: T:TM.EPlanCommand
  TM.TMClient.SendCommand*:
    name:
      CSharp:
      - id: TM.TMClient.SendCommand*
        name: SendCommand
        nameWithType: TMClient.SendCommand
        qualifiedName: TM.TMClient.SendCommand
      VB:
      - id: TM.TMClient.SendCommand*
        name: SendCommand
        nameWithType: TMClient.SendCommand
        qualifiedName: TM.TMClient.SendCommand
    isDefinition: true
    commentId: Overload:TM.TMClient.SendCommand
  TM.TMClient.SendData*:
    name:
      CSharp:
      - id: TM.TMClient.SendData*
        name: SendData
        nameWithType: TMClient.SendData
        qualifiedName: TM.TMClient.SendData
      VB:
      - id: TM.TMClient.SendData*
        name: SendData
        nameWithType: TMClient.SendData
        qualifiedName: TM.TMClient.SendData
    isDefinition: true
    commentId: Overload:TM.TMClient.SendData
  TM.TMClient.SendInfo*:
    name:
      CSharp:
      - id: TM.TMClient.SendInfo*
        name: SendInfo
        nameWithType: TMClient.SendInfo
        qualifiedName: TM.TMClient.SendInfo
      VB:
      - id: TM.TMClient.SendInfo*
        name: SendInfo
        nameWithType: TMClient.SendInfo
        qualifiedName: TM.TMClient.SendInfo
    isDefinition: true
    commentId: Overload:TM.TMClient.SendInfo
  System.Collections.Generic.ICollection`1:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.ICollection`1
  System.Collections.Generic.ICollection{TM.PlanSpot}:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: TM.PlanSpot
        name: PlanSpot
        nameWithType: PlanSpot
        qualifiedName: TM.PlanSpot
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.ICollection{TM.PlanSpot}
  System.Object[]:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  TM.TMClient.StartPlan*:
    name:
      CSharp:
      - id: TM.TMClient.StartPlan*
        name: StartPlan
        nameWithType: TMClient.StartPlan
        qualifiedName: TM.TMClient.StartPlan
      VB:
      - id: TM.TMClient.StartPlan*
        name: StartPlan
        nameWithType: TMClient.StartPlan
        qualifiedName: TM.TMClient.StartPlan
    isDefinition: true
    commentId: Overload:TM.TMClient.StartPlan
  TM.TMClient.StopPlan*:
    name:
      CSharp:
      - id: TM.TMClient.StopPlan*
        name: StopPlan
        nameWithType: TMClient.StopPlan
        qualifiedName: TM.TMClient.StopPlan
      VB:
      - id: TM.TMClient.StopPlan*
        name: StopPlan
        nameWithType: TMClient.StopPlan
        qualifiedName: TM.TMClient.StopPlan
    isDefinition: true
    commentId: Overload:TM.TMClient.StopPlan
  TM.ReadPlanException:
    name:
      CSharp:
      - id: TM.ReadPlanException
        name: ReadPlanException
        nameWithType: ReadPlanException
        qualifiedName: TM.ReadPlanException
      VB:
      - id: TM.ReadPlanException
        name: ReadPlanException
        nameWithType: ReadPlanException
        qualifiedName: TM.ReadPlanException
    isDefinition: true
    commentId: T:TM.ReadPlanException
  TM.ReadPlanException.#ctor*:
    name:
      CSharp:
      - id: TM.ReadPlanException.#ctor*
        name: ReadPlanException
        nameWithType: ReadPlanException.ReadPlanException
        qualifiedName: TM.ReadPlanException.ReadPlanException
      VB:
      - id: TM.ReadPlanException.#ctor*
        name: ReadPlanException
        nameWithType: ReadPlanException.ReadPlanException
        qualifiedName: TM.ReadPlanException.ReadPlanException
    isDefinition: true
    commentId: Overload:TM.ReadPlanException.#ctor
  TM.SendCommandException:
    name:
      CSharp:
      - id: TM.SendCommandException
        name: SendCommandException
        nameWithType: SendCommandException
        qualifiedName: TM.SendCommandException
      VB:
      - id: TM.SendCommandException
        name: SendCommandException
        nameWithType: SendCommandException
        qualifiedName: TM.SendCommandException
    isDefinition: true
    commentId: T:TM.SendCommandException
  TM.SendCommandException.#ctor*:
    name:
      CSharp:
      - id: TM.SendCommandException.#ctor*
        name: SendCommandException
        nameWithType: SendCommandException.SendCommandException
        qualifiedName: TM.SendCommandException.SendCommandException
      VB:
      - id: TM.SendCommandException.#ctor*
        name: SendCommandException
        nameWithType: SendCommandException.SendCommandException
        qualifiedName: TM.SendCommandException.SendCommandException
    isDefinition: true
    commentId: Overload:TM.SendCommandException.#ctor
  TM.SendDataException:
    name:
      CSharp:
      - id: TM.SendDataException
        name: SendDataException
        nameWithType: SendDataException
        qualifiedName: TM.SendDataException
      VB:
      - id: TM.SendDataException
        name: SendDataException
        nameWithType: SendDataException
        qualifiedName: TM.SendDataException
    isDefinition: true
    commentId: T:TM.SendDataException
  TM.SendDataException.#ctor*:
    name:
      CSharp:
      - id: TM.SendDataException.#ctor*
        name: SendDataException
        nameWithType: SendDataException.SendDataException
        qualifiedName: TM.SendDataException.SendDataException
      VB:
      - id: TM.SendDataException.#ctor*
        name: SendDataException
        nameWithType: SendDataException.SendDataException
        qualifiedName: TM.SendDataException.SendDataException
    isDefinition: true
    commentId: Overload:TM.SendDataException.#ctor
  TM.SendInfoException:
    name:
      CSharp:
      - id: TM.SendInfoException
        name: SendInfoException
        nameWithType: SendInfoException
        qualifiedName: TM.SendInfoException
      VB:
      - id: TM.SendInfoException
        name: SendInfoException
        nameWithType: SendInfoException
        qualifiedName: TM.SendInfoException
    isDefinition: true
    commentId: T:TM.SendInfoException
  TM.SendInfoException.#ctor*:
    name:
      CSharp:
      - id: TM.SendInfoException.#ctor*
        name: SendInfoException
        nameWithType: SendInfoException.SendInfoException
        qualifiedName: TM.SendInfoException.SendInfoException
      VB:
      - id: TM.SendInfoException.#ctor*
        name: SendInfoException
        nameWithType: SendInfoException.SendInfoException
        qualifiedName: TM.SendInfoException.SendInfoException
    isDefinition: true
    commentId: Overload:TM.SendInfoException.#ctor
  TM.SendPlanException:
    name:
      CSharp:
      - id: TM.SendPlanException
        name: SendPlanException
        nameWithType: SendPlanException
        qualifiedName: TM.SendPlanException
      VB:
      - id: TM.SendPlanException
        name: SendPlanException
        nameWithType: SendPlanException
        qualifiedName: TM.SendPlanException
    isDefinition: true
    commentId: T:TM.SendPlanException
  TM.SendPlanException.#ctor*:
    name:
      CSharp:
      - id: TM.SendPlanException.#ctor*
        name: SendPlanException
        nameWithType: SendPlanException.SendPlanException
        qualifiedName: TM.SendPlanException.SendPlanException
      VB:
      - id: TM.SendPlanException.#ctor*
        name: SendPlanException
        nameWithType: SendPlanException.SendPlanException
        qualifiedName: TM.SendPlanException.SendPlanException
    isDefinition: true
    commentId: Overload:TM.SendPlanException.#ctor
  TM.TMPacketHeader.#ctor*:
    name:
      CSharp:
      - id: TM.TMPacketHeader.#ctor*
        name: TMPacketHeader
        nameWithType: TMPacketHeader.TMPacketHeader
        qualifiedName: TM.TMPacketHeader.TMPacketHeader
      VB:
      - id: TM.TMPacketHeader.#ctor*
        name: TMPacketHeader
        nameWithType: TMPacketHeader.TMPacketHeader
        qualifiedName: TM.TMPacketHeader.TMPacketHeader
    isDefinition: true
    commentId: Overload:TM.TMPacketHeader.#ctor
  TM.TMPacketHeader.ToString*:
    name:
      CSharp:
      - id: TM.TMPacketHeader.ToString*
        name: ToString
        nameWithType: TMPacketHeader.ToString
        qualifiedName: TM.TMPacketHeader.ToString
      VB:
      - id: TM.TMPacketHeader.ToString*
        name: ToString
        nameWithType: TMPacketHeader.ToString
        qualifiedName: TM.TMPacketHeader.ToString
    isDefinition: true
    commentId: Overload:TM.TMPacketHeader.ToString
  TM.EPacketType:
    name:
      CSharp:
      - id: TM.EPacketType
        name: EPacketType
        nameWithType: EPacketType
        qualifiedName: TM.EPacketType
      VB:
      - id: TM.EPacketType
        name: EPacketType
        nameWithType: EPacketType
        qualifiedName: TM.EPacketType
    isDefinition: true
    parent: TM
    commentId: T:TM.EPacketType
  TM.TMPacket.#ctor*:
    name:
      CSharp:
      - id: TM.TMPacket.#ctor*
        name: TMPacket
        nameWithType: TMPacket.TMPacket
        qualifiedName: TM.TMPacket.TMPacket
      VB:
      - id: TM.TMPacket.#ctor*
        name: TMPacket
        nameWithType: TMPacket.TMPacket
        qualifiedName: TM.TMPacket.TMPacket
    isDefinition: true
    commentId: Overload:TM.TMPacket.#ctor
  TM.TMPacket.PacketNumber*:
    name:
      CSharp:
      - id: TM.TMPacket.PacketNumber*
        name: PacketNumber
        nameWithType: TMPacket.PacketNumber
        qualifiedName: TM.TMPacket.PacketNumber
      VB:
      - id: TM.TMPacket.PacketNumber*
        name: PacketNumber
        nameWithType: TMPacket.PacketNumber
        qualifiedName: TM.TMPacket.PacketNumber
    isDefinition: true
    commentId: Overload:TM.TMPacket.PacketNumber
  TM.TMPacket.Data*:
    name:
      CSharp:
      - id: TM.TMPacket.Data*
        name: Data
        nameWithType: TMPacket.Data
        qualifiedName: TM.TMPacket.Data
      VB:
      - id: TM.TMPacket.Data*
        name: Data
        nameWithType: TMPacket.Data
        qualifiedName: TM.TMPacket.Data
    isDefinition: true
    commentId: Overload:TM.TMPacket.Data
  TM.TMPacket.ServerType*:
    name:
      CSharp:
      - id: TM.TMPacket.ServerType*
        name: ServerType
        nameWithType: TMPacket.ServerType
        qualifiedName: TM.TMPacket.ServerType
      VB:
      - id: TM.TMPacket.ServerType*
        name: ServerType
        nameWithType: TMPacket.ServerType
        qualifiedName: TM.TMPacket.ServerType
    isDefinition: true
    commentId: Overload:TM.TMPacket.ServerType
  TM.TMPacket.TotalSize*:
    name:
      CSharp:
      - id: TM.TMPacket.TotalSize*
        name: TotalSize
        nameWithType: TMPacket.TotalSize
        qualifiedName: TM.TMPacket.TotalSize
      VB:
      - id: TM.TMPacket.TotalSize*
        name: TotalSize
        nameWithType: TMPacket.TotalSize
        qualifiedName: TM.TMPacket.TotalSize
    isDefinition: true
    commentId: Overload:TM.TMPacket.TotalSize
  TM.TMPacket.Dispose*:
    name:
      CSharp:
      - id: TM.TMPacket.Dispose*
        name: Dispose
        nameWithType: TMPacket.Dispose
        qualifiedName: TM.TMPacket.Dispose
      VB:
      - id: TM.TMPacket.Dispose*
        name: Dispose
        nameWithType: TMPacket.Dispose
        qualifiedName: TM.TMPacket.Dispose
    isDefinition: true
    commentId: Overload:TM.TMPacket.Dispose
  TM.TMPacket.IsChecksumOK*:
    name:
      CSharp:
      - id: TM.TMPacket.IsChecksumOK*
        name: IsChecksumOK
        nameWithType: TMPacket.IsChecksumOK
        qualifiedName: TM.TMPacket.IsChecksumOK
      VB:
      - id: TM.TMPacket.IsChecksumOK*
        name: IsChecksumOK
        nameWithType: TMPacket.IsChecksumOK
        qualifiedName: TM.TMPacket.IsChecksumOK
    isDefinition: true
    commentId: Overload:TM.TMPacket.IsChecksumOK
  TM.TMPacket.ToString*:
    name:
      CSharp:
      - id: TM.TMPacket.ToString*
        name: ToString
        nameWithType: TMPacket.ToString
        qualifiedName: TM.TMPacket.ToString
      VB:
      - id: TM.TMPacket.ToString*
        name: ToString
        nameWithType: TMPacket.ToString
        qualifiedName: TM.TMPacket.ToString
    isDefinition: true
    commentId: Overload:TM.TMPacket.ToString
  TM.EConfigTag:
    name:
      CSharp:
      - id: TM.EConfigTag
        name: EConfigTag
        nameWithType: EConfigTag
        qualifiedName: TM.EConfigTag
      VB:
      - id: TM.EConfigTag
        name: EConfigTag
        nameWithType: EConfigTag
        qualifiedName: TM.EConfigTag
    isDefinition: true
    parent: TM
    commentId: T:TM.EConfigTag
  TM.EDevErrorStatus:
    name:
      CSharp:
      - id: TM.EDevErrorStatus
        name: EDevErrorStatus
        nameWithType: EDevErrorStatus
        qualifiedName: TM.EDevErrorStatus
      VB:
      - id: TM.EDevErrorStatus
        name: EDevErrorStatus
        nameWithType: EDevErrorStatus
        qualifiedName: TM.EDevErrorStatus
    isDefinition: true
    parent: TM
    commentId: T:TM.EDevErrorStatus
  TM.EPacketSettings:
    name:
      CSharp:
      - id: TM.EPacketSettings
        name: EPacketSettings
        nameWithType: EPacketSettings
        qualifiedName: TM.EPacketSettings
      VB:
      - id: TM.EPacketSettings
        name: EPacketSettings
        nameWithType: EPacketSettings
        qualifiedName: TM.EPacketSettings
    isDefinition: true
    parent: TM
    commentId: T:TM.EPacketSettings
  TM.PlanSpot.id*:
    name:
      CSharp:
      - id: TM.PlanSpot.id*
        name: id
        nameWithType: PlanSpot.id
        qualifiedName: TM.PlanSpot.id
      VB:
      - id: TM.PlanSpot.id*
        name: id
        nameWithType: PlanSpot.id
        qualifiedName: TM.PlanSpot.id
    isDefinition: true
    commentId: Overload:TM.PlanSpot.id
  TM.PlanSpot.xangle*:
    name:
      CSharp:
      - id: TM.PlanSpot.xangle*
        name: xangle
        nameWithType: PlanSpot.xangle
        qualifiedName: TM.PlanSpot.xangle
      VB:
      - id: TM.PlanSpot.xangle*
        name: xangle
        nameWithType: PlanSpot.xangle
        qualifiedName: TM.PlanSpot.xangle
    isDefinition: true
    commentId: Overload:TM.PlanSpot.xangle
  TM.PlanSpot.zangle*:
    name:
      CSharp:
      - id: TM.PlanSpot.zangle*
        name: zangle
        nameWithType: PlanSpot.zangle
        qualifiedName: TM.PlanSpot.zangle
      VB:
      - id: TM.PlanSpot.zangle*
        name: zangle
        nameWithType: PlanSpot.zangle
        qualifiedName: TM.PlanSpot.zangle
    isDefinition: true
    commentId: Overload:TM.PlanSpot.zangle
  TM.PlanSpot.energy*:
    name:
      CSharp:
      - id: TM.PlanSpot.energy*
        name: energy
        nameWithType: PlanSpot.energy
        qualifiedName: TM.PlanSpot.energy
      VB:
      - id: TM.PlanSpot.energy*
        name: energy
        nameWithType: PlanSpot.energy
        qualifiedName: TM.PlanSpot.energy
    isDefinition: true
    commentId: Overload:TM.PlanSpot.energy
  TM.PlanSpot.pcount*:
    name:
      CSharp:
      - id: TM.PlanSpot.pcount*
        name: pcount
        nameWithType: PlanSpot.pcount
        qualifiedName: TM.PlanSpot.pcount
      VB:
      - id: TM.PlanSpot.pcount*
        name: pcount
        nameWithType: PlanSpot.pcount
        qualifiedName: TM.PlanSpot.pcount
    isDefinition: true
    commentId: Overload:TM.PlanSpot.pcount
  TM.PlanSpot.ToString*:
    name:
      CSharp:
      - id: TM.PlanSpot.ToString*
        name: ToString
        nameWithType: PlanSpot.ToString
        qualifiedName: TM.PlanSpot.ToString
      VB:
      - id: TM.PlanSpot.ToString*
        name: ToString
        nameWithType: PlanSpot.ToString
        qualifiedName: TM.PlanSpot.ToString
    isDefinition: true
    commentId: Overload:TM.PlanSpot.ToString
  TM.PlanSpotResult:
    name:
      CSharp:
      - id: TM.PlanSpotResult
        name: PlanSpotResult
        nameWithType: PlanSpotResult
        qualifiedName: TM.PlanSpotResult
      VB:
      - id: TM.PlanSpotResult
        name: PlanSpotResult
        nameWithType: PlanSpotResult
        qualifiedName: TM.PlanSpotResult
    isDefinition: true
    commentId: T:TM.PlanSpotResult
  TM.PlanSpotFull.id*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.id*
        name: id
        nameWithType: PlanSpotFull.id
        qualifiedName: TM.PlanSpotFull.id
      VB:
      - id: TM.PlanSpotFull.id*
        name: id
        nameWithType: PlanSpotFull.id
        qualifiedName: TM.PlanSpotFull.id
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.id
  TM.PlanSpotFull.xangle*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.xangle*
        name: xangle
        nameWithType: PlanSpotFull.xangle
        qualifiedName: TM.PlanSpotFull.xangle
      VB:
      - id: TM.PlanSpotFull.xangle*
        name: xangle
        nameWithType: PlanSpotFull.xangle
        qualifiedName: TM.PlanSpotFull.xangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.xangle
  TM.PlanSpotFull.zangle*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.zangle*
        name: zangle
        nameWithType: PlanSpotFull.zangle
        qualifiedName: TM.PlanSpotFull.zangle
      VB:
      - id: TM.PlanSpotFull.zangle*
        name: zangle
        nameWithType: PlanSpotFull.zangle
        qualifiedName: TM.PlanSpotFull.zangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.zangle
  TM.PlanSpotFull.energy*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.energy*
        name: energy
        nameWithType: PlanSpotFull.energy
        qualifiedName: TM.PlanSpotFull.energy
      VB:
      - id: TM.PlanSpotFull.energy*
        name: energy
        nameWithType: PlanSpotFull.energy
        qualifiedName: TM.PlanSpotFull.energy
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.energy
  TM.PlanSpotFull.pcount*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.pcount*
        name: pcount
        nameWithType: PlanSpotFull.pcount
        qualifiedName: TM.PlanSpotFull.pcount
      VB:
      - id: TM.PlanSpotFull.pcount*
        name: pcount
        nameWithType: PlanSpotFull.pcount
        qualifiedName: TM.PlanSpotFull.pcount
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.pcount
  TM.PlanSpotFull.done*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.done*
        name: done
        nameWithType: PlanSpotFull.done
        qualifiedName: TM.PlanSpotFull.done
      VB:
      - id: TM.PlanSpotFull.done*
        name: done
        nameWithType: PlanSpotFull.done
        qualifiedName: TM.PlanSpotFull.done
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.done
  TM.PlanSpotFull.result_xangle*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.result_xangle*
        name: result_xangle
        nameWithType: PlanSpotFull.result_xangle
        qualifiedName: TM.PlanSpotFull.result_xangle
      VB:
      - id: TM.PlanSpotFull.result_xangle*
        name: result_xangle
        nameWithType: PlanSpotFull.result_xangle
        qualifiedName: TM.PlanSpotFull.result_xangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.result_xangle
  TM.PlanSpotFull.result_zangle*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.result_zangle*
        name: result_zangle
        nameWithType: PlanSpotFull.result_zangle
        qualifiedName: TM.PlanSpotFull.result_zangle
      VB:
      - id: TM.PlanSpotFull.result_zangle*
        name: result_zangle
        nameWithType: PlanSpotFull.result_zangle
        qualifiedName: TM.PlanSpotFull.result_zangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.result_zangle
  TM.PlanSpotFull.result_pcount*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.result_pcount*
        name: result_pcount
        nameWithType: PlanSpotFull.result_pcount
        qualifiedName: TM.PlanSpotFull.result_pcount
      VB:
      - id: TM.PlanSpotFull.result_pcount*
        name: result_pcount
        nameWithType: PlanSpotFull.result_pcount
        qualifiedName: TM.PlanSpotFull.result_pcount
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.result_pcount
  TM.PlanSpotFull.changed*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.changed*
        name: changed
        nameWithType: PlanSpotFull.changed
        qualifiedName: TM.PlanSpotFull.changed
      VB:
      - id: TM.PlanSpotFull.changed*
        name: changed
        nameWithType: PlanSpotFull.changed
        qualifiedName: TM.PlanSpotFull.changed
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.changed
  TM.PlanSpotFull.need_to_sent*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.need_to_sent*
        name: need_to_sent
        nameWithType: PlanSpotFull.need_to_sent
        qualifiedName: TM.PlanSpotFull.need_to_sent
      VB:
      - id: TM.PlanSpotFull.need_to_sent*
        name: need_to_sent
        nameWithType: PlanSpotFull.need_to_sent
        qualifiedName: TM.PlanSpotFull.need_to_sent
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.need_to_sent
  TM.PlanSpotFull.ToString*:
    name:
      CSharp:
      - id: TM.PlanSpotFull.ToString*
        name: ToString
        nameWithType: PlanSpotFull.ToString
        qualifiedName: TM.PlanSpotFull.ToString
      VB:
      - id: TM.PlanSpotFull.ToString*
        name: ToString
        nameWithType: PlanSpotFull.ToString
        qualifiedName: TM.PlanSpotFull.ToString
    isDefinition: true
    commentId: Overload:TM.PlanSpotFull.ToString
  TM.PlanSpotFull:
    name:
      CSharp:
      - id: TM.PlanSpotFull
        name: PlanSpotFull
        nameWithType: PlanSpotFull
        qualifiedName: TM.PlanSpotFull
      VB:
      - id: TM.PlanSpotFull
        name: PlanSpotFull
        nameWithType: PlanSpotFull
        qualifiedName: TM.PlanSpotFull
    isDefinition: true
    commentId: T:TM.PlanSpotFull
  TM.PlanSpotTopass.id*:
    name:
      CSharp:
      - id: TM.PlanSpotTopass.id*
        name: id
        nameWithType: PlanSpotTopass.id
        qualifiedName: TM.PlanSpotTopass.id
      VB:
      - id: TM.PlanSpotTopass.id*
        name: id
        nameWithType: PlanSpotTopass.id
        qualifiedName: TM.PlanSpotTopass.id
    isDefinition: true
    commentId: Overload:TM.PlanSpotTopass.id
  TM.PlanSpotTopass.xangle*:
    name:
      CSharp:
      - id: TM.PlanSpotTopass.xangle*
        name: xangle
        nameWithType: PlanSpotTopass.xangle
        qualifiedName: TM.PlanSpotTopass.xangle
      VB:
      - id: TM.PlanSpotTopass.xangle*
        name: xangle
        nameWithType: PlanSpotTopass.xangle
        qualifiedName: TM.PlanSpotTopass.xangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotTopass.xangle
  TM.PlanSpotTopass.zangle*:
    name:
      CSharp:
      - id: TM.PlanSpotTopass.zangle*
        name: zangle
        nameWithType: PlanSpotTopass.zangle
        qualifiedName: TM.PlanSpotTopass.zangle
      VB:
      - id: TM.PlanSpotTopass.zangle*
        name: zangle
        nameWithType: PlanSpotTopass.zangle
        qualifiedName: TM.PlanSpotTopass.zangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotTopass.zangle
  TM.PlanSpotTopass.pcount*:
    name:
      CSharp:
      - id: TM.PlanSpotTopass.pcount*
        name: pcount
        nameWithType: PlanSpotTopass.pcount
        qualifiedName: TM.PlanSpotTopass.pcount
      VB:
      - id: TM.PlanSpotTopass.pcount*
        name: pcount
        nameWithType: PlanSpotTopass.pcount
        qualifiedName: TM.PlanSpotTopass.pcount
    isDefinition: true
    commentId: Overload:TM.PlanSpotTopass.pcount
  TM.PlanSpotTopass.ToString*:
    name:
      CSharp:
      - id: TM.PlanSpotTopass.ToString*
        name: ToString
        nameWithType: PlanSpotTopass.ToString
        qualifiedName: TM.PlanSpotTopass.ToString
      VB:
      - id: TM.PlanSpotTopass.ToString*
        name: ToString
        nameWithType: PlanSpotTopass.ToString
        qualifiedName: TM.PlanSpotTopass.ToString
    isDefinition: true
    commentId: Overload:TM.PlanSpotTopass.ToString
  TM.PlanSpotTopass:
    name:
      CSharp:
      - id: TM.PlanSpotTopass
        name: PlanSpotTopass
        nameWithType: PlanSpotTopass
        qualifiedName: TM.PlanSpotTopass
      VB:
      - id: TM.PlanSpotTopass
        name: PlanSpotTopass
        nameWithType: PlanSpotTopass
        qualifiedName: TM.PlanSpotTopass
    isDefinition: true
    commentId: T:TM.PlanSpotTopass
  TM.PlanSpotResult.id*:
    name:
      CSharp:
      - id: TM.PlanSpotResult.id*
        name: id
        nameWithType: PlanSpotResult.id
        qualifiedName: TM.PlanSpotResult.id
      VB:
      - id: TM.PlanSpotResult.id*
        name: id
        nameWithType: PlanSpotResult.id
        qualifiedName: TM.PlanSpotResult.id
    isDefinition: true
    commentId: Overload:TM.PlanSpotResult.id
  TM.PlanSpotResult.result_xangle*:
    name:
      CSharp:
      - id: TM.PlanSpotResult.result_xangle*
        name: result_xangle
        nameWithType: PlanSpotResult.result_xangle
        qualifiedName: TM.PlanSpotResult.result_xangle
      VB:
      - id: TM.PlanSpotResult.result_xangle*
        name: result_xangle
        nameWithType: PlanSpotResult.result_xangle
        qualifiedName: TM.PlanSpotResult.result_xangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotResult.result_xangle
  TM.PlanSpotResult.result_zangle*:
    name:
      CSharp:
      - id: TM.PlanSpotResult.result_zangle*
        name: result_zangle
        nameWithType: PlanSpotResult.result_zangle
        qualifiedName: TM.PlanSpotResult.result_zangle
      VB:
      - id: TM.PlanSpotResult.result_zangle*
        name: result_zangle
        nameWithType: PlanSpotResult.result_zangle
        qualifiedName: TM.PlanSpotResult.result_zangle
    isDefinition: true
    commentId: Overload:TM.PlanSpotResult.result_zangle
  TM.PlanSpotResult.result_pcount*:
    name:
      CSharp:
      - id: TM.PlanSpotResult.result_pcount*
        name: result_pcount
        nameWithType: PlanSpotResult.result_pcount
        qualifiedName: TM.PlanSpotResult.result_pcount
      VB:
      - id: TM.PlanSpotResult.result_pcount*
        name: result_pcount
        nameWithType: PlanSpotResult.result_pcount
        qualifiedName: TM.PlanSpotResult.result_pcount
    isDefinition: true
    commentId: Overload:TM.PlanSpotResult.result_pcount
  TM.PlanSpotResult.done*:
    name:
      CSharp:
      - id: TM.PlanSpotResult.done*
        name: done
        nameWithType: PlanSpotResult.done
        qualifiedName: TM.PlanSpotResult.done
      VB:
      - id: TM.PlanSpotResult.done*
        name: done
        nameWithType: PlanSpotResult.done
        qualifiedName: TM.PlanSpotResult.done
    isDefinition: true
    commentId: Overload:TM.PlanSpotResult.done
  TM.PlanSpotResult.ToString*:
    name:
      CSharp:
      - id: TM.PlanSpotResult.ToString*
        name: ToString
        nameWithType: PlanSpotResult.ToString
        qualifiedName: TM.PlanSpotResult.ToString
      VB:
      - id: TM.PlanSpotResult.ToString*
        name: ToString
        nameWithType: PlanSpotResult.ToString
        qualifiedName: TM.PlanSpotResult.ToString
    isDefinition: true
    commentId: Overload:TM.PlanSpotResult.ToString
  TM.TMPacketSignature.Signature(TM.EServerType):
    name:
      CSharp:
      - id: TM.TMPacketSignature.Signature(TM.EServerType)
        name: Signature
        nameWithType: TMPacketSignature.Signature
        qualifiedName: TM.TMPacketSignature.Signature
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.EServerType
        name: EServerType
        nameWithType: EServerType
        qualifiedName: TM.EServerType
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.TMPacketSignature.Signature(TM.EServerType)
        name: Signature
        nameWithType: TMPacketSignature.Signature
        qualifiedName: TM.TMPacketSignature.Signature
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TM.EServerType
        name: EServerType
        nameWithType: EServerType
        qualifiedName: TM.EServerType
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:TM.TMPacketSignature.Signature(TM.EServerType)
  TM.TMPacketSignature:
    name:
      CSharp:
      - id: TM.TMPacketSignature
        name: TMPacketSignature
        nameWithType: TMPacketSignature
        qualifiedName: TM.TMPacketSignature
      VB:
      - id: TM.TMPacketSignature
        name: TMPacketSignature
        nameWithType: TMPacketSignature
        qualifiedName: TM.TMPacketSignature
    isDefinition: true
    parent: TM
    commentId: T:TM.TMPacketSignature
  TM.EServerType.TM.TMPacketSignature.Signature:
    name:
      CSharp:
      - id: TM.TMPacketSignature.Signature
        name: Signature
        nameWithType: TMPacketSignature.Signature
        qualifiedName: TM.TMPacketSignature.Signature
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TM.TMPacketSignature.Signature
        name: Signature
        nameWithType: TMPacketSignature.Signature
        qualifiedName: TM.TMPacketSignature.Signature
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: TM.TMPacketSignature.Signature(TM.EServerType)
    parent: TM.TMPacketSignature
    commentId: M:TM.TMPacketSignature.Signature(TM.EServerType)
  TM.EComPortErr:
    name:
      CSharp:
      - id: TM.EComPortErr
        name: EComPortErr
        nameWithType: EComPortErr
        qualifiedName: TM.EComPortErr
      VB:
      - id: TM.EComPortErr
        name: EComPortErr
        nameWithType: EComPortErr
        qualifiedName: TM.EComPortErr
    isDefinition: true
    parent: TM
    commentId: T:TM.EComPortErr
  TM.EControlType:
    name:
      CSharp:
      - id: TM.EControlType
        name: EControlType
        nameWithType: EControlType
        qualifiedName: TM.EControlType
      VB:
      - id: TM.EControlType
        name: EControlType
        nameWithType: EControlType
        qualifiedName: TM.EControlType
    isDefinition: true
    parent: TM
    commentId: T:TM.EControlType
  TM.EDeviceType:
    name:
      CSharp:
      - id: TM.EDeviceType
        name: EDeviceType
        nameWithType: EDeviceType
        qualifiedName: TM.EDeviceType
      VB:
      - id: TM.EDeviceType
        name: EDeviceType
        nameWithType: EDeviceType
        qualifiedName: TM.EDeviceType
    isDefinition: true
    parent: TM
    commentId: T:TM.EDeviceType
  TM.EServerConnectSignature:
    name:
      CSharp:
      - id: TM.EServerConnectSignature
        name: EServerConnectSignature
        nameWithType: EServerConnectSignature
        qualifiedName: TM.EServerConnectSignature
      VB:
      - id: TM.EServerConnectSignature
        name: EServerConnectSignature
        nameWithType: EServerConnectSignature
        qualifiedName: TM.EServerConnectSignature
    isDefinition: true
    parent: TM
    commentId: T:TM.EServerConnectSignature
  TM.TMPacketSignature._ACC*:
    name:
      CSharp:
      - id: TM.TMPacketSignature._ACC*
        name: _ACC
        nameWithType: TMPacketSignature._ACC
        qualifiedName: TM.TMPacketSignature._ACC
      VB:
      - id: TM.TMPacketSignature._ACC*
        name: _ACC
        nameWithType: TMPacketSignature._ACC
        qualifiedName: TM.TMPacketSignature._ACC
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature._ACC
  TM.TMPacketSignature._ASH*:
    name:
      CSharp:
      - id: TM.TMPacketSignature._ASH*
        name: _ASH
        nameWithType: TMPacketSignature._ASH
        qualifiedName: TM.TMPacketSignature._ASH
      VB:
      - id: TM.TMPacketSignature._ASH*
        name: _ASH
        nameWithType: TMPacketSignature._ASH
        qualifiedName: TM.TMPacketSignature._ASH
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature._ASH
  TM.TMPacketSignature._PFS*:
    name:
      CSharp:
      - id: TM.TMPacketSignature._PFS*
        name: _PFS
        nameWithType: TMPacketSignature._PFS
        qualifiedName: TM.TMPacketSignature._PFS
      VB:
      - id: TM.TMPacketSignature._PFS*
        name: _PFS
        nameWithType: TMPacketSignature._PFS
        qualifiedName: TM.TMPacketSignature._PFS
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature._PFS
  TM.TMPacketSignature._TML*:
    name:
      CSharp:
      - id: TM.TMPacketSignature._TML*
        name: _TML
        nameWithType: TMPacketSignature._TML
        qualifiedName: TM.TMPacketSignature._TML
      VB:
      - id: TM.TMPacketSignature._TML*
        name: _TML
        nameWithType: TMPacketSignature._TML
        qualifiedName: TM.TMPacketSignature._TML
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature._TML
  TM.TMPacketSignature.ADDA*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.ADDA*
        name: ADDA
        nameWithType: TMPacketSignature.ADDA
        qualifiedName: TM.TMPacketSignature.ADDA
      VB:
      - id: TM.TMPacketSignature.ADDA*
        name: ADDA
        nameWithType: TMPacketSignature.ADDA
        qualifiedName: TM.TMPacketSignature.ADDA
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.ADDA
  TM.TMPacketSignature.ANCS*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.ANCS*
        name: ANCS
        nameWithType: TMPacketSignature.ANCS
        qualifiedName: TM.TMPacketSignature.ANCS
      VB:
      - id: TM.TMPacketSignature.ANCS*
        name: ANCS
        nameWithType: TMPacketSignature.ANCS
        qualifiedName: TM.TMPacketSignature.ANCS
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.ANCS
  TM.TMPacketSignature.CAMS*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.CAMS*
        name: CAMS
        nameWithType: TMPacketSignature.CAMS
        qualifiedName: TM.TMPacketSignature.CAMS
      VB:
      - id: TM.TMPacketSignature.CAMS*
        name: CAMS
        nameWithType: TMPacketSignature.CAMS
        qualifiedName: TM.TMPacketSignature.CAMS
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.CAMS
  TM.TMPacketSignature.ECSv*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.ECSv*
        name: ECSv
        nameWithType: TMPacketSignature.ECSv
        qualifiedName: TM.TMPacketSignature.ECSv
      VB:
      - id: TM.TMPacketSignature.ECSv*
        name: ECSv
        nameWithType: TMPacketSignature.ECSv
        qualifiedName: TM.TMPacketSignature.ECSv
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.ECSv
  TM.TMPacketSignature.MCSv*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.MCSv*
        name: MCSv
        nameWithType: TMPacketSignature.MCSv
        qualifiedName: TM.TMPacketSignature.MCSv
      VB:
      - id: TM.TMPacketSignature.MCSv*
        name: MCSv
        nameWithType: TMPacketSignature.MCSv
        qualifiedName: TM.TMPacketSignature.MCSv
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.MCSv
  TM.TMPacketSignature.MCTL*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.MCTL*
        name: MCTL
        nameWithType: TMPacketSignature.MCTL
        qualifiedName: TM.TMPacketSignature.MCTL
      VB:
      - id: TM.TMPacketSignature.MCTL*
        name: MCTL
        nameWithType: TMPacketSignature.MCTL
        qualifiedName: TM.TMPacketSignature.MCTL
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.MCTL
  TM.TMPacketSignature.TM_C*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.TM_C*
        name: TM_C
        nameWithType: TMPacketSignature.TM_C
        qualifiedName: TM.TMPacketSignature.TM_C
      VB:
      - id: TM.TMPacketSignature.TM_C*
        name: TM_C
        nameWithType: TMPacketSignature.TM_C
        qualifiedName: TM.TMPacketSignature.TM_C
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.TM_C
  TM.TMPacketSignature.TMCP*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.TMCP*
        name: TMCP
        nameWithType: TMPacketSignature.TMCP
        qualifiedName: TM.TMPacketSignature.TMCP
      VB:
      - id: TM.TMPacketSignature.TMCP*
        name: TMCP
        nameWithType: TMPacketSignature.TMCP
        qualifiedName: TM.TMPacketSignature.TMCP
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.TMCP
  TM.TMPacketSignature.TMGT*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.TMGT*
        name: TMGT
        nameWithType: TMPacketSignature.TMGT
        qualifiedName: TM.TMPacketSignature.TMGT
      VB:
      - id: TM.TMPacketSignature.TMGT*
        name: TMGT
        nameWithType: TMPacketSignature.TMGT
        qualifiedName: TM.TMPacketSignature.TMGT
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.TMGT
  TM.TMPacketSignature.TMNS*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.TMNS*
        name: TMNS
        nameWithType: TMPacketSignature.TMNS
        qualifiedName: TM.TMPacketSignature.TMNS
      VB:
      - id: TM.TMPacketSignature.TMNS*
        name: TMNS
        nameWithType: TMPacketSignature.TMNS
        qualifiedName: TM.TMPacketSignature.TMNS
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.TMNS
  TM.TMPacketSignature.TMPR*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.TMPR*
        name: TMPR
        nameWithType: TMPacketSignature.TMPR
        qualifiedName: TM.TMPacketSignature.TMPR
      VB:
      - id: TM.TMPacketSignature.TMPR*
        name: TMPR
        nameWithType: TMPacketSignature.TMPR
        qualifiedName: TM.TMPacketSignature.TMPR
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.TMPR
  TM.TMPacketSignature.TMRT*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.TMRT*
        name: TMRT
        nameWithType: TMPacketSignature.TMRT
        qualifiedName: TM.TMPacketSignature.TMRT
      VB:
      - id: TM.TMPacketSignature.TMRT*
        name: TMRT
        nameWithType: TMPacketSignature.TMRT
        qualifiedName: TM.TMPacketSignature.TMRT
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.TMRT
  TM.TMPacketSignature.UNKNOWN*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.UNKNOWN*
        name: UNKNOWN
        nameWithType: TMPacketSignature.UNKNOWN
        qualifiedName: TM.TMPacketSignature.UNKNOWN
      VB:
      - id: TM.TMPacketSignature.UNKNOWN*
        name: UNKNOWN
        nameWithType: TMPacketSignature.UNKNOWN
        qualifiedName: TM.TMPacketSignature.UNKNOWN
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.UNKNOWN
  TM.TMPacketSignature.XRay*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.XRay*
        name: XRay
        nameWithType: TMPacketSignature.XRay
        qualifiedName: TM.TMPacketSignature.XRay
      VB:
      - id: TM.TMPacketSignature.XRay*
        name: XRay
        nameWithType: TMPacketSignature.XRay
        qualifiedName: TM.TMPacketSignature.XRay
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.XRay
  TM.TMPacketSignature.ServerType*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.ServerType*
        name: ServerType
        nameWithType: TMPacketSignature.ServerType
        qualifiedName: TM.TMPacketSignature.ServerType
      VB:
      - id: TM.TMPacketSignature.ServerType*
        name: ServerType
        nameWithType: TMPacketSignature.ServerType
        qualifiedName: TM.TMPacketSignature.ServerType
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.ServerType
  TM.TMPacketSignature.Signature*:
    name:
      CSharp:
      - id: TM.TMPacketSignature.Signature*
        name: Signature
        nameWithType: TMPacketSignature.Signature
        qualifiedName: TM.TMPacketSignature.Signature
      VB:
      - id: TM.TMPacketSignature.Signature*
        name: Signature
        nameWithType: TMPacketSignature.Signature
        qualifiedName: TM.TMPacketSignature.Signature
    isDefinition: true
    commentId: Overload:TM.TMPacketSignature.Signature
  System.Management.Automation.PSCmdlet:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet
        name: PSCmdlet
        nameWithType: PSCmdlet
        qualifiedName: System.Management.Automation.PSCmdlet
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet
        name: PSCmdlet
        nameWithType: PSCmdlet
        qualifiedName: System.Management.Automation.PSCmdlet
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.PSCmdlet
  System.Management.Automation:
    name:
      CSharp:
      - name: System.Management.Automation
        nameWithType: System.Management.Automation
        qualifiedName: System.Management.Automation
        isExternal: true
      VB:
      - name: System.Management.Automation
        nameWithType: System.Management.Automation
        qualifiedName: System.Management.Automation
    isDefinition: true
    commentId: N:System.Management.Automation
  System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
        name: CurrentProviderLocation
        nameWithType: PSCmdlet.CurrentProviderLocation
        qualifiedName: System.Management.Automation.PSCmdlet.CurrentProviderLocation
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
        name: CurrentProviderLocation
        nameWithType: PSCmdlet.CurrentProviderLocation
        qualifiedName: System.Management.Automation.PSCmdlet.CurrentProviderLocation
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: M:System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
  System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
        name: GetUnresolvedProviderPathFromPSPath
        nameWithType: PSCmdlet.GetUnresolvedProviderPathFromPSPath
        qualifiedName: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
        name: GetUnresolvedProviderPathFromPSPath
        nameWithType: PSCmdlet.GetUnresolvedProviderPathFromPSPath
        qualifiedName: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: M:System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
  ? System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
  : name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
        name: GetResolvedProviderPathFromPSPath
        nameWithType: PSCmdlet.GetResolvedProviderPathFromPSPath
        qualifiedName: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Management.Automation.ProviderInfo
        name: ProviderInfo
        nameWithType: ProviderInfo
        qualifiedName: System.Management.Automation.ProviderInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
        name: GetResolvedProviderPathFromPSPath
        nameWithType: PSCmdlet.GetResolvedProviderPathFromPSPath
        qualifiedName: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Management.Automation.ProviderInfo
        name: ProviderInfo
        nameWithType: ProviderInfo
        qualifiedName: System.Management.Automation.ProviderInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: M:System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
  System.Management.Automation.PSCmdlet.GetVariableValue(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
        name: GetVariableValue
        nameWithType: PSCmdlet.GetVariableValue
        qualifiedName: System.Management.Automation.PSCmdlet.GetVariableValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
        name: GetVariableValue
        nameWithType: PSCmdlet.GetVariableValue
        qualifiedName: System.Management.Automation.PSCmdlet.GetVariableValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: M:System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
  System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object):
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
        name: GetVariableValue
        nameWithType: PSCmdlet.GetVariableValue
        qualifiedName: System.Management.Automation.PSCmdlet.GetVariableValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
        name: GetVariableValue
        nameWithType: PSCmdlet.GetVariableValue
        qualifiedName: System.Management.Automation.PSCmdlet.GetVariableValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: M:System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
  System.Management.Automation.PSCmdlet.ParameterSetName:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.ParameterSetName
        name: ParameterSetName
        nameWithType: PSCmdlet.ParameterSetName
        qualifiedName: System.Management.Automation.PSCmdlet.ParameterSetName
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.ParameterSetName
        name: ParameterSetName
        nameWithType: PSCmdlet.ParameterSetName
        qualifiedName: System.Management.Automation.PSCmdlet.ParameterSetName
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.ParameterSetName
  System.Management.Automation.PSCmdlet.MyInvocation:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.MyInvocation
        name: MyInvocation
        nameWithType: PSCmdlet.MyInvocation
        qualifiedName: System.Management.Automation.PSCmdlet.MyInvocation
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.MyInvocation
        name: MyInvocation
        nameWithType: PSCmdlet.MyInvocation
        qualifiedName: System.Management.Automation.PSCmdlet.MyInvocation
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.MyInvocation
  System.Management.Automation.PSCmdlet.InvokeCommand:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.InvokeCommand
        name: InvokeCommand
        nameWithType: PSCmdlet.InvokeCommand
        qualifiedName: System.Management.Automation.PSCmdlet.InvokeCommand
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.InvokeCommand
        name: InvokeCommand
        nameWithType: PSCmdlet.InvokeCommand
        qualifiedName: System.Management.Automation.PSCmdlet.InvokeCommand
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.InvokeCommand
  System.Management.Automation.PSCmdlet.Host:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.Host
        name: Host
        nameWithType: PSCmdlet.Host
        qualifiedName: System.Management.Automation.PSCmdlet.Host
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.Host
        name: Host
        nameWithType: PSCmdlet.Host
        qualifiedName: System.Management.Automation.PSCmdlet.Host
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.Host
  System.Management.Automation.PSCmdlet.SessionState:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.SessionState
        name: SessionState
        nameWithType: PSCmdlet.SessionState
        qualifiedName: System.Management.Automation.PSCmdlet.SessionState
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.SessionState
        name: SessionState
        nameWithType: PSCmdlet.SessionState
        qualifiedName: System.Management.Automation.PSCmdlet.SessionState
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.SessionState
  System.Management.Automation.PSCmdlet.Events:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.Events
        name: Events
        nameWithType: PSCmdlet.Events
        qualifiedName: System.Management.Automation.PSCmdlet.Events
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.Events
        name: Events
        nameWithType: PSCmdlet.Events
        qualifiedName: System.Management.Automation.PSCmdlet.Events
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.Events
  System.Management.Automation.PSCmdlet.JobRepository:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.JobRepository
        name: JobRepository
        nameWithType: PSCmdlet.JobRepository
        qualifiedName: System.Management.Automation.PSCmdlet.JobRepository
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.JobRepository
        name: JobRepository
        nameWithType: PSCmdlet.JobRepository
        qualifiedName: System.Management.Automation.PSCmdlet.JobRepository
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.JobRepository
  System.Management.Automation.PSCmdlet.InvokeProvider:
    name:
      CSharp:
      - id: System.Management.Automation.PSCmdlet.InvokeProvider
        name: InvokeProvider
        nameWithType: PSCmdlet.InvokeProvider
        qualifiedName: System.Management.Automation.PSCmdlet.InvokeProvider
        isExternal: true
      VB:
      - id: System.Management.Automation.PSCmdlet.InvokeProvider
        name: InvokeProvider
        nameWithType: PSCmdlet.InvokeProvider
        qualifiedName: System.Management.Automation.PSCmdlet.InvokeProvider
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.PSCmdlet
    commentId: P:System.Management.Automation.PSCmdlet.InvokeProvider
  System.Management.Automation.Cmdlet:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet
        name: Cmdlet
        nameWithType: Cmdlet
        qualifiedName: System.Management.Automation.Cmdlet
        isExternal: true
      VB:
      - id: System.Management.Automation.Cmdlet
        name: Cmdlet
        nameWithType: Cmdlet
        qualifiedName: System.Management.Automation.Cmdlet
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.Cmdlet
  System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
        name: GetResourceString
        nameWithType: Cmdlet.GetResourceString
        qualifiedName: System.Management.Automation.Cmdlet.GetResourceString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
        name: GetResourceString
        nameWithType: Cmdlet.GetResourceString
        qualifiedName: System.Management.Automation.Cmdlet.GetResourceString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
  System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
        name: WriteError
        nameWithType: Cmdlet.WriteError
        qualifiedName: System.Management.Automation.Cmdlet.WriteError
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Management.Automation.ErrorRecord
        name: ErrorRecord
        nameWithType: ErrorRecord
        qualifiedName: System.Management.Automation.ErrorRecord
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
        name: WriteError
        nameWithType: Cmdlet.WriteError
        qualifiedName: System.Management.Automation.Cmdlet.WriteError
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Management.Automation.ErrorRecord
        name: ErrorRecord
        nameWithType: ErrorRecord
        qualifiedName: System.Management.Automation.ErrorRecord
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
  System.Management.Automation.Cmdlet.WriteObject(System.Object):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteObject(System.Object)
        name: WriteObject
        nameWithType: Cmdlet.WriteObject
        qualifiedName: System.Management.Automation.Cmdlet.WriteObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteObject(System.Object)
        name: WriteObject
        nameWithType: Cmdlet.WriteObject
        qualifiedName: System.Management.Automation.Cmdlet.WriteObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteObject(System.Object)
  System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
        name: WriteObject
        nameWithType: Cmdlet.WriteObject
        qualifiedName: System.Management.Automation.Cmdlet.WriteObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
        name: WriteObject
        nameWithType: Cmdlet.WriteObject
        qualifiedName: System.Management.Automation.Cmdlet.WriteObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
  System.Management.Automation.Cmdlet.WriteVerbose(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteVerbose(System.String)
        name: WriteVerbose
        nameWithType: Cmdlet.WriteVerbose
        qualifiedName: System.Management.Automation.Cmdlet.WriteVerbose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteVerbose(System.String)
        name: WriteVerbose
        nameWithType: Cmdlet.WriteVerbose
        qualifiedName: System.Management.Automation.Cmdlet.WriteVerbose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteVerbose(System.String)
  System.Management.Automation.Cmdlet.WriteWarning(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteWarning(System.String)
        name: WriteWarning
        nameWithType: Cmdlet.WriteWarning
        qualifiedName: System.Management.Automation.Cmdlet.WriteWarning
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteWarning(System.String)
        name: WriteWarning
        nameWithType: Cmdlet.WriteWarning
        qualifiedName: System.Management.Automation.Cmdlet.WriteWarning
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteWarning(System.String)
  System.Management.Automation.Cmdlet.WriteCommandDetail(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
        name: WriteCommandDetail
        nameWithType: Cmdlet.WriteCommandDetail
        qualifiedName: System.Management.Automation.Cmdlet.WriteCommandDetail
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
        name: WriteCommandDetail
        nameWithType: Cmdlet.WriteCommandDetail
        qualifiedName: System.Management.Automation.Cmdlet.WriteCommandDetail
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
  System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
        name: WriteProgress
        nameWithType: Cmdlet.WriteProgress
        qualifiedName: System.Management.Automation.Cmdlet.WriteProgress
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Management.Automation.ProgressRecord
        name: ProgressRecord
        nameWithType: ProgressRecord
        qualifiedName: System.Management.Automation.ProgressRecord
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
        name: WriteProgress
        nameWithType: Cmdlet.WriteProgress
        qualifiedName: System.Management.Automation.Cmdlet.WriteProgress
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Management.Automation.ProgressRecord
        name: ProgressRecord
        nameWithType: ProgressRecord
        qualifiedName: System.Management.Automation.ProgressRecord
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
  System.Management.Automation.Cmdlet.WriteDebug(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.WriteDebug(System.String)
        name: WriteDebug
        nameWithType: Cmdlet.WriteDebug
        qualifiedName: System.Management.Automation.Cmdlet.WriteDebug
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.WriteDebug(System.String)
        name: WriteDebug
        nameWithType: Cmdlet.WriteDebug
        qualifiedName: System.Management.Automation.Cmdlet.WriteDebug
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.WriteDebug(System.String)
  System.Management.Automation.Cmdlet.ShouldProcess(System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String)
  System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
  System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
  ? System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
  : name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Management.Automation.ShouldProcessReason
        name: ShouldProcessReason
        nameWithType: ShouldProcessReason
        qualifiedName: System.Management.Automation.ShouldProcessReason
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
        name: ShouldProcess
        nameWithType: Cmdlet.ShouldProcess
        qualifiedName: System.Management.Automation.Cmdlet.ShouldProcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Management.Automation.ShouldProcessReason
        name: ShouldProcessReason
        nameWithType: ShouldProcessReason
        qualifiedName: System.Management.Automation.ShouldProcessReason
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
  System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
        name: ShouldContinue
        nameWithType: Cmdlet.ShouldContinue
        qualifiedName: System.Management.Automation.Cmdlet.ShouldContinue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
        name: ShouldContinue
        nameWithType: Cmdlet.ShouldContinue
        qualifiedName: System.Management.Automation.Cmdlet.ShouldContinue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
  System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
        name: ShouldContinue
        nameWithType: Cmdlet.ShouldContinue
        qualifiedName: System.Management.Automation.Cmdlet.ShouldContinue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
        name: ShouldContinue
        nameWithType: Cmdlet.ShouldContinue
        qualifiedName: System.Management.Automation.Cmdlet.ShouldContinue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
  System.Management.Automation.Cmdlet.Invoke:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.Invoke
        name: Invoke
        nameWithType: Cmdlet.Invoke
        qualifiedName: System.Management.Automation.Cmdlet.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.Invoke
        name: Invoke
        nameWithType: Cmdlet.Invoke
        qualifiedName: System.Management.Automation.Cmdlet.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.Invoke
  System.Management.Automation.Cmdlet.Invoke``1:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.Invoke``1
        name: Invoke<T>
        nameWithType: Cmdlet.Invoke<T>
        qualifiedName: System.Management.Automation.Cmdlet.Invoke<T>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.Invoke``1
        name: Invoke(Of T)
        nameWithType: Cmdlet.Invoke(Of T)
        qualifiedName: System.Management.Automation.Cmdlet.Invoke(Of T)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.Invoke``1
  System.Management.Automation.Cmdlet.TransactionAvailable:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.TransactionAvailable
        name: TransactionAvailable
        nameWithType: Cmdlet.TransactionAvailable
        qualifiedName: System.Management.Automation.Cmdlet.TransactionAvailable
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.TransactionAvailable
        name: TransactionAvailable
        nameWithType: Cmdlet.TransactionAvailable
        qualifiedName: System.Management.Automation.Cmdlet.TransactionAvailable
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.TransactionAvailable
  System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord):
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
        name: ThrowTerminatingError
        nameWithType: Cmdlet.ThrowTerminatingError
        qualifiedName: System.Management.Automation.Cmdlet.ThrowTerminatingError
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Management.Automation.ErrorRecord
        name: ErrorRecord
        nameWithType: ErrorRecord
        qualifiedName: System.Management.Automation.ErrorRecord
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
        name: ThrowTerminatingError
        nameWithType: Cmdlet.ThrowTerminatingError
        qualifiedName: System.Management.Automation.Cmdlet.ThrowTerminatingError
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Management.Automation.ErrorRecord
        name: ErrorRecord
        nameWithType: ErrorRecord
        qualifiedName: System.Management.Automation.ErrorRecord
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
  System.Management.Automation.Cmdlet.BeginProcessing:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.BeginProcessing
        name: BeginProcessing
        nameWithType: Cmdlet.BeginProcessing
        qualifiedName: System.Management.Automation.Cmdlet.BeginProcessing
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.BeginProcessing
        name: BeginProcessing
        nameWithType: Cmdlet.BeginProcessing
        qualifiedName: System.Management.Automation.Cmdlet.BeginProcessing
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.BeginProcessing
  System.Management.Automation.Cmdlet.EndProcessing:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.EndProcessing
        name: EndProcessing
        nameWithType: Cmdlet.EndProcessing
        qualifiedName: System.Management.Automation.Cmdlet.EndProcessing
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.EndProcessing
        name: EndProcessing
        nameWithType: Cmdlet.EndProcessing
        qualifiedName: System.Management.Automation.Cmdlet.EndProcessing
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.EndProcessing
  System.Management.Automation.Cmdlet.StopProcessing:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.StopProcessing
        name: StopProcessing
        nameWithType: Cmdlet.StopProcessing
        qualifiedName: System.Management.Automation.Cmdlet.StopProcessing
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.StopProcessing
        name: StopProcessing
        nameWithType: Cmdlet.StopProcessing
        qualifiedName: System.Management.Automation.Cmdlet.StopProcessing
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.StopProcessing
  System.Management.Automation.Cmdlet.Stopping:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.Stopping
        name: Stopping
        nameWithType: Cmdlet.Stopping
        qualifiedName: System.Management.Automation.Cmdlet.Stopping
        isExternal: true
      VB:
      - id: System.Management.Automation.Cmdlet.Stopping
        name: Stopping
        nameWithType: Cmdlet.Stopping
        qualifiedName: System.Management.Automation.Cmdlet.Stopping
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: P:System.Management.Automation.Cmdlet.Stopping
  System.Management.Automation.Cmdlet.CommandRuntime:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.CommandRuntime
        name: CommandRuntime
        nameWithType: Cmdlet.CommandRuntime
        qualifiedName: System.Management.Automation.Cmdlet.CommandRuntime
        isExternal: true
      VB:
      - id: System.Management.Automation.Cmdlet.CommandRuntime
        name: CommandRuntime
        nameWithType: Cmdlet.CommandRuntime
        qualifiedName: System.Management.Automation.Cmdlet.CommandRuntime
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: P:System.Management.Automation.Cmdlet.CommandRuntime
  System.Management.Automation.Cmdlet.CurrentPSTransaction:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.CurrentPSTransaction
        name: CurrentPSTransaction
        nameWithType: Cmdlet.CurrentPSTransaction
        qualifiedName: System.Management.Automation.Cmdlet.CurrentPSTransaction
        isExternal: true
      VB:
      - id: System.Management.Automation.Cmdlet.CurrentPSTransaction
        name: CurrentPSTransaction
        nameWithType: Cmdlet.CurrentPSTransaction
        qualifiedName: System.Management.Automation.Cmdlet.CurrentPSTransaction
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: P:System.Management.Automation.Cmdlet.CurrentPSTransaction
  System.Management.Automation.Internal:
    name:
      CSharp:
      - name: System.Management.Automation.Internal
        nameWithType: System.Management.Automation.Internal
        qualifiedName: System.Management.Automation.Internal
        isExternal: true
      VB:
      - name: System.Management.Automation.Internal
        nameWithType: System.Management.Automation.Internal
        qualifiedName: System.Management.Automation.Internal
    isDefinition: true
    commentId: N:System.Management.Automation.Internal
  System.Management.Automation.Internal.InternalCommand:
    name:
      CSharp:
      - id: System.Management.Automation.Internal.InternalCommand
        name: InternalCommand
        nameWithType: InternalCommand
        qualifiedName: System.Management.Automation.Internal.InternalCommand
        isExternal: true
      VB:
      - id: System.Management.Automation.Internal.InternalCommand
        name: InternalCommand
        nameWithType: InternalCommand
        qualifiedName: System.Management.Automation.Internal.InternalCommand
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.Internal
    commentId: T:System.Management.Automation.Internal.InternalCommand
  System.Management.Automation.Internal.InternalCommand.CommandOrigin:
    name:
      CSharp:
      - id: System.Management.Automation.Internal.InternalCommand.CommandOrigin
        name: CommandOrigin
        nameWithType: InternalCommand.CommandOrigin
        qualifiedName: System.Management.Automation.Internal.InternalCommand.CommandOrigin
        isExternal: true
      VB:
      - id: System.Management.Automation.Internal.InternalCommand.CommandOrigin
        name: CommandOrigin
        nameWithType: InternalCommand.CommandOrigin
        qualifiedName: System.Management.Automation.Internal.InternalCommand.CommandOrigin
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation.Internal.InternalCommand
    commentId: P:System.Management.Automation.Internal.InternalCommand.CommandOrigin
  TMCmdLet.PlanCmdlet.IpAddress*:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.IpAddress*
        name: IpAddress
        nameWithType: PlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.PlanCmdlet.IpAddress
      VB:
      - id: TMCmdLet.PlanCmdlet.IpAddress*
        name: IpAddress
        nameWithType: PlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.PlanCmdlet.IpAddress
    isDefinition: true
    commentId: Overload:TMCmdLet.PlanCmdlet.IpAddress
  System.Management.Automation.ParameterAttribute:
    name:
      CSharp:
      - id: System.Management.Automation.ParameterAttribute
        name: ParameterAttribute
        nameWithType: ParameterAttribute
        qualifiedName: System.Management.Automation.ParameterAttribute
        isExternal: true
      VB:
      - id: System.Management.Automation.ParameterAttribute
        name: ParameterAttribute
        nameWithType: ParameterAttribute
        qualifiedName: System.Management.Automation.ParameterAttribute
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.ParameterAttribute
  System.Management.Automation.ParameterAttribute.#ctor:
    name:
      CSharp:
      - id: System.Management.Automation.ParameterAttribute.#ctor
        name: ParameterAttribute
        nameWithType: ParameterAttribute.ParameterAttribute
        qualifiedName: System.Management.Automation.ParameterAttribute.ParameterAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.ParameterAttribute.#ctor
        name: ParameterAttribute
        nameWithType: ParameterAttribute.ParameterAttribute
        qualifiedName: System.Management.Automation.ParameterAttribute.ParameterAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.ParameterAttribute
    commentId: M:System.Management.Automation.ParameterAttribute.#ctor
  System.Management.Automation.AliasAttribute:
    name:
      CSharp:
      - id: System.Management.Automation.AliasAttribute
        name: AliasAttribute
        nameWithType: AliasAttribute
        qualifiedName: System.Management.Automation.AliasAttribute
        isExternal: true
      VB:
      - id: System.Management.Automation.AliasAttribute
        name: AliasAttribute
        nameWithType: AliasAttribute
        qualifiedName: System.Management.Automation.AliasAttribute
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.AliasAttribute
  System.Management.Automation.AliasAttribute.#ctor(System.String[]):
    name:
      CSharp:
      - id: System.Management.Automation.AliasAttribute.#ctor(System.String[])
        name: AliasAttribute
        nameWithType: AliasAttribute.AliasAttribute
        qualifiedName: System.Management.Automation.AliasAttribute.AliasAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.AliasAttribute.#ctor(System.String[])
        name: AliasAttribute
        nameWithType: AliasAttribute.AliasAttribute
        qualifiedName: System.Management.Automation.AliasAttribute.AliasAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.AliasAttribute
    commentId: M:System.Management.Automation.AliasAttribute.#ctor(System.String[])
  TMCmdLet.PlanCmdlet.Port*:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.Port*
        name: Port
        nameWithType: PlanCmdlet.Port
        qualifiedName: TMCmdLet.PlanCmdlet.Port
      VB:
      - id: TMCmdLet.PlanCmdlet.Port*
        name: Port
        nameWithType: PlanCmdlet.Port
        qualifiedName: TMCmdLet.PlanCmdlet.Port
    isDefinition: true
    commentId: Overload:TMCmdLet.PlanCmdlet.Port
  TMCmdLet.PlanCmdlet.OK*:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.OK*
        name: OK
        nameWithType: PlanCmdlet.OK
        qualifiedName: TMCmdLet.PlanCmdlet.OK
      VB:
      - id: TMCmdLet.PlanCmdlet.OK*
        name: OK
        nameWithType: PlanCmdlet.OK
        qualifiedName: TMCmdLet.PlanCmdlet.OK
    isDefinition: true
    commentId: Overload:TMCmdLet.PlanCmdlet.OK
  System.Management.Automation.Cmdlet.ProcessRecord:
    name:
      CSharp:
      - id: System.Management.Automation.Cmdlet.ProcessRecord
        name: ProcessRecord
        nameWithType: Cmdlet.ProcessRecord
        qualifiedName: System.Management.Automation.Cmdlet.ProcessRecord
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.Cmdlet.ProcessRecord
        name: ProcessRecord
        nameWithType: Cmdlet.ProcessRecord
        qualifiedName: System.Management.Automation.Cmdlet.ProcessRecord
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.Cmdlet
    commentId: M:System.Management.Automation.Cmdlet.ProcessRecord
  TMCmdLet.PlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: PlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.PlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.PlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: PlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.PlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.PlanCmdlet.ProcessRecord
  TMCmdLet.PlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet
        name: PlanCmdlet
        nameWithType: PlanCmdlet
        qualifiedName: TMCmdLet.PlanCmdlet
      VB:
      - id: TMCmdLet.PlanCmdlet
        name: PlanCmdlet
        nameWithType: PlanCmdlet
        qualifiedName: TMCmdLet.PlanCmdlet
    isDefinition: true
    parent: TMCmdLet
    commentId: T:TMCmdLet.PlanCmdlet
  TMCmdLet.GetPlanCmdlet.Path*:
    name:
      CSharp:
      - id: TMCmdLet.GetPlanCmdlet.Path*
        name: Path
        nameWithType: GetPlanCmdlet.Path
        qualifiedName: TMCmdLet.GetPlanCmdlet.Path
      VB:
      - id: TMCmdLet.GetPlanCmdlet.Path*
        name: Path
        nameWithType: GetPlanCmdlet.Path
        qualifiedName: TMCmdLet.GetPlanCmdlet.Path
    isDefinition: true
    commentId: Overload:TMCmdLet.GetPlanCmdlet.Path
  System.Management.Automation.ValidateNotNullOrEmptyAttribute:
    name:
      CSharp:
      - id: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        name: ValidateNotNullOrEmptyAttribute
        nameWithType: ValidateNotNullOrEmptyAttribute
        qualifiedName: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        isExternal: true
      VB:
      - id: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        name: ValidateNotNullOrEmptyAttribute
        nameWithType: ValidateNotNullOrEmptyAttribute
        qualifiedName: System.Management.Automation.ValidateNotNullOrEmptyAttribute
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.ValidateNotNullOrEmptyAttribute
  System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor:
    name:
      CSharp:
      - id: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        name: ValidateNotNullOrEmptyAttribute
        nameWithType: ValidateNotNullOrEmptyAttribute.ValidateNotNullOrEmptyAttribute
        qualifiedName: System.Management.Automation.ValidateNotNullOrEmptyAttribute.ValidateNotNullOrEmptyAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
        name: ValidateNotNullOrEmptyAttribute
        nameWithType: ValidateNotNullOrEmptyAttribute.ValidateNotNullOrEmptyAttribute
        qualifiedName: System.Management.Automation.ValidateNotNullOrEmptyAttribute.ValidateNotNullOrEmptyAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.ValidateNotNullOrEmptyAttribute
    commentId: M:System.Management.Automation.ValidateNotNullOrEmptyAttribute.#ctor
  TMCmdLet.GetPlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.GetPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: GetPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.GetPlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.GetPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: GetPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.GetPlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.GetPlanCmdlet.ProcessRecord
  TMCmdLet.GetPlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.GetPlanCmdlet
        name: GetPlanCmdlet
        nameWithType: GetPlanCmdlet
        qualifiedName: TMCmdLet.GetPlanCmdlet
      VB:
      - id: TMCmdLet.GetPlanCmdlet
        name: GetPlanCmdlet
        nameWithType: GetPlanCmdlet
        qualifiedName: TMCmdLet.GetPlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.GetPlanCmdlet
  System.Management.Automation.CmdletAttribute:
    name:
      CSharp:
      - id: System.Management.Automation.CmdletAttribute
        name: CmdletAttribute
        nameWithType: CmdletAttribute
        qualifiedName: System.Management.Automation.CmdletAttribute
        isExternal: true
      VB:
      - id: System.Management.Automation.CmdletAttribute
        name: CmdletAttribute
        nameWithType: CmdletAttribute
        qualifiedName: System.Management.Automation.CmdletAttribute
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.CmdletAttribute
  System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String):
    name:
      CSharp:
      - id: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
        name: CmdletAttribute
        nameWithType: CmdletAttribute.CmdletAttribute
        qualifiedName: System.Management.Automation.CmdletAttribute.CmdletAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
        name: CmdletAttribute
        nameWithType: CmdletAttribute.CmdletAttribute
        qualifiedName: System.Management.Automation.CmdletAttribute.CmdletAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.CmdletAttribute
    commentId: M:System.Management.Automation.CmdletAttribute.#ctor(System.String,System.String)
  System.Management.Automation.OutputTypeAttribute:
    name:
      CSharp:
      - id: System.Management.Automation.OutputTypeAttribute
        name: OutputTypeAttribute
        nameWithType: OutputTypeAttribute
        qualifiedName: System.Management.Automation.OutputTypeAttribute
        isExternal: true
      VB:
      - id: System.Management.Automation.OutputTypeAttribute
        name: OutputTypeAttribute
        nameWithType: OutputTypeAttribute
        qualifiedName: System.Management.Automation.OutputTypeAttribute
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.OutputTypeAttribute
  System.Management.Automation.OutputTypeAttribute.#ctor(System.Type[]):
    name:
      CSharp:
      - id: System.Management.Automation.OutputTypeAttribute.#ctor(System.Type[])
        name: OutputTypeAttribute
        nameWithType: OutputTypeAttribute.OutputTypeAttribute
        qualifiedName: System.Management.Automation.OutputTypeAttribute.OutputTypeAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.OutputTypeAttribute.#ctor(System.Type[])
        name: OutputTypeAttribute
        nameWithType: OutputTypeAttribute.OutputTypeAttribute
        qualifiedName: System.Management.Automation.OutputTypeAttribute.OutputTypeAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.OutputTypeAttribute
    commentId: M:System.Management.Automation.OutputTypeAttribute.#ctor(System.Type[])
  TMCmdLet.InvokePlanCmdlet.Path*:
    name:
      CSharp:
      - id: TMCmdLet.InvokePlanCmdlet.Path*
        name: Path
        nameWithType: InvokePlanCmdlet.Path
        qualifiedName: TMCmdLet.InvokePlanCmdlet.Path
      VB:
      - id: TMCmdLet.InvokePlanCmdlet.Path*
        name: Path
        nameWithType: InvokePlanCmdlet.Path
        qualifiedName: TMCmdLet.InvokePlanCmdlet.Path
    isDefinition: true
    commentId: Overload:TMCmdLet.InvokePlanCmdlet.Path
  TMCmdLet.InvokePlanCmdlet.IpAddress*:
    name:
      CSharp:
      - id: TMCmdLet.InvokePlanCmdlet.IpAddress*
        name: IpAddress
        nameWithType: InvokePlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.InvokePlanCmdlet.IpAddress
      VB:
      - id: TMCmdLet.InvokePlanCmdlet.IpAddress*
        name: IpAddress
        nameWithType: InvokePlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.InvokePlanCmdlet.IpAddress
    isDefinition: true
    commentId: Overload:TMCmdLet.InvokePlanCmdlet.IpAddress
  TMCmdLet.InvokePlanCmdlet.Port*:
    name:
      CSharp:
      - id: TMCmdLet.InvokePlanCmdlet.Port*
        name: Port
        nameWithType: InvokePlanCmdlet.Port
        qualifiedName: TMCmdLet.InvokePlanCmdlet.Port
      VB:
      - id: TMCmdLet.InvokePlanCmdlet.Port*
        name: Port
        nameWithType: InvokePlanCmdlet.Port
        qualifiedName: TMCmdLet.InvokePlanCmdlet.Port
    isDefinition: true
    commentId: Overload:TMCmdLet.InvokePlanCmdlet.Port
  TMCmdLet.InvokePlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.InvokePlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: InvokePlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.InvokePlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.InvokePlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: InvokePlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.InvokePlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.InvokePlanCmdlet.ProcessRecord
  TMCmdLet.InvokePlanCmdlet.StopProcessing*:
    name:
      CSharp:
      - id: TMCmdLet.InvokePlanCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: InvokePlanCmdlet.StopProcessing
        qualifiedName: TMCmdLet.InvokePlanCmdlet.StopProcessing
      VB:
      - id: TMCmdLet.InvokePlanCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: InvokePlanCmdlet.StopProcessing
        qualifiedName: TMCmdLet.InvokePlanCmdlet.StopProcessing
    isDefinition: true
    commentId: Overload:TMCmdLet.InvokePlanCmdlet.StopProcessing
  TMCmdLet.InvokePlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.InvokePlanCmdlet
        name: InvokePlanCmdlet
        nameWithType: InvokePlanCmdlet
        qualifiedName: TMCmdLet.InvokePlanCmdlet
      VB:
      - id: TMCmdLet.InvokePlanCmdlet
        name: InvokePlanCmdlet
        nameWithType: InvokePlanCmdlet
        qualifiedName: TMCmdLet.InvokePlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.InvokePlanCmdlet
  TMCmdLet.SendPlanCmdlet.Input*:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet.Input*
        name: Input
        nameWithType: SendPlanCmdlet.Input
        qualifiedName: TMCmdLet.SendPlanCmdlet.Input
      VB:
      - id: TMCmdLet.SendPlanCmdlet.Input*
        name: Input
        nameWithType: SendPlanCmdlet.Input
        qualifiedName: TMCmdLet.SendPlanCmdlet.Input
    isDefinition: true
    commentId: Overload:TMCmdLet.SendPlanCmdlet.Input
  TMCmdLet.SendPlanCmdlet.IpAddress*:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet.IpAddress*
        name: IpAddress
        nameWithType: SendPlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.SendPlanCmdlet.IpAddress
      VB:
      - id: TMCmdLet.SendPlanCmdlet.IpAddress*
        name: IpAddress
        nameWithType: SendPlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.SendPlanCmdlet.IpAddress
    isDefinition: true
    commentId: Overload:TMCmdLet.SendPlanCmdlet.IpAddress
  TMCmdLet.SendPlanCmdlet.Port*:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet.Port*
        name: Port
        nameWithType: SendPlanCmdlet.Port
        qualifiedName: TMCmdLet.SendPlanCmdlet.Port
      VB:
      - id: TMCmdLet.SendPlanCmdlet.Port*
        name: Port
        nameWithType: SendPlanCmdlet.Port
        qualifiedName: TMCmdLet.SendPlanCmdlet.Port
    isDefinition: true
    commentId: Overload:TMCmdLet.SendPlanCmdlet.Port
  TMCmdLet.SendPlanCmdlet.EndProcessing*:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet.EndProcessing*
        name: EndProcessing
        nameWithType: SendPlanCmdlet.EndProcessing
        qualifiedName: TMCmdLet.SendPlanCmdlet.EndProcessing
      VB:
      - id: TMCmdLet.SendPlanCmdlet.EndProcessing*
        name: EndProcessing
        nameWithType: SendPlanCmdlet.EndProcessing
        qualifiedName: TMCmdLet.SendPlanCmdlet.EndProcessing
    isDefinition: true
    commentId: Overload:TMCmdLet.SendPlanCmdlet.EndProcessing
  TMCmdLet.SendPlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendPlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.SendPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendPlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.SendPlanCmdlet.ProcessRecord
  TMCmdLet.SendPlanCmdlet.StopProcessing*:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: SendPlanCmdlet.StopProcessing
        qualifiedName: TMCmdLet.SendPlanCmdlet.StopProcessing
      VB:
      - id: TMCmdLet.SendPlanCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: SendPlanCmdlet.StopProcessing
        qualifiedName: TMCmdLet.SendPlanCmdlet.StopProcessing
    isDefinition: true
    commentId: Overload:TMCmdLet.SendPlanCmdlet.StopProcessing
  TMCmdLet.SendPlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.SendPlanCmdlet
        name: SendPlanCmdlet
        nameWithType: SendPlanCmdlet
        qualifiedName: TMCmdLet.SendPlanCmdlet
      VB:
      - id: TMCmdLet.SendPlanCmdlet
        name: SendPlanCmdlet
        nameWithType: SendPlanCmdlet
        qualifiedName: TMCmdLet.SendPlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.SendPlanCmdlet
  TMCmdLet:
    name:
      CSharp:
      - name: TMCmdLet
        nameWithType: TMCmdLet
        qualifiedName: TMCmdLet
      VB:
      - name: TMCmdLet
        nameWithType: TMCmdLet
        qualifiedName: TMCmdLet
    isDefinition: true
    commentId: N:TMCmdLet
  TMCmdLet.PlanCmdlet.IpAddress:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.IpAddress
        name: IpAddress
        nameWithType: PlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.PlanCmdlet.IpAddress
      VB:
      - id: TMCmdLet.PlanCmdlet.IpAddress
        name: IpAddress
        nameWithType: PlanCmdlet.IpAddress
        qualifiedName: TMCmdLet.PlanCmdlet.IpAddress
    isDefinition: true
    parent: TMCmdLet.PlanCmdlet
    commentId: P:TMCmdLet.PlanCmdlet.IpAddress
  TMCmdLet.PlanCmdlet.Port:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.Port
        name: Port
        nameWithType: PlanCmdlet.Port
        qualifiedName: TMCmdLet.PlanCmdlet.Port
      VB:
      - id: TMCmdLet.PlanCmdlet.Port
        name: Port
        nameWithType: PlanCmdlet.Port
        qualifiedName: TMCmdLet.PlanCmdlet.Port
    isDefinition: true
    parent: TMCmdLet.PlanCmdlet
    commentId: P:TMCmdLet.PlanCmdlet.Port
  TMCmdLet.PlanCmdlet.OK:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.OK
        name: OK
        nameWithType: PlanCmdlet.OK
        qualifiedName: TMCmdLet.PlanCmdlet.OK
      VB:
      - id: TMCmdLet.PlanCmdlet.OK
        name: OK
        nameWithType: PlanCmdlet.OK
        qualifiedName: TMCmdLet.PlanCmdlet.OK
    isDefinition: true
    parent: TMCmdLet.PlanCmdlet
    commentId: P:TMCmdLet.PlanCmdlet.OK
  System.Management.Automation.SwitchParameter:
    name:
      CSharp:
      - id: System.Management.Automation.SwitchParameter
        name: SwitchParameter
        nameWithType: SwitchParameter
        qualifiedName: System.Management.Automation.SwitchParameter
        isExternal: true
      VB:
      - id: System.Management.Automation.SwitchParameter
        name: SwitchParameter
        nameWithType: SwitchParameter
        qualifiedName: System.Management.Automation.SwitchParameter
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.SwitchParameter
  TMCmdLet.StartPlanCmdlet.Resume*:
    name:
      CSharp:
      - id: TMCmdLet.StartPlanCmdlet.Resume*
        name: Resume
        nameWithType: StartPlanCmdlet.Resume
        qualifiedName: TMCmdLet.StartPlanCmdlet.Resume
      VB:
      - id: TMCmdLet.StartPlanCmdlet.Resume*
        name: Resume
        nameWithType: StartPlanCmdlet.Resume
        qualifiedName: TMCmdLet.StartPlanCmdlet.Resume
    isDefinition: true
    commentId: Overload:TMCmdLet.StartPlanCmdlet.Resume
  TMCmdLet.PlanCmdlet.ProcessRecord:
    name:
      CSharp:
      - id: TMCmdLet.PlanCmdlet.ProcessRecord
        name: ProcessRecord
        nameWithType: PlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.PlanCmdlet.ProcessRecord
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: TMCmdLet.PlanCmdlet.ProcessRecord
        name: ProcessRecord
        nameWithType: PlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.PlanCmdlet.ProcessRecord
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: TMCmdLet.PlanCmdlet
    commentId: M:TMCmdLet.PlanCmdlet.ProcessRecord
  TMCmdLet.StartPlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.StartPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: StartPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.StartPlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.StartPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: StartPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.StartPlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.StartPlanCmdlet.ProcessRecord
  TMCmdLet.StartPlanCmdlet.StopProcessing*:
    name:
      CSharp:
      - id: TMCmdLet.StartPlanCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: StartPlanCmdlet.StopProcessing
        qualifiedName: TMCmdLet.StartPlanCmdlet.StopProcessing
      VB:
      - id: TMCmdLet.StartPlanCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: StartPlanCmdlet.StopProcessing
        qualifiedName: TMCmdLet.StartPlanCmdlet.StopProcessing
    isDefinition: true
    commentId: Overload:TMCmdLet.StartPlanCmdlet.StopProcessing
  TMCmdLet.StartPlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.StartPlanCmdlet
        name: StartPlanCmdlet
        nameWithType: StartPlanCmdlet
        qualifiedName: TMCmdLet.StartPlanCmdlet
      VB:
      - id: TMCmdLet.StartPlanCmdlet
        name: StartPlanCmdlet
        nameWithType: StartPlanCmdlet
        qualifiedName: TMCmdLet.StartPlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.StartPlanCmdlet
  TMCmdLet.StopPlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.StopPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: StopPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.StopPlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.StopPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: StopPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.StopPlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.StopPlanCmdlet.ProcessRecord
  TMCmdLet.StopPlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.StopPlanCmdlet
        name: StopPlanCmdlet
        nameWithType: StopPlanCmdlet
        qualifiedName: TMCmdLet.StopPlanCmdlet
      VB:
      - id: TMCmdLet.StopPlanCmdlet
        name: StopPlanCmdlet
        nameWithType: StopPlanCmdlet
        qualifiedName: TMCmdLet.StopPlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.StopPlanCmdlet
  TMCmdLet.SuspendPlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.SuspendPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SuspendPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SuspendPlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.SuspendPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SuspendPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SuspendPlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.SuspendPlanCmdlet.ProcessRecord
  TMCmdLet.SuspendPlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.SuspendPlanCmdlet
        name: SuspendPlanCmdlet
        nameWithType: SuspendPlanCmdlet
        qualifiedName: TMCmdLet.SuspendPlanCmdlet
      VB:
      - id: TMCmdLet.SuspendPlanCmdlet
        name: SuspendPlanCmdlet
        nameWithType: SuspendPlanCmdlet
        qualifiedName: TMCmdLet.SuspendPlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.SuspendPlanCmdlet
  TMCmdLet.GetPlanResultsCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: GetPlanResultsCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: GetPlanResultsCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.GetPlanResultsCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.GetPlanResultsCmdlet.ProcessRecord
  TMCmdLet.GetPlanResultsCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.GetPlanResultsCmdlet
        name: GetPlanResultsCmdlet
        nameWithType: GetPlanResultsCmdlet
        qualifiedName: TMCmdLet.GetPlanResultsCmdlet
      VB:
      - id: TMCmdLet.GetPlanResultsCmdlet
        name: GetPlanResultsCmdlet
        nameWithType: GetPlanResultsCmdlet
        qualifiedName: TMCmdLet.GetPlanResultsCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.GetPlanResultsCmdlet
  TMCmdLet.ClearPlanCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.ClearPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: ClearPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.ClearPlanCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.ClearPlanCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: ClearPlanCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.ClearPlanCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.ClearPlanCmdlet.ProcessRecord
  TMCmdLet.ClearPlanCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.ClearPlanCmdlet
        name: ClearPlanCmdlet
        nameWithType: ClearPlanCmdlet
        qualifiedName: TMCmdLet.ClearPlanCmdlet
      VB:
      - id: TMCmdLet.ClearPlanCmdlet
        name: ClearPlanCmdlet
        nameWithType: ClearPlanCmdlet
        qualifiedName: TMCmdLet.ClearPlanCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.ClearPlanCmdlet
  TMCmdLet.ConnectServerCmdlet.IpAddress*:
    name:
      CSharp:
      - id: TMCmdLet.ConnectServerCmdlet.IpAddress*
        name: IpAddress
        nameWithType: ConnectServerCmdlet.IpAddress
        qualifiedName: TMCmdLet.ConnectServerCmdlet.IpAddress
      VB:
      - id: TMCmdLet.ConnectServerCmdlet.IpAddress*
        name: IpAddress
        nameWithType: ConnectServerCmdlet.IpAddress
        qualifiedName: TMCmdLet.ConnectServerCmdlet.IpAddress
    isDefinition: true
    commentId: Overload:TMCmdLet.ConnectServerCmdlet.IpAddress
  TMCmdLet.ConnectServerCmdlet.Port*:
    name:
      CSharp:
      - id: TMCmdLet.ConnectServerCmdlet.Port*
        name: Port
        nameWithType: ConnectServerCmdlet.Port
        qualifiedName: TMCmdLet.ConnectServerCmdlet.Port
      VB:
      - id: TMCmdLet.ConnectServerCmdlet.Port*
        name: Port
        nameWithType: ConnectServerCmdlet.Port
        qualifiedName: TMCmdLet.ConnectServerCmdlet.Port
    isDefinition: true
    commentId: Overload:TMCmdLet.ConnectServerCmdlet.Port
  System.Management.Automation.ValidateRangeAttribute:
    name:
      CSharp:
      - id: System.Management.Automation.ValidateRangeAttribute
        name: ValidateRangeAttribute
        nameWithType: ValidateRangeAttribute
        qualifiedName: System.Management.Automation.ValidateRangeAttribute
        isExternal: true
      VB:
      - id: System.Management.Automation.ValidateRangeAttribute
        name: ValidateRangeAttribute
        nameWithType: ValidateRangeAttribute
        qualifiedName: System.Management.Automation.ValidateRangeAttribute
        isExternal: true
    isDefinition: true
    parent: System.Management.Automation
    commentId: T:System.Management.Automation.ValidateRangeAttribute
  System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
        name: ValidateRangeAttribute
        nameWithType: ValidateRangeAttribute.ValidateRangeAttribute
        qualifiedName: System.Management.Automation.ValidateRangeAttribute.ValidateRangeAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
        name: ValidateRangeAttribute
        nameWithType: ValidateRangeAttribute.ValidateRangeAttribute
        qualifiedName: System.Management.Automation.ValidateRangeAttribute.ValidateRangeAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Management.Automation.ValidateRangeAttribute
    commentId: M:System.Management.Automation.ValidateRangeAttribute.#ctor(System.Object,System.Object)
  TMCmdLet.ConnectServerCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.ConnectServerCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: ConnectServerCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.ConnectServerCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.ConnectServerCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: ConnectServerCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.ConnectServerCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.ConnectServerCmdlet.ProcessRecord
  TMCmdLet.ConnectServerCmdlet.StopProcessing*:
    name:
      CSharp:
      - id: TMCmdLet.ConnectServerCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: ConnectServerCmdlet.StopProcessing
        qualifiedName: TMCmdLet.ConnectServerCmdlet.StopProcessing
      VB:
      - id: TMCmdLet.ConnectServerCmdlet.StopProcessing*
        name: StopProcessing
        nameWithType: ConnectServerCmdlet.StopProcessing
        qualifiedName: TMCmdLet.ConnectServerCmdlet.StopProcessing
    isDefinition: true
    commentId: Overload:TMCmdLet.ConnectServerCmdlet.StopProcessing
  TMCmdLet.ConnectServerCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.ConnectServerCmdlet
        name: ConnectServerCmdlet
        nameWithType: ConnectServerCmdlet
        qualifiedName: TMCmdLet.ConnectServerCmdlet
      VB:
      - id: TMCmdLet.ConnectServerCmdlet
        name: ConnectServerCmdlet
        nameWithType: ConnectServerCmdlet
        qualifiedName: TMCmdLet.ConnectServerCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.ConnectServerCmdlet
  TMCmdLet.SetDefaultsCmdlet.IpAddress*:
    name:
      CSharp:
      - id: TMCmdLet.SetDefaultsCmdlet.IpAddress*
        name: IpAddress
        nameWithType: SetDefaultsCmdlet.IpAddress
        qualifiedName: TMCmdLet.SetDefaultsCmdlet.IpAddress
      VB:
      - id: TMCmdLet.SetDefaultsCmdlet.IpAddress*
        name: IpAddress
        nameWithType: SetDefaultsCmdlet.IpAddress
        qualifiedName: TMCmdLet.SetDefaultsCmdlet.IpAddress
    isDefinition: true
    commentId: Overload:TMCmdLet.SetDefaultsCmdlet.IpAddress
  TMCmdLet.SetDefaultsCmdlet.Port*:
    name:
      CSharp:
      - id: TMCmdLet.SetDefaultsCmdlet.Port*
        name: Port
        nameWithType: SetDefaultsCmdlet.Port
        qualifiedName: TMCmdLet.SetDefaultsCmdlet.Port
      VB:
      - id: TMCmdLet.SetDefaultsCmdlet.Port*
        name: Port
        nameWithType: SetDefaultsCmdlet.Port
        qualifiedName: TMCmdLet.SetDefaultsCmdlet.Port
    isDefinition: true
    commentId: Overload:TMCmdLet.SetDefaultsCmdlet.Port
  TMCmdLet.SetDefaultsCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.SetDefaultsCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SetDefaultsCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SetDefaultsCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.SetDefaultsCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SetDefaultsCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SetDefaultsCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.SetDefaultsCmdlet.ProcessRecord
  TMCmdLet.SetDefaultsCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.SetDefaultsCmdlet
        name: SetDefaultsCmdlet
        nameWithType: SetDefaultsCmdlet
        qualifiedName: TMCmdLet.SetDefaultsCmdlet
      VB:
      - id: TMCmdLet.SetDefaultsCmdlet
        name: SetDefaultsCmdlet
        nameWithType: SetDefaultsCmdlet
        qualifiedName: TMCmdLet.SetDefaultsCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.SetDefaultsCmdlet
  TMCmdLet.DisconnectServerCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.DisconnectServerCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: DisconnectServerCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.DisconnectServerCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.DisconnectServerCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: DisconnectServerCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.DisconnectServerCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.DisconnectServerCmdlet.ProcessRecord
  TMCmdLet.DisconnectServerCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.DisconnectServerCmdlet
        name: DisconnectServerCmdlet
        nameWithType: DisconnectServerCmdlet
        qualifiedName: TMCmdLet.DisconnectServerCmdlet
      VB:
      - id: TMCmdLet.DisconnectServerCmdlet
        name: DisconnectServerCmdlet
        nameWithType: DisconnectServerCmdlet
        qualifiedName: TMCmdLet.DisconnectServerCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.DisconnectServerCmdlet
  TMCmdLet.SendCommandCmdlet.Command*:
    name:
      CSharp:
      - id: TMCmdLet.SendCommandCmdlet.Command*
        name: Command
        nameWithType: SendCommandCmdlet.Command
        qualifiedName: TMCmdLet.SendCommandCmdlet.Command
      VB:
      - id: TMCmdLet.SendCommandCmdlet.Command*
        name: Command
        nameWithType: SendCommandCmdlet.Command
        qualifiedName: TMCmdLet.SendCommandCmdlet.Command
    isDefinition: true
    commentId: Overload:TMCmdLet.SendCommandCmdlet.Command
  TMCmdLet.SendCommandCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.SendCommandCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendCommandCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendCommandCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.SendCommandCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendCommandCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendCommandCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.SendCommandCmdlet.ProcessRecord
  TMCmdLet.SendCommandCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.SendCommandCmdlet
        name: SendCommandCmdlet
        nameWithType: SendCommandCmdlet
        qualifiedName: TMCmdLet.SendCommandCmdlet
      VB:
      - id: TMCmdLet.SendCommandCmdlet
        name: SendCommandCmdlet
        nameWithType: SendCommandCmdlet
        qualifiedName: TMCmdLet.SendCommandCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.SendCommandCmdlet
  TMCmdLet.SendInfoCmdlet.Info*:
    name:
      CSharp:
      - id: TMCmdLet.SendInfoCmdlet.Info*
        name: Info
        nameWithType: SendInfoCmdlet.Info
        qualifiedName: TMCmdLet.SendInfoCmdlet.Info
      VB:
      - id: TMCmdLet.SendInfoCmdlet.Info*
        name: Info
        nameWithType: SendInfoCmdlet.Info
        qualifiedName: TMCmdLet.SendInfoCmdlet.Info
    isDefinition: true
    commentId: Overload:TMCmdLet.SendInfoCmdlet.Info
  TMCmdLet.SendInfoCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.SendInfoCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendInfoCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendInfoCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.SendInfoCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendInfoCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendInfoCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.SendInfoCmdlet.ProcessRecord
  TMCmdLet.SendInfoCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.SendInfoCmdlet
        name: SendInfoCmdlet
        nameWithType: SendInfoCmdlet
        qualifiedName: TMCmdLet.SendInfoCmdlet
      VB:
      - id: TMCmdLet.SendInfoCmdlet
        name: SendInfoCmdlet
        nameWithType: SendInfoCmdlet
        qualifiedName: TMCmdLet.SendInfoCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.SendInfoCmdlet
  TMCmdLet.SendDataCmdlet.Data*:
    name:
      CSharp:
      - id: TMCmdLet.SendDataCmdlet.Data*
        name: Data
        nameWithType: SendDataCmdlet.Data
        qualifiedName: TMCmdLet.SendDataCmdlet.Data
      VB:
      - id: TMCmdLet.SendDataCmdlet.Data*
        name: Data
        nameWithType: SendDataCmdlet.Data
        qualifiedName: TMCmdLet.SendDataCmdlet.Data
    isDefinition: true
    commentId: Overload:TMCmdLet.SendDataCmdlet.Data
  TMCmdLet.SendDataCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.SendDataCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendDataCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendDataCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.SendDataCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: SendDataCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.SendDataCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.SendDataCmdlet.ProcessRecord
  TMCmdLet.SendDataCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.SendDataCmdlet
        name: SendDataCmdlet
        nameWithType: SendDataCmdlet
        qualifiedName: TMCmdLet.SendDataCmdlet
      VB:
      - id: TMCmdLet.SendDataCmdlet
        name: SendDataCmdlet
        nameWithType: SendDataCmdlet
        qualifiedName: TMCmdLet.SendDataCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.SendDataCmdlet
  TMCmdLet.GetServerStateCmdlet.WaitTime*:
    name:
      CSharp:
      - id: TMCmdLet.GetServerStateCmdlet.WaitTime*
        name: WaitTime
        nameWithType: GetServerStateCmdlet.WaitTime
        qualifiedName: TMCmdLet.GetServerStateCmdlet.WaitTime
      VB:
      - id: TMCmdLet.GetServerStateCmdlet.WaitTime*
        name: WaitTime
        nameWithType: GetServerStateCmdlet.WaitTime
        qualifiedName: TMCmdLet.GetServerStateCmdlet.WaitTime
    isDefinition: true
    commentId: Overload:TMCmdLet.GetServerStateCmdlet.WaitTime
  TMCmdLet.GetServerStateCmdlet.ProcessRecord*:
    name:
      CSharp:
      - id: TMCmdLet.GetServerStateCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: GetServerStateCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.GetServerStateCmdlet.ProcessRecord
      VB:
      - id: TMCmdLet.GetServerStateCmdlet.ProcessRecord*
        name: ProcessRecord
        nameWithType: GetServerStateCmdlet.ProcessRecord
        qualifiedName: TMCmdLet.GetServerStateCmdlet.ProcessRecord
    isDefinition: true
    commentId: Overload:TMCmdLet.GetServerStateCmdlet.ProcessRecord
  TMCmdLet.GetServerStateCmdlet:
    name:
      CSharp:
      - id: TMCmdLet.GetServerStateCmdlet
        name: GetServerStateCmdlet
        nameWithType: GetServerStateCmdlet
        qualifiedName: TMCmdLet.GetServerStateCmdlet
      VB:
      - id: TMCmdLet.GetServerStateCmdlet
        name: GetServerStateCmdlet
        nameWithType: GetServerStateCmdlet
        qualifiedName: TMCmdLet.GetServerStateCmdlet
    isDefinition: true
    commentId: T:TMCmdLet.GetServerStateCmdlet
